/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const VA_MAJOR_VERSION: u32 = 1;
pub const VA_MINOR_VERSION: u32 = 22;
pub const VA_MICRO_VERSION: u32 = 0;
pub const VA_VERSION_S: &[u8; 7] = b"1.22.0\0";
pub const VA_VERSION_HEX: u32 = 18219008;
pub const VA_STATUS_SUCCESS: u32 = 0;
pub const VA_STATUS_ERROR_OPERATION_FAILED: u32 = 1;
pub const VA_STATUS_ERROR_ALLOCATION_FAILED: u32 = 2;
pub const VA_STATUS_ERROR_INVALID_DISPLAY: u32 = 3;
pub const VA_STATUS_ERROR_INVALID_CONFIG: u32 = 4;
pub const VA_STATUS_ERROR_INVALID_CONTEXT: u32 = 5;
pub const VA_STATUS_ERROR_INVALID_SURFACE: u32 = 6;
pub const VA_STATUS_ERROR_INVALID_BUFFER: u32 = 7;
pub const VA_STATUS_ERROR_INVALID_IMAGE: u32 = 8;
pub const VA_STATUS_ERROR_INVALID_SUBPICTURE: u32 = 9;
pub const VA_STATUS_ERROR_ATTR_NOT_SUPPORTED: u32 = 10;
pub const VA_STATUS_ERROR_MAX_NUM_EXCEEDED: u32 = 11;
pub const VA_STATUS_ERROR_UNSUPPORTED_PROFILE: u32 = 12;
pub const VA_STATUS_ERROR_UNSUPPORTED_ENTRYPOINT: u32 = 13;
pub const VA_STATUS_ERROR_UNSUPPORTED_RT_FORMAT: u32 = 14;
pub const VA_STATUS_ERROR_UNSUPPORTED_BUFFERTYPE: u32 = 15;
pub const VA_STATUS_ERROR_SURFACE_BUSY: u32 = 16;
pub const VA_STATUS_ERROR_FLAG_NOT_SUPPORTED: u32 = 17;
pub const VA_STATUS_ERROR_INVALID_PARAMETER: u32 = 18;
pub const VA_STATUS_ERROR_RESOLUTION_NOT_SUPPORTED: u32 = 19;
pub const VA_STATUS_ERROR_UNIMPLEMENTED: u32 = 20;
pub const VA_STATUS_ERROR_SURFACE_IN_DISPLAYING: u32 = 21;
pub const VA_STATUS_ERROR_INVALID_IMAGE_FORMAT: u32 = 22;
pub const VA_STATUS_ERROR_DECODING_ERROR: u32 = 23;
pub const VA_STATUS_ERROR_ENCODING_ERROR: u32 = 24;
pub const VA_STATUS_ERROR_INVALID_VALUE: u32 = 25;
pub const VA_STATUS_ERROR_UNSUPPORTED_FILTER: u32 = 32;
pub const VA_STATUS_ERROR_INVALID_FILTER_CHAIN: u32 = 33;
pub const VA_STATUS_ERROR_HW_BUSY: u32 = 34;
pub const VA_STATUS_ERROR_UNSUPPORTED_MEMORY_TYPE: u32 = 36;
pub const VA_STATUS_ERROR_NOT_ENOUGH_BUFFER: u32 = 37;
pub const VA_STATUS_ERROR_TIMEDOUT: u32 = 38;
pub const VA_STATUS_ERROR_UNKNOWN: u32 = 4294967295;
pub const VA_FRAME_PICTURE: u32 = 0;
pub const VA_TOP_FIELD: u32 = 1;
pub const VA_BOTTOM_FIELD: u32 = 2;
pub const VA_TOP_FIELD_FIRST: u32 = 4;
pub const VA_BOTTOM_FIELD_FIRST: u32 = 8;
pub const VA_ENABLE_BLEND: u32 = 4;
pub const VA_CLEAR_DRAWABLE: u32 = 8;
pub const VA_SRC_COLOR_MASK: u32 = 240;
pub const VA_SRC_BT601: u32 = 16;
pub const VA_SRC_BT709: u32 = 32;
pub const VA_SRC_SMPTE_240: u32 = 64;
pub const VA_FILTER_SCALING_DEFAULT: u32 = 0;
pub const VA_FILTER_SCALING_FAST: u32 = 256;
pub const VA_FILTER_SCALING_HQ: u32 = 512;
pub const VA_FILTER_SCALING_NL_ANAMORPHIC: u32 = 768;
pub const VA_FILTER_SCALING_MASK: u32 = 3840;
pub const VA_FILTER_INTERPOLATION_DEFAULT: u32 = 0;
pub const VA_FILTER_INTERPOLATION_NEAREST_NEIGHBOR: u32 = 4096;
pub const VA_FILTER_INTERPOLATION_BILINEAR: u32 = 8192;
pub const VA_FILTER_INTERPOLATION_ADVANCED: u32 = 12288;
pub const VA_FILTER_INTERPOLATION_MASK: u32 = 61440;
pub const VA_PADDING_LOW: u32 = 4;
pub const VA_PADDING_MEDIUM: u32 = 8;
pub const VA_PADDING_HIGH: u32 = 16;
pub const VA_PADDING_LARGE: u32 = 32;
pub const VA_EXEC_SYNC: u32 = 0;
pub const VA_EXEC_ASYNC: u32 = 1;
pub const VA_EXEC_MODE_DEFAULT: u32 = 0;
pub const VA_EXEC_MODE_POWER_SAVING: u32 = 1;
pub const VA_EXEC_MODE_PERFORMANCE: u32 = 2;
pub const VA_FEATURE_NOT_SUPPORTED: u32 = 0;
pub const VA_FEATURE_SUPPORTED: u32 = 1;
pub const VA_FEATURE_REQUIRED: u32 = 2;
pub const VA_RT_FORMAT_YUV420: u32 = 1;
pub const VA_RT_FORMAT_YUV422: u32 = 2;
pub const VA_RT_FORMAT_YUV444: u32 = 4;
pub const VA_RT_FORMAT_YUV411: u32 = 8;
pub const VA_RT_FORMAT_YUV400: u32 = 16;
pub const VA_RT_FORMAT_YUV420_10: u32 = 256;
pub const VA_RT_FORMAT_YUV422_10: u32 = 512;
pub const VA_RT_FORMAT_YUV444_10: u32 = 1024;
pub const VA_RT_FORMAT_YUV420_12: u32 = 4096;
pub const VA_RT_FORMAT_YUV422_12: u32 = 8192;
pub const VA_RT_FORMAT_YUV444_12: u32 = 16384;
pub const VA_RT_FORMAT_RGB16: u32 = 65536;
pub const VA_RT_FORMAT_RGB32: u32 = 131072;
pub const VA_RT_FORMAT_RGBP: u32 = 1048576;
pub const VA_RT_FORMAT_RGB32_10: u32 = 2097152;
pub const VA_RT_FORMAT_PROTECTED: u32 = 2147483648;
pub const VA_RT_FORMAT_RGB32_10BPP: u32 = 2097152;
pub const VA_RT_FORMAT_YUV420_10BPP: u32 = 256;
pub const VA_RC_NONE: u32 = 1;
pub const VA_RC_CBR: u32 = 2;
pub const VA_RC_VBR: u32 = 4;
pub const VA_RC_VCM: u32 = 8;
pub const VA_RC_CQP: u32 = 16;
pub const VA_RC_VBR_CONSTRAINED: u32 = 32;
pub const VA_RC_ICQ: u32 = 64;
pub const VA_RC_MB: u32 = 128;
pub const VA_RC_CFS: u32 = 256;
pub const VA_RC_PARALLEL: u32 = 512;
pub const VA_RC_QVBR: u32 = 1024;
pub const VA_RC_AVBR: u32 = 2048;
pub const VA_RC_TCBRC: u32 = 4096;
pub const VA_DEC_SLICE_MODE_NORMAL: u32 = 1;
pub const VA_DEC_SLICE_MODE_BASE: u32 = 2;
pub const VA_DEC_PROCESSING_NONE: u32 = 0;
pub const VA_DEC_PROCESSING: u32 = 1;
pub const VA_ENC_PACKED_HEADER_NONE: u32 = 0;
pub const VA_ENC_PACKED_HEADER_SEQUENCE: u32 = 1;
pub const VA_ENC_PACKED_HEADER_PICTURE: u32 = 2;
pub const VA_ENC_PACKED_HEADER_SLICE: u32 = 4;
pub const VA_ENC_PACKED_HEADER_MISC: u32 = 8;
pub const VA_ENC_PACKED_HEADER_RAW_DATA: u32 = 16;
pub const VA_ENC_INTERLACED_NONE: u32 = 0;
pub const VA_ENC_INTERLACED_FRAME: u32 = 1;
pub const VA_ENC_INTERLACED_FIELD: u32 = 2;
pub const VA_ENC_INTERLACED_MBAFF: u32 = 4;
pub const VA_ENC_INTERLACED_PAFF: u32 = 8;
pub const VA_ENC_SLICE_STRUCTURE_POWER_OF_TWO_ROWS: u32 = 1;
pub const VA_ENC_SLICE_STRUCTURE_ARBITRARY_MACROBLOCKS: u32 = 2;
pub const VA_ENC_SLICE_STRUCTURE_EQUAL_ROWS: u32 = 4;
pub const VA_ENC_SLICE_STRUCTURE_MAX_SLICE_SIZE: u32 = 8;
pub const VA_ENC_SLICE_STRUCTURE_ARBITRARY_ROWS: u32 = 16;
pub const VA_ENC_SLICE_STRUCTURE_EQUAL_MULTI_ROWS: u32 = 32;
pub const VA_ENC_QUANTIZATION_NONE: u32 = 0;
pub const VA_ENC_QUANTIZATION_TRELLIS_SUPPORTED: u32 = 1;
pub const VA_PREDICTION_DIRECTION_PREVIOUS: u32 = 1;
pub const VA_PREDICTION_DIRECTION_FUTURE: u32 = 2;
pub const VA_PREDICTION_DIRECTION_BI_NOT_EMPTY: u32 = 4;
pub const VA_ENC_INTRA_REFRESH_NONE: u32 = 0;
pub const VA_ENC_INTRA_REFRESH_ROLLING_COLUMN: u32 = 1;
pub const VA_ENC_INTRA_REFRESH_ROLLING_ROW: u32 = 2;
pub const VA_ENC_INTRA_REFRESH_ADAPTIVE: u32 = 16;
pub const VA_ENC_INTRA_REFRESH_CYCLIC: u32 = 32;
pub const VA_ENC_INTRA_REFRESH_P_FRAME: u32 = 65536;
pub const VA_ENC_INTRA_REFRESH_B_FRAME: u32 = 131072;
pub const VA_ENC_INTRA_REFRESH_MULTI_REF: u32 = 262144;
pub const VA_PC_CIPHER_AES: u32 = 1;
pub const VA_PC_BLOCK_SIZE_128: u32 = 1;
pub const VA_PC_BLOCK_SIZE_192: u32 = 2;
pub const VA_PC_BLOCK_SIZE_256: u32 = 4;
pub const VA_PC_CIPHER_MODE_ECB: u32 = 1;
pub const VA_PC_CIPHER_MODE_CBC: u32 = 2;
pub const VA_PC_CIPHER_MODE_CTR: u32 = 4;
pub const VA_PC_SAMPLE_TYPE_FULLSAMPLE: u32 = 1;
pub const VA_PC_SAMPLE_TYPE_SUBSAMPLE: u32 = 2;
pub const VA_PC_USAGE_DEFAULT: u32 = 0;
pub const VA_PC_USAGE_WIDEVINE: u32 = 1;
pub const VA_PROCESSING_RATE_NONE: u32 = 0;
pub const VA_PROCESSING_RATE_ENCODE: u32 = 1;
pub const VA_PROCESSING_RATE_DECODE: u32 = 2;
pub const VA_ATTRIB_NOT_SUPPORTED: u32 = 2147483648;
pub const VA_INVALID_ID: u32 = 4294967295;
pub const VA_INVALID_SURFACE: u32 = 4294967295;
pub const VA_SURFACE_ATTRIB_NOT_SUPPORTED: u32 = 0;
pub const VA_SURFACE_ATTRIB_GETTABLE: u32 = 1;
pub const VA_SURFACE_ATTRIB_SETTABLE: u32 = 2;
pub const VA_SURFACE_ATTRIB_MEM_TYPE_VA: u32 = 1;
pub const VA_SURFACE_ATTRIB_MEM_TYPE_V4L2: u32 = 2;
pub const VA_SURFACE_ATTRIB_MEM_TYPE_USER_PTR: u32 = 4;
pub const VA_SURFACE_EXTBUF_DESC_ENABLE_TILING: u32 = 1;
pub const VA_SURFACE_EXTBUF_DESC_CACHED: u32 = 2;
pub const VA_SURFACE_EXTBUF_DESC_UNCACHED: u32 = 4;
pub const VA_SURFACE_EXTBUF_DESC_WC: u32 = 8;
pub const VA_SURFACE_EXTBUF_DESC_PROTECTED: u32 = 2147483648;
pub const VA_SURFACE_ATTRIB_USAGE_HINT_GENERIC: u32 = 0;
pub const VA_SURFACE_ATTRIB_USAGE_HINT_DECODER: u32 = 1;
pub const VA_SURFACE_ATTRIB_USAGE_HINT_ENCODER: u32 = 2;
pub const VA_SURFACE_ATTRIB_USAGE_HINT_VPP_READ: u32 = 4;
pub const VA_SURFACE_ATTRIB_USAGE_HINT_VPP_WRITE: u32 = 8;
pub const VA_SURFACE_ATTRIB_USAGE_HINT_DISPLAY: u32 = 16;
pub const VA_SURFACE_ATTRIB_USAGE_HINT_EXPORT: u32 = 32;
pub const VA_PROGRESSIVE: u32 = 1;
pub const VA_ENCRYPTION_TYPE_FULLSAMPLE_CTR: u32 = 1;
pub const VA_ENCRYPTION_TYPE_FULLSAMPLE_CBC: u32 = 2;
pub const VA_ENCRYPTION_TYPE_SUBSAMPLE_CTR: u32 = 4;
pub const VA_ENCRYPTION_TYPE_SUBSAMPLE_CBC: u32 = 8;
pub const VA_SLICE_DATA_FLAG_ALL: u32 = 0;
pub const VA_SLICE_DATA_FLAG_BEGIN: u32 = 1;
pub const VA_SLICE_DATA_FLAG_MIDDLE: u32 = 2;
pub const VA_SLICE_DATA_FLAG_END: u32 = 4;
pub const VA_MB_TYPE_MOTION_FORWARD: u32 = 2;
pub const VA_MB_TYPE_MOTION_BACKWARD: u32 = 4;
pub const VA_MB_TYPE_MOTION_PATTERN: u32 = 8;
pub const VA_MB_TYPE_MOTION_INTRA: u32 = 16;
pub const VA_PICTURE_H264_INVALID: u32 = 1;
pub const VA_PICTURE_H264_TOP_FIELD: u32 = 2;
pub const VA_PICTURE_H264_BOTTOM_FIELD: u32 = 4;
pub const VA_PICTURE_H264_SHORT_TERM_REFERENCE: u32 = 8;
pub const VA_PICTURE_H264_LONG_TERM_REFERENCE: u32 = 16;
pub const VA_CODED_BUF_STATUS_PICTURE_AVE_QP_MASK: u32 = 255;
pub const VA_CODED_BUF_STATUS_LARGE_SLICE_MASK: u32 = 256;
pub const VA_CODED_BUF_STATUS_SLICE_OVERFLOW_MASK: u32 = 512;
pub const VA_CODED_BUF_STATUS_BITRATE_OVERFLOW: u32 = 1024;
pub const VA_CODED_BUF_STATUS_BITRATE_HIGH: u32 = 2048;
pub const VA_CODED_BUF_STATUS_FRAME_SIZE_OVERFLOW: u32 = 4096;
pub const VA_CODED_BUF_STATUS_BAD_BITSTREAM: u32 = 32768;
pub const VA_CODED_BUF_STATUS_AIR_MB_OVER_THRESHOLD: u32 = 16711680;
pub const VA_CODED_BUF_STATUS_NUMBER_PASSES_MASK: u32 = 251658240;
pub const VA_CODED_BUF_STATUS_SINGLE_NALU: u32 = 268435456;
pub const VA_MAPBUFFER_FLAG_DEFAULT: u32 = 0;
pub const VA_MAPBUFFER_FLAG_READ: u32 = 1;
pub const VA_MAPBUFFER_FLAG_WRITE: u32 = 2;
pub const VA_EXPORT_SURFACE_READ_ONLY: u32 = 1;
pub const VA_EXPORT_SURFACE_WRITE_ONLY: u32 = 2;
pub const VA_EXPORT_SURFACE_READ_WRITE: u32 = 3;
pub const VA_EXPORT_SURFACE_SEPARATE_LAYERS: u32 = 4;
pub const VA_EXPORT_SURFACE_COMPOSED_LAYERS: u32 = 8;
pub const VA_TIMEOUT_INFINITE: i32 = -1;
pub const VA_FOURCC_NV12: u32 = 842094158;
pub const VA_FOURCC_NV21: u32 = 825382478;
pub const VA_FOURCC_AI44: u32 = 875839817;
pub const VA_FOURCC_RGBA: u32 = 1094862674;
pub const VA_FOURCC_RGBX: u32 = 1480738642;
pub const VA_FOURCC_BGRA: u32 = 1095911234;
pub const VA_FOURCC_BGRX: u32 = 1481787202;
pub const VA_FOURCC_ARGB: u32 = 1111970369;
pub const VA_FOURCC_XRGB: u32 = 1111970392;
pub const VA_FOURCC_ABGR: u32 = 1380401729;
pub const VA_FOURCC_XBGR: u32 = 1380401752;
pub const VA_FOURCC_UYVY: u32 = 1498831189;
pub const VA_FOURCC_YUY2: u32 = 844715353;
pub const VA_FOURCC_AYUV: u32 = 1448433985;
pub const VA_FOURCC_NV11: u32 = 825316942;
pub const VA_FOURCC_YV12: u32 = 842094169;
pub const VA_FOURCC_P208: u32 = 942682704;
pub const VA_FOURCC_I420: u32 = 808596553;
pub const VA_FOURCC_YV24: u32 = 875714137;
pub const VA_FOURCC_YV32: u32 = 842225241;
pub const VA_FOURCC_Y800: u32 = 808466521;
pub const VA_FOURCC_IMC3: u32 = 860048713;
pub const VA_FOURCC_411P: u32 = 1345401140;
pub const VA_FOURCC_411R: u32 = 1378955572;
pub const VA_FOURCC_422H: u32 = 1211249204;
pub const VA_FOURCC_422V: u32 = 1446130228;
pub const VA_FOURCC_444P: u32 = 1345598516;
pub const VA_FOURCC_RGBP: u32 = 1346520914;
pub const VA_FOURCC_BGRP: u32 = 1347569474;
pub const VA_FOURCC_RGB565: u32 = 909199186;
pub const VA_FOURCC_BGR565: u32 = 909199170;
pub const VA_FOURCC_Y210: u32 = 808530521;
pub const VA_FOURCC_Y212: u32 = 842084953;
pub const VA_FOURCC_Y216: u32 = 909193817;
pub const VA_FOURCC_Y410: u32 = 808531033;
pub const VA_FOURCC_Y412: u32 = 842085465;
pub const VA_FOURCC_Y416: u32 = 909194329;
pub const VA_FOURCC_YV16: u32 = 909203033;
pub const VA_FOURCC_P010: u32 = 808530000;
pub const VA_FOURCC_P012: u32 = 842084432;
pub const VA_FOURCC_P016: u32 = 909193296;
pub const VA_FOURCC_I010: u32 = 808529993;
pub const VA_FOURCC_IYUV: u32 = 1448433993;
pub const VA_FOURCC_A2R10G10B10: u32 = 808669761;
pub const VA_FOURCC_A2B10G10R10: u32 = 808665665;
pub const VA_FOURCC_X2R10G10B10: u32 = 808669784;
pub const VA_FOURCC_X2B10G10R10: u32 = 808665688;
pub const VA_FOURCC_Y8: u32 = 538982489;
pub const VA_FOURCC_Y16: u32 = 540422489;
pub const VA_FOURCC_VYUY: u32 = 1498765654;
pub const VA_FOURCC_YVYU: u32 = 1431918169;
pub const VA_FOURCC_ARGB64: u32 = 877089345;
pub const VA_FOURCC_ABGR64: u32 = 877085249;
pub const VA_FOURCC_XYUV: u32 = 1448434008;
pub const VA_FOURCC_Q416: u32 = 909194321;
pub const VA_LSB_FIRST: u32 = 1;
pub const VA_MSB_FIRST: u32 = 2;
pub const VA_SUBPICTURE_CHROMA_KEYING: u32 = 1;
pub const VA_SUBPICTURE_GLOBAL_ALPHA: u32 = 2;
pub const VA_SUBPICTURE_DESTINATION_IS_SCREEN_COORD: u32 = 4;
pub const VA_ROTATION_NONE: u32 = 0;
pub const VA_ROTATION_90: u32 = 1;
pub const VA_ROTATION_180: u32 = 2;
pub const VA_ROTATION_270: u32 = 3;
pub const VA_MIRROR_NONE: u32 = 0;
pub const VA_MIRROR_HORIZONTAL: u32 = 1;
pub const VA_MIRROR_VERTICAL: u32 = 2;
pub const VA_OOL_DEBLOCKING_FALSE: u32 = 0;
pub const VA_OOL_DEBLOCKING_TRUE: u32 = 1;
pub const VA_RENDER_MODE_UNDEFINED: u32 = 0;
pub const VA_RENDER_MODE_LOCAL_OVERLAY: u32 = 1;
pub const VA_RENDER_MODE_LOCAL_GPU: u32 = 2;
pub const VA_RENDER_MODE_EXTERNAL_OVERLAY: u32 = 4;
pub const VA_RENDER_MODE_EXTERNAL_GPU: u32 = 8;
pub const VA_RENDER_DEVICE_UNDEFINED: u32 = 0;
pub const VA_RENDER_DEVICE_LOCAL: u32 = 1;
pub const VA_RENDER_DEVICE_EXTERNAL: u32 = 2;
pub const VA_DISPLAY_ATTRIB_NOT_SUPPORTED: u32 = 0;
pub const VA_DISPLAY_ATTRIB_GETTABLE: u32 = 1;
pub const VA_DISPLAY_ATTRIB_SETTABLE: u32 = 2;
pub const VA_PICTURE_HEVC_INVALID: u32 = 1;
pub const VA_PICTURE_HEVC_FIELD_PIC: u32 = 2;
pub const VA_PICTURE_HEVC_BOTTOM_FIELD: u32 = 4;
pub const VA_PICTURE_HEVC_LONG_TERM_REFERENCE: u32 = 8;
pub const VA_PICTURE_HEVC_RPS_ST_CURR_BEFORE: u32 = 16;
pub const VA_PICTURE_HEVC_RPS_ST_CURR_AFTER: u32 = 32;
pub const VA_PICTURE_HEVC_RPS_LT_CURR: u32 = 64;
pub const VA_PICTURE_VVC_INVALID: u32 = 1;
pub const VA_PICTURE_VVC_LONG_TERM_REFERENCE: u32 = 2;
pub const VA_PICTURE_VVC_UNAVAILABLE_REFERENCE: u32 = 4;
pub const HEVC_LAST_PICTURE_EOSEQ: u32 = 1;
pub const HEVC_LAST_PICTURE_EOSTREAM: u32 = 2;
pub const VA_FEI_FUNCTION_ENC: u32 = 1;
pub const VA_FEI_FUNCTION_PAK: u32 = 2;
pub const VA_FEI_FUNCTION_ENC_PAK: u32 = 4;
pub const VA_PICTURE_STATS_INVALID: u32 = 1;
pub const VA_PICTURE_STATS_PROGRESSIVE: u32 = 0;
pub const VA_PICTURE_STATS_TOP_FIELD: u32 = 2;
pub const VA_PICTURE_STATS_BOTTOM_FIELD: u32 = 4;
pub const VA_PICTURE_STATS_CONTENT_UPDATED: u32 = 16;
pub const H264_LAST_PICTURE_EOSEQ: u32 = 1;
pub const H264_LAST_PICTURE_EOSTREAM: u32 = 2;
pub const VA_MB_PRED_AVAIL_TOP_LEFT: u32 = 4;
pub const VA_MB_PRED_AVAIL_TOP: u32 = 16;
pub const VA_MB_PRED_AVAIL_TOP_RIGHT: u32 = 8;
pub const VA_MB_PRED_AVAIL_LEFT: u32 = 64;
pub const VA_AV1_MAX_SEGMENTS: u32 = 8;
pub const VA_AV1_SEG_LVL_MAX: u32 = 8;
pub const VA_BLEND_GLOBAL_ALPHA: u32 = 1;
pub const VA_BLEND_PREMULTIPLIED_ALPHA: u32 = 2;
pub const VA_BLEND_LUMA_KEY: u32 = 16;
pub const VA_PROC_PIPELINE_SUBPICTURES: u32 = 1;
pub const VA_PROC_PIPELINE_FAST: u32 = 2;
pub const VA_PROC_FILTER_MANDATORY: u32 = 1;
pub const VA_PIPELINE_FLAG_END: u32 = 4;
pub const VA_CHROMA_SITING_UNKNOWN: u32 = 0;
pub const VA_CHROMA_SITING_VERTICAL_TOP: u32 = 1;
pub const VA_CHROMA_SITING_VERTICAL_CENTER: u32 = 2;
pub const VA_CHROMA_SITING_VERTICAL_BOTTOM: u32 = 3;
pub const VA_CHROMA_SITING_HORIZONTAL_LEFT: u32 = 4;
pub const VA_CHROMA_SITING_HORIZONTAL_CENTER: u32 = 8;
pub const VA_SOURCE_RANGE_UNKNOWN: u32 = 0;
pub const VA_SOURCE_RANGE_REDUCED: u32 = 1;
pub const VA_SOURCE_RANGE_FULL: u32 = 2;
pub const VA_TONE_MAPPING_HDR_TO_HDR: u32 = 1;
pub const VA_TONE_MAPPING_HDR_TO_SDR: u32 = 2;
pub const VA_TONE_MAPPING_HDR_TO_EDR: u32 = 4;
pub const VA_TONE_MAPPING_SDR_TO_HDR: u32 = 8;
pub const VA_DEINTERLACING_BOTTOM_FIELD_FIRST: u32 = 1;
pub const VA_DEINTERLACING_BOTTOM_FIELD: u32 = 2;
pub const VA_DEINTERLACING_ONE_FIELD: u32 = 4;
pub const VA_DEINTERLACING_FMD_ENABLE: u32 = 8;
pub const VA_DEINTERLACING_SCD_ENABLE: u32 = 16;
pub const VA_PROC_HVS_DENOISE_DEFAULT: u32 = 0;
pub const VA_PROC_HVS_DENOISE_AUTO_BDRATE: u32 = 1;
pub const VA_PROC_HVS_DENOISE_AUTO_SUBJECTIVE: u32 = 2;
pub const VA_PROC_HVS_DENOISE_MANUAL: u32 = 3;
pub const VA_3DLUT_CHANNEL_UNKNOWN: u32 = 0;
pub const VA_3DLUT_CHANNEL_RGB_RGB: u32 = 1;
pub const VA_3DLUT_CHANNEL_YUV_RGB: u32 = 2;
pub const VA_3DLUT_CHANNEL_VUY_RGB: u32 = 4;
pub type VADisplay = *mut ::std::os::raw::c_void;
pub type VAStatus = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VARectangle {
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VARectangle"][::std::mem::size_of::<_VARectangle>() - 8usize];
    ["Alignment of _VARectangle"][::std::mem::align_of::<_VARectangle>() - 2usize];
    ["Offset of field: _VARectangle::x"][::std::mem::offset_of!(_VARectangle, x) - 0usize];
    ["Offset of field: _VARectangle::y"][::std::mem::offset_of!(_VARectangle, y) - 2usize];
    ["Offset of field: _VARectangle::width"][::std::mem::offset_of!(_VARectangle, width) - 4usize];
    ["Offset of field: _VARectangle::height"]
        [::std::mem::offset_of!(_VARectangle, height) - 6usize];
};
pub type VARectangle = _VARectangle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAMotionVector {
    pub mv0: [i16; 2usize],
    pub mv1: [i16; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAMotionVector"][::std::mem::size_of::<_VAMotionVector>() - 8usize];
    ["Alignment of _VAMotionVector"][::std::mem::align_of::<_VAMotionVector>() - 2usize];
    ["Offset of field: _VAMotionVector::mv0"]
        [::std::mem::offset_of!(_VAMotionVector, mv0) - 0usize];
    ["Offset of field: _VAMotionVector::mv1"]
        [::std::mem::offset_of!(_VAMotionVector, mv1) - 4usize];
};
pub type VAMotionVector = _VAMotionVector;
pub type VAMessageCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_context: *mut ::std::os::raw::c_void,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub type VANativeDisplay = *mut ::std::os::raw::c_void;
pub type VAPrivFunc = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub const VAProfileNone: VAProfile = -1;
pub const VAProfileMPEG2Simple: VAProfile = 0;
pub const VAProfileMPEG2Main: VAProfile = 1;
pub const VAProfileMPEG4Simple: VAProfile = 2;
pub const VAProfileMPEG4AdvancedSimple: VAProfile = 3;
pub const VAProfileMPEG4Main: VAProfile = 4;
pub const VAProfileH264Baseline: VAProfile = 5;
pub const VAProfileH264Main: VAProfile = 6;
pub const VAProfileH264High: VAProfile = 7;
pub const VAProfileVC1Simple: VAProfile = 8;
pub const VAProfileVC1Main: VAProfile = 9;
pub const VAProfileVC1Advanced: VAProfile = 10;
pub const VAProfileH263Baseline: VAProfile = 11;
pub const VAProfileJPEGBaseline: VAProfile = 12;
pub const VAProfileH264ConstrainedBaseline: VAProfile = 13;
pub const VAProfileVP8Version0_3: VAProfile = 14;
pub const VAProfileH264MultiviewHigh: VAProfile = 15;
pub const VAProfileH264StereoHigh: VAProfile = 16;
pub const VAProfileHEVCMain: VAProfile = 17;
pub const VAProfileHEVCMain10: VAProfile = 18;
pub const VAProfileVP9Profile0: VAProfile = 19;
pub const VAProfileVP9Profile1: VAProfile = 20;
pub const VAProfileVP9Profile2: VAProfile = 21;
pub const VAProfileVP9Profile3: VAProfile = 22;
pub const VAProfileHEVCMain12: VAProfile = 23;
pub const VAProfileHEVCMain422_10: VAProfile = 24;
pub const VAProfileHEVCMain422_12: VAProfile = 25;
pub const VAProfileHEVCMain444: VAProfile = 26;
pub const VAProfileHEVCMain444_10: VAProfile = 27;
pub const VAProfileHEVCMain444_12: VAProfile = 28;
pub const VAProfileHEVCSccMain: VAProfile = 29;
pub const VAProfileHEVCSccMain10: VAProfile = 30;
pub const VAProfileHEVCSccMain444: VAProfile = 31;
pub const VAProfileAV1Profile0: VAProfile = 32;
pub const VAProfileAV1Profile1: VAProfile = 33;
pub const VAProfileHEVCSccMain444_10: VAProfile = 34;
pub const VAProfileProtected: VAProfile = 35;
pub const VAProfileH264High10: VAProfile = 36;
pub const VAProfileVVCMain10: VAProfile = 37;
pub const VAProfileVVCMultilayerMain10: VAProfile = 38;
pub type VAProfile = ::std::os::raw::c_int;
pub const VAEntrypointVLD: VAEntrypoint = 1;
pub const VAEntrypointIZZ: VAEntrypoint = 2;
pub const VAEntrypointIDCT: VAEntrypoint = 3;
pub const VAEntrypointMoComp: VAEntrypoint = 4;
pub const VAEntrypointDeblocking: VAEntrypoint = 5;
pub const VAEntrypointEncSlice: VAEntrypoint = 6;
pub const VAEntrypointEncPicture: VAEntrypoint = 7;
pub const VAEntrypointEncSliceLP: VAEntrypoint = 8;
pub const VAEntrypointVideoProc: VAEntrypoint = 10;
pub const VAEntrypointFEI: VAEntrypoint = 11;
pub const VAEntrypointStats: VAEntrypoint = 12;
pub const VAEntrypointProtectedTEEComm: VAEntrypoint = 13;
pub const VAEntrypointProtectedContent: VAEntrypoint = 14;
pub type VAEntrypoint = ::std::os::raw::c_uint;
pub const VAConfigAttribRTFormat: VAConfigAttribType = 0;
pub const VAConfigAttribSpatialResidual: VAConfigAttribType = 1;
pub const VAConfigAttribSpatialClipping: VAConfigAttribType = 2;
pub const VAConfigAttribIntraResidual: VAConfigAttribType = 3;
pub const VAConfigAttribEncryption: VAConfigAttribType = 4;
pub const VAConfigAttribRateControl: VAConfigAttribType = 5;
pub const VAConfigAttribDecSliceMode: VAConfigAttribType = 6;
pub const VAConfigAttribDecJPEG: VAConfigAttribType = 7;
pub const VAConfigAttribDecProcessing: VAConfigAttribType = 8;
pub const VAConfigAttribEncPackedHeaders: VAConfigAttribType = 10;
pub const VAConfigAttribEncInterlaced: VAConfigAttribType = 11;
pub const VAConfigAttribEncMaxRefFrames: VAConfigAttribType = 13;
pub const VAConfigAttribEncMaxSlices: VAConfigAttribType = 14;
pub const VAConfigAttribEncSliceStructure: VAConfigAttribType = 15;
pub const VAConfigAttribEncMacroblockInfo: VAConfigAttribType = 16;
pub const VAConfigAttribMaxPictureWidth: VAConfigAttribType = 18;
pub const VAConfigAttribMaxPictureHeight: VAConfigAttribType = 19;
pub const VAConfigAttribEncJPEG: VAConfigAttribType = 20;
pub const VAConfigAttribEncQualityRange: VAConfigAttribType = 21;
pub const VAConfigAttribEncQuantization: VAConfigAttribType = 22;
pub const VAConfigAttribEncIntraRefresh: VAConfigAttribType = 23;
pub const VAConfigAttribEncSkipFrame: VAConfigAttribType = 24;
pub const VAConfigAttribEncROI: VAConfigAttribType = 25;
pub const VAConfigAttribEncRateControlExt: VAConfigAttribType = 26;
pub const VAConfigAttribProcessingRate: VAConfigAttribType = 27;
pub const VAConfigAttribEncDirtyRect: VAConfigAttribType = 28;
pub const VAConfigAttribEncParallelRateControl: VAConfigAttribType = 29;
pub const VAConfigAttribEncDynamicScaling: VAConfigAttribType = 30;
pub const VAConfigAttribFrameSizeToleranceSupport: VAConfigAttribType = 31;
pub const VAConfigAttribFEIFunctionType: VAConfigAttribType = 32;
pub const VAConfigAttribFEIMVPredictors: VAConfigAttribType = 33;
pub const VAConfigAttribStats: VAConfigAttribType = 34;
pub const VAConfigAttribEncTileSupport: VAConfigAttribType = 35;
pub const VAConfigAttribCustomRoundingControl: VAConfigAttribType = 36;
pub const VAConfigAttribQPBlockSize: VAConfigAttribType = 37;
pub const VAConfigAttribMaxFrameSize: VAConfigAttribType = 38;
pub const VAConfigAttribPredictionDirection: VAConfigAttribType = 39;
pub const VAConfigAttribMultipleFrame: VAConfigAttribType = 40;
pub const VAConfigAttribContextPriority: VAConfigAttribType = 41;
pub const VAConfigAttribDecAV1Features: VAConfigAttribType = 42;
pub const VAConfigAttribTEEType: VAConfigAttribType = 43;
pub const VAConfigAttribTEETypeClient: VAConfigAttribType = 44;
pub const VAConfigAttribProtectedContentCipherAlgorithm: VAConfigAttribType = 45;
pub const VAConfigAttribProtectedContentCipherBlockSize: VAConfigAttribType = 46;
pub const VAConfigAttribProtectedContentCipherMode: VAConfigAttribType = 47;
pub const VAConfigAttribProtectedContentCipherSampleType: VAConfigAttribType = 48;
pub const VAConfigAttribProtectedContentUsage: VAConfigAttribType = 49;
pub const VAConfigAttribEncHEVCFeatures: VAConfigAttribType = 50;
pub const VAConfigAttribEncHEVCBlockSizes: VAConfigAttribType = 51;
pub const VAConfigAttribEncAV1: VAConfigAttribType = 52;
pub const VAConfigAttribEncAV1Ext1: VAConfigAttribType = 53;
pub const VAConfigAttribEncAV1Ext2: VAConfigAttribType = 54;
pub const VAConfigAttribEncPerBlockControl: VAConfigAttribType = 55;
pub const VAConfigAttribEncMaxTileRows: VAConfigAttribType = 56;
pub const VAConfigAttribEncMaxTileCols: VAConfigAttribType = 57;
pub const VAConfigAttribTypeMax: VAConfigAttribType = 58;
pub type VAConfigAttribType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttrib {
    pub type_: VAConfigAttribType,
    pub value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttrib"][::std::mem::size_of::<_VAConfigAttrib>() - 8usize];
    ["Alignment of _VAConfigAttrib"][::std::mem::align_of::<_VAConfigAttrib>() - 4usize];
    ["Offset of field: _VAConfigAttrib::type_"]
        [::std::mem::offset_of!(_VAConfigAttrib, type_) - 0usize];
    ["Offset of field: _VAConfigAttrib::value"]
        [::std::mem::offset_of!(_VAConfigAttrib, value) - 4usize];
};
pub type VAConfigAttrib = _VAConfigAttrib;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValDecJPEG {
    pub bits: _VAConfigAttribValDecJPEG__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValDecJPEG__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValDecJPEG__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValDecJPEG__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValDecJPEG__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValDecJPEG__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValDecJPEG__bindgen_ty_1 {
    #[inline]
    pub fn rotation(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_rotation(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn crop(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_crop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rotation: u32,
        crop: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let rotation: u32 = unsafe { ::std::mem::transmute(rotation) };
            rotation as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let crop: u32 = unsafe { ::std::mem::transmute(crop) };
            crop as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValDecJPEG"]
        [::std::mem::size_of::<_VAConfigAttribValDecJPEG>() - 4usize];
    ["Alignment of _VAConfigAttribValDecJPEG"]
        [::std::mem::align_of::<_VAConfigAttribValDecJPEG>() - 4usize];
    ["Offset of field: _VAConfigAttribValDecJPEG::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValDecJPEG, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValDecJPEG::value"]
        [::std::mem::offset_of!(_VAConfigAttribValDecJPEG, value) - 0usize];
};
pub type VAConfigAttribValDecJPEG = _VAConfigAttribValDecJPEG;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValMaxFrameSize {
    pub bits: _VAConfigAttribValMaxFrameSize__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValMaxFrameSize__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValMaxFrameSize__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValMaxFrameSize__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValMaxFrameSize__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValMaxFrameSize__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValMaxFrameSize__bindgen_ty_1 {
    #[inline]
    pub fn max_frame_size(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_max_frame_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn multiple_pass(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multiple_pass(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        max_frame_size: u32,
        multiple_pass: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let max_frame_size: u32 = unsafe { ::std::mem::transmute(max_frame_size) };
            max_frame_size as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let multiple_pass: u32 = unsafe { ::std::mem::transmute(multiple_pass) };
            multiple_pass as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValMaxFrameSize"]
        [::std::mem::size_of::<_VAConfigAttribValMaxFrameSize>() - 4usize];
    ["Alignment of _VAConfigAttribValMaxFrameSize"]
        [::std::mem::align_of::<_VAConfigAttribValMaxFrameSize>() - 4usize];
    ["Offset of field: _VAConfigAttribValMaxFrameSize::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValMaxFrameSize, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValMaxFrameSize::value"]
        [::std::mem::offset_of!(_VAConfigAttribValMaxFrameSize, value) - 0usize];
};
pub type VAConfigAttribValMaxFrameSize = _VAConfigAttribValMaxFrameSize;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValEncJPEG {
    pub bits: _VAConfigAttribValEncJPEG__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValEncJPEG__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncJPEG__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValEncJPEG__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncJPEG__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValEncJPEG__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValEncJPEG__bindgen_ty_1 {
    #[inline]
    pub fn arithmatic_coding_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_arithmatic_coding_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn progressive_dct_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_progressive_dct_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn non_interleaved_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_non_interleaved_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn differential_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_differential_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn max_num_components(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_components(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn max_num_scans(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_scans(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn max_num_huffman_tables(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_huffman_tables(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn max_num_quantization_tables(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_quantization_tables(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        arithmatic_coding_mode: u32,
        progressive_dct_mode: u32,
        non_interleaved_mode: u32,
        differential_mode: u32,
        max_num_components: u32,
        max_num_scans: u32,
        max_num_huffman_tables: u32,
        max_num_quantization_tables: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let arithmatic_coding_mode: u32 =
                unsafe { ::std::mem::transmute(arithmatic_coding_mode) };
            arithmatic_coding_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let progressive_dct_mode: u32 = unsafe { ::std::mem::transmute(progressive_dct_mode) };
            progressive_dct_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let non_interleaved_mode: u32 = unsafe { ::std::mem::transmute(non_interleaved_mode) };
            non_interleaved_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let differential_mode: u32 = unsafe { ::std::mem::transmute(differential_mode) };
            differential_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let max_num_components: u32 = unsafe { ::std::mem::transmute(max_num_components) };
            max_num_components as u64
        });
        __bindgen_bitfield_unit.set(7usize, 4u8, {
            let max_num_scans: u32 = unsafe { ::std::mem::transmute(max_num_scans) };
            max_num_scans as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let max_num_huffman_tables: u32 =
                unsafe { ::std::mem::transmute(max_num_huffman_tables) };
            max_num_huffman_tables as u64
        });
        __bindgen_bitfield_unit.set(14usize, 3u8, {
            let max_num_quantization_tables: u32 =
                unsafe { ::std::mem::transmute(max_num_quantization_tables) };
            max_num_quantization_tables as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncJPEG"]
        [::std::mem::size_of::<_VAConfigAttribValEncJPEG>() - 4usize];
    ["Alignment of _VAConfigAttribValEncJPEG"]
        [::std::mem::align_of::<_VAConfigAttribValEncJPEG>() - 4usize];
    ["Offset of field: _VAConfigAttribValEncJPEG::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValEncJPEG, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValEncJPEG::value"]
        [::std::mem::offset_of!(_VAConfigAttribValEncJPEG, value) - 0usize];
};
pub type VAConfigAttribValEncJPEG = _VAConfigAttribValEncJPEG;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValEncROI {
    pub bits: _VAConfigAttribValEncROI__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValEncROI__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncROI__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValEncROI__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncROI__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValEncROI__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValEncROI__bindgen_ty_1 {
    #[inline]
    pub fn num_roi_regions(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_num_roi_regions(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn roi_rc_priority_support(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_roi_rc_priority_support(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn roi_rc_qp_delta_support(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_roi_rc_qp_delta_support(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        num_roi_regions: u32,
        roi_rc_priority_support: u32,
        roi_rc_qp_delta_support: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let num_roi_regions: u32 = unsafe { ::std::mem::transmute(num_roi_regions) };
            num_roi_regions as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let roi_rc_priority_support: u32 =
                unsafe { ::std::mem::transmute(roi_rc_priority_support) };
            roi_rc_priority_support as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let roi_rc_qp_delta_support: u32 =
                unsafe { ::std::mem::transmute(roi_rc_qp_delta_support) };
            roi_rc_qp_delta_support as u64
        });
        __bindgen_bitfield_unit.set(10usize, 22u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncROI"]
        [::std::mem::size_of::<_VAConfigAttribValEncROI>() - 4usize];
    ["Alignment of _VAConfigAttribValEncROI"]
        [::std::mem::align_of::<_VAConfigAttribValEncROI>() - 4usize];
    ["Offset of field: _VAConfigAttribValEncROI::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValEncROI, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValEncROI::value"]
        [::std::mem::offset_of!(_VAConfigAttribValEncROI, value) - 0usize];
};
pub type VAConfigAttribValEncROI = _VAConfigAttribValEncROI;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValEncRateControlExt {
    pub bits: _VAConfigAttribValEncRateControlExt__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValEncRateControlExt__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncRateControlExt__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValEncRateControlExt__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncRateControlExt__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValEncRateControlExt__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValEncRateControlExt__bindgen_ty_1 {
    #[inline]
    pub fn max_num_temporal_layers_minus1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_temporal_layers_minus1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn temporal_layer_bitrate_control_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_temporal_layer_bitrate_control_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        max_num_temporal_layers_minus1: u32,
        temporal_layer_bitrate_control_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let max_num_temporal_layers_minus1: u32 =
                unsafe { ::std::mem::transmute(max_num_temporal_layers_minus1) };
            max_num_temporal_layers_minus1 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let temporal_layer_bitrate_control_flag: u32 =
                unsafe { ::std::mem::transmute(temporal_layer_bitrate_control_flag) };
            temporal_layer_bitrate_control_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncRateControlExt"]
        [::std::mem::size_of::<_VAConfigAttribValEncRateControlExt>() - 4usize];
    ["Alignment of _VAConfigAttribValEncRateControlExt"]
        [::std::mem::align_of::<_VAConfigAttribValEncRateControlExt>() - 4usize];
    ["Offset of field: _VAConfigAttribValEncRateControlExt::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValEncRateControlExt, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValEncRateControlExt::value"]
        [::std::mem::offset_of!(_VAConfigAttribValEncRateControlExt, value) - 0usize];
};
pub type VAConfigAttribValEncRateControlExt = _VAConfigAttribValEncRateControlExt;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValMultipleFrame {
    pub bits: _VAConfigAttribValMultipleFrame__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValMultipleFrame__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValMultipleFrame__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValMultipleFrame__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValMultipleFrame__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValMultipleFrame__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValMultipleFrame__bindgen_ty_1 {
    #[inline]
    pub fn max_num_concurrent_frames(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_concurrent_frames(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn mixed_quality_level(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mixed_quality_level(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        max_num_concurrent_frames: u32,
        mixed_quality_level: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let max_num_concurrent_frames: u32 =
                unsafe { ::std::mem::transmute(max_num_concurrent_frames) };
            max_num_concurrent_frames as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let mixed_quality_level: u32 = unsafe { ::std::mem::transmute(mixed_quality_level) };
            mixed_quality_level as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValMultipleFrame"]
        [::std::mem::size_of::<_VAConfigAttribValMultipleFrame>() - 4usize];
    ["Alignment of _VAConfigAttribValMultipleFrame"]
        [::std::mem::align_of::<_VAConfigAttribValMultipleFrame>() - 4usize];
    ["Offset of field: _VAConfigAttribValMultipleFrame::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValMultipleFrame, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValMultipleFrame::value"]
        [::std::mem::offset_of!(_VAConfigAttribValMultipleFrame, value) - 0usize];
};
pub type VAConfigAttribValMultipleFrame = _VAConfigAttribValMultipleFrame;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValContextPriority {
    pub bits: _VAConfigAttribValContextPriority__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValContextPriority__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValContextPriority__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValContextPriority__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValContextPriority__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValContextPriority__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValContextPriority__bindgen_ty_1 {
    #[inline]
    pub fn priority(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_priority(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(priority: u32, reserved: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let priority: u32 = unsafe { ::std::mem::transmute(priority) };
            priority as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValContextPriority"]
        [::std::mem::size_of::<_VAConfigAttribValContextPriority>() - 4usize];
    ["Alignment of _VAConfigAttribValContextPriority"]
        [::std::mem::align_of::<_VAConfigAttribValContextPriority>() - 4usize];
    ["Offset of field: _VAConfigAttribValContextPriority::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValContextPriority, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValContextPriority::value"]
        [::std::mem::offset_of!(_VAConfigAttribValContextPriority, value) - 0usize];
};
pub type VAConfigAttribValContextPriority = _VAConfigAttribValContextPriority;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValEncPerBlockControl {
    pub bits: _VAConfigAttribValEncPerBlockControl__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValEncPerBlockControl__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncPerBlockControl__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValEncPerBlockControl__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncPerBlockControl__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValEncPerBlockControl__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValEncPerBlockControl__bindgen_ty_1 {
    #[inline]
    pub fn delta_qp_support(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_qp_support(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_delta_qp_block_size(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_log2_delta_qp_block_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_qp_size_in_bytes(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_delta_qp_size_in_bytes(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        delta_qp_support: u32,
        log2_delta_qp_block_size: u32,
        delta_qp_size_in_bytes: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let delta_qp_support: u32 = unsafe { ::std::mem::transmute(delta_qp_support) };
            delta_qp_support as u64
        });
        __bindgen_bitfield_unit.set(1usize, 4u8, {
            let log2_delta_qp_block_size: u32 =
                unsafe { ::std::mem::transmute(log2_delta_qp_block_size) };
            log2_delta_qp_block_size as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let delta_qp_size_in_bytes: u32 =
                unsafe { ::std::mem::transmute(delta_qp_size_in_bytes) };
            delta_qp_size_in_bytes as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncPerBlockControl"]
        [::std::mem::size_of::<_VAConfigAttribValEncPerBlockControl>() - 4usize];
    ["Alignment of _VAConfigAttribValEncPerBlockControl"]
        [::std::mem::align_of::<_VAConfigAttribValEncPerBlockControl>() - 4usize];
    ["Offset of field: _VAConfigAttribValEncPerBlockControl::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValEncPerBlockControl, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValEncPerBlockControl::value"]
        [::std::mem::offset_of!(_VAConfigAttribValEncPerBlockControl, value) - 0usize];
};
pub type VAConfigAttribValEncPerBlockControl = _VAConfigAttribValEncPerBlockControl;
pub type VAGenericID = ::std::os::raw::c_uint;
pub type VAConfigID = VAGenericID;
pub type VAContextID = VAGenericID;
pub type VASurfaceID = VAGenericID;
pub const VAGenericValueTypeInteger: VAGenericValueType = 1;
pub const VAGenericValueTypeFloat: VAGenericValueType = 2;
pub const VAGenericValueTypePointer: VAGenericValueType = 3;
pub const VAGenericValueTypeFunc: VAGenericValueType = 4;
pub type VAGenericValueType = ::std::os::raw::c_uint;
pub type VAGenericFunc = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAGenericValue {
    pub type_: VAGenericValueType,
    pub value: _VAGenericValue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAGenericValue__bindgen_ty_1 {
    pub i: i32,
    pub f: f32,
    pub p: *mut ::std::os::raw::c_void,
    pub fn_: VAGenericFunc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAGenericValue__bindgen_ty_1"]
        [::std::mem::size_of::<_VAGenericValue__bindgen_ty_1>() - 8usize];
    ["Alignment of _VAGenericValue__bindgen_ty_1"]
        [::std::mem::align_of::<_VAGenericValue__bindgen_ty_1>() - 8usize];
    ["Offset of field: _VAGenericValue__bindgen_ty_1::i"]
        [::std::mem::offset_of!(_VAGenericValue__bindgen_ty_1, i) - 0usize];
    ["Offset of field: _VAGenericValue__bindgen_ty_1::f"]
        [::std::mem::offset_of!(_VAGenericValue__bindgen_ty_1, f) - 0usize];
    ["Offset of field: _VAGenericValue__bindgen_ty_1::p"]
        [::std::mem::offset_of!(_VAGenericValue__bindgen_ty_1, p) - 0usize];
    ["Offset of field: _VAGenericValue__bindgen_ty_1::fn_"]
        [::std::mem::offset_of!(_VAGenericValue__bindgen_ty_1, fn_) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAGenericValue"][::std::mem::size_of::<_VAGenericValue>() - 16usize];
    ["Alignment of _VAGenericValue"][::std::mem::align_of::<_VAGenericValue>() - 8usize];
    ["Offset of field: _VAGenericValue::type_"]
        [::std::mem::offset_of!(_VAGenericValue, type_) - 0usize];
    ["Offset of field: _VAGenericValue::value"]
        [::std::mem::offset_of!(_VAGenericValue, value) - 8usize];
};
pub type VAGenericValue = _VAGenericValue;
pub const VASurfaceAttribNone: VASurfaceAttribType = 0;
pub const VASurfaceAttribPixelFormat: VASurfaceAttribType = 1;
pub const VASurfaceAttribMinWidth: VASurfaceAttribType = 2;
pub const VASurfaceAttribMaxWidth: VASurfaceAttribType = 3;
pub const VASurfaceAttribMinHeight: VASurfaceAttribType = 4;
pub const VASurfaceAttribMaxHeight: VASurfaceAttribType = 5;
pub const VASurfaceAttribMemoryType: VASurfaceAttribType = 6;
pub const VASurfaceAttribExternalBufferDescriptor: VASurfaceAttribType = 7;
pub const VASurfaceAttribUsageHint: VASurfaceAttribType = 8;
pub const VASurfaceAttribDRMFormatModifiers: VASurfaceAttribType = 9;
pub const VASurfaceAttribAlignmentSize: VASurfaceAttribType = 10;
pub const VASurfaceAttribCount: VASurfaceAttribType = 11;
pub type VASurfaceAttribType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASurfaceAttrib {
    pub type_: VASurfaceAttribType,
    pub flags: u32,
    pub value: VAGenericValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASurfaceAttrib"][::std::mem::size_of::<_VASurfaceAttrib>() - 24usize];
    ["Alignment of _VASurfaceAttrib"][::std::mem::align_of::<_VASurfaceAttrib>() - 8usize];
    ["Offset of field: _VASurfaceAttrib::type_"]
        [::std::mem::offset_of!(_VASurfaceAttrib, type_) - 0usize];
    ["Offset of field: _VASurfaceAttrib::flags"]
        [::std::mem::offset_of!(_VASurfaceAttrib, flags) - 4usize];
    ["Offset of field: _VASurfaceAttrib::value"]
        [::std::mem::offset_of!(_VASurfaceAttrib, value) - 8usize];
};
pub type VASurfaceAttrib = _VASurfaceAttrib;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VASurfaceAttribAlignmentStruct {
    pub bits: _VASurfaceAttribAlignmentStruct__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASurfaceAttribAlignmentStruct__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASurfaceAttribAlignmentStruct__bindgen_ty_1"]
        [::std::mem::size_of::<_VASurfaceAttribAlignmentStruct__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASurfaceAttribAlignmentStruct__bindgen_ty_1"]
        [::std::mem::align_of::<_VASurfaceAttribAlignmentStruct__bindgen_ty_1>() - 4usize];
};
impl _VASurfaceAttribAlignmentStruct__bindgen_ty_1 {
    #[inline]
    pub fn log2_width_alignment(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_log2_width_alignment(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_height_alignment(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_log2_height_alignment(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        log2_width_alignment: u32,
        log2_height_alignment: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let log2_width_alignment: u32 = unsafe { ::std::mem::transmute(log2_width_alignment) };
            log2_width_alignment as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let log2_height_alignment: u32 =
                unsafe { ::std::mem::transmute(log2_height_alignment) };
            log2_height_alignment as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASurfaceAttribAlignmentStruct"]
        [::std::mem::size_of::<_VASurfaceAttribAlignmentStruct>() - 4usize];
    ["Alignment of _VASurfaceAttribAlignmentStruct"]
        [::std::mem::align_of::<_VASurfaceAttribAlignmentStruct>() - 4usize];
    ["Offset of field: _VASurfaceAttribAlignmentStruct::bits"]
        [::std::mem::offset_of!(_VASurfaceAttribAlignmentStruct, bits) - 0usize];
    ["Offset of field: _VASurfaceAttribAlignmentStruct::value"]
        [::std::mem::offset_of!(_VASurfaceAttribAlignmentStruct, value) - 0usize];
};
pub type VASurfaceAttribAlignmentStruct = _VASurfaceAttribAlignmentStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASurfaceAttribExternalBuffers {
    pub pixel_format: u32,
    pub width: u32,
    pub height: u32,
    pub data_size: u32,
    pub num_planes: u32,
    pub pitches: [u32; 4usize],
    pub offsets: [u32; 4usize],
    pub buffers: *mut usize,
    pub num_buffers: u32,
    pub flags: u32,
    pub private_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASurfaceAttribExternalBuffers"]
        [::std::mem::size_of::<_VASurfaceAttribExternalBuffers>() - 80usize];
    ["Alignment of _VASurfaceAttribExternalBuffers"]
        [::std::mem::align_of::<_VASurfaceAttribExternalBuffers>() - 8usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::pixel_format"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, pixel_format) - 0usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::width"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, width) - 4usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::height"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, height) - 8usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::data_size"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, data_size) - 12usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::num_planes"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, num_planes) - 16usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::pitches"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, pitches) - 20usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::offsets"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, offsets) - 36usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::buffers"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, buffers) - 56usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::num_buffers"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, num_buffers) - 64usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::flags"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, flags) - 68usize];
    ["Offset of field: _VASurfaceAttribExternalBuffers::private_data"]
        [::std::mem::offset_of!(_VASurfaceAttribExternalBuffers, private_data) - 72usize];
};
pub type VASurfaceAttribExternalBuffers = _VASurfaceAttribExternalBuffers;
pub type VAMFContextID = VAGenericID;
pub type VABufferID = VAGenericID;
pub const VAPictureParameterBufferType: VABufferType = 0;
pub const VAIQMatrixBufferType: VABufferType = 1;
pub const VABitPlaneBufferType: VABufferType = 2;
pub const VASliceGroupMapBufferType: VABufferType = 3;
pub const VASliceParameterBufferType: VABufferType = 4;
pub const VASliceDataBufferType: VABufferType = 5;
pub const VAMacroblockParameterBufferType: VABufferType = 6;
pub const VAResidualDataBufferType: VABufferType = 7;
pub const VADeblockingParameterBufferType: VABufferType = 8;
pub const VAImageBufferType: VABufferType = 9;
pub const VAProtectedSliceDataBufferType: VABufferType = 10;
pub const VAQMatrixBufferType: VABufferType = 11;
pub const VAHuffmanTableBufferType: VABufferType = 12;
pub const VAProbabilityBufferType: VABufferType = 13;
pub const VAEncCodedBufferType: VABufferType = 21;
pub const VAEncSequenceParameterBufferType: VABufferType = 22;
pub const VAEncPictureParameterBufferType: VABufferType = 23;
pub const VAEncSliceParameterBufferType: VABufferType = 24;
pub const VAEncPackedHeaderParameterBufferType: VABufferType = 25;
pub const VAEncPackedHeaderDataBufferType: VABufferType = 26;
pub const VAEncMiscParameterBufferType: VABufferType = 27;
pub const VAEncMacroblockParameterBufferType: VABufferType = 28;
pub const VAEncMacroblockMapBufferType: VABufferType = 29;
pub const VAEncQPBufferType: VABufferType = 30;
pub const VAProcPipelineParameterBufferType: VABufferType = 41;
pub const VAProcFilterParameterBufferType: VABufferType = 42;
pub const VAEncFEIMVBufferType: VABufferType = 43;
pub const VAEncFEIMBCodeBufferType: VABufferType = 44;
pub const VAEncFEIDistortionBufferType: VABufferType = 45;
pub const VAEncFEIMBControlBufferType: VABufferType = 46;
pub const VAEncFEIMVPredictorBufferType: VABufferType = 47;
pub const VAStatsStatisticsParameterBufferType: VABufferType = 48;
pub const VAStatsStatisticsBufferType: VABufferType = 49;
pub const VAStatsStatisticsBottomFieldBufferType: VABufferType = 50;
pub const VAStatsMVBufferType: VABufferType = 51;
pub const VAStatsMVPredictorBufferType: VABufferType = 52;
pub const VAEncMacroblockDisableSkipMapBufferType: VABufferType = 53;
pub const VAEncFEICTBCmdBufferType: VABufferType = 54;
pub const VAEncFEICURecordBufferType: VABufferType = 55;
pub const VADecodeStreamoutBufferType: VABufferType = 56;
pub const VASubsetsParameterBufferType: VABufferType = 57;
pub const VAContextParameterUpdateBufferType: VABufferType = 58;
pub const VAProtectedSessionExecuteBufferType: VABufferType = 59;
pub const VAEncryptionParameterBufferType: VABufferType = 60;
pub const VAEncDeltaQpPerBlockBufferType: VABufferType = 61;
pub const VAAlfBufferType: VABufferType = 62;
pub const VALmcsBufferType: VABufferType = 63;
pub const VASubPicBufferType: VABufferType = 64;
pub const VATileBufferType: VABufferType = 65;
pub const VASliceStructBufferType: VABufferType = 66;
pub const VABufferTypeMax: VABufferType = 67;
pub type VABufferType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAContextParameterUpdateBuffer {
    pub flags: _VAContextParameterUpdateBuffer__bindgen_ty_1,
    pub context_priority: VAConfigAttribValContextPriority,
    pub reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAContextParameterUpdateBuffer__bindgen_ty_1 {
    pub bits: _VAContextParameterUpdateBuffer__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAContextParameterUpdateBuffer__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAContextParameterUpdateBuffer__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAContextParameterUpdateBuffer__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAContextParameterUpdateBuffer__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAContextParameterUpdateBuffer__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAContextParameterUpdateBuffer__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn context_priority_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_context_priority_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        context_priority_update: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let context_priority_update: u32 =
                unsafe { ::std::mem::transmute(context_priority_update) };
            context_priority_update as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAContextParameterUpdateBuffer__bindgen_ty_1"]
        [::std::mem::size_of::<_VAContextParameterUpdateBuffer__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAContextParameterUpdateBuffer__bindgen_ty_1"]
        [::std::mem::align_of::<_VAContextParameterUpdateBuffer__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAContextParameterUpdateBuffer__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAContextParameterUpdateBuffer__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAContextParameterUpdateBuffer__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAContextParameterUpdateBuffer__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAContextParameterUpdateBuffer"]
        [::std::mem::size_of::<_VAContextParameterUpdateBuffer>() - 40usize];
    ["Alignment of _VAContextParameterUpdateBuffer"]
        [::std::mem::align_of::<_VAContextParameterUpdateBuffer>() - 4usize];
    ["Offset of field: _VAContextParameterUpdateBuffer::flags"]
        [::std::mem::offset_of!(_VAContextParameterUpdateBuffer, flags) - 0usize];
    ["Offset of field: _VAContextParameterUpdateBuffer::context_priority"]
        [::std::mem::offset_of!(_VAContextParameterUpdateBuffer, context_priority) - 4usize];
    ["Offset of field: _VAContextParameterUpdateBuffer::reserved"]
        [::std::mem::offset_of!(_VAContextParameterUpdateBuffer, reserved) - 8usize];
};
pub type VAContextParameterUpdateBuffer = _VAContextParameterUpdateBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncryptionSegmentInfo {
    pub segment_start_offset: u32,
    pub segment_length: u32,
    pub partial_aes_block_size: u32,
    pub init_byte_length: u32,
    pub aes_cbc_iv_or_ctr: [u8; 64usize],
    pub va_reserved: [u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncryptionSegmentInfo"]
        [::std::mem::size_of::<_VAEncryptionSegmentInfo>() - 112usize];
    ["Alignment of _VAEncryptionSegmentInfo"]
        [::std::mem::align_of::<_VAEncryptionSegmentInfo>() - 4usize];
    ["Offset of field: _VAEncryptionSegmentInfo::segment_start_offset"]
        [::std::mem::offset_of!(_VAEncryptionSegmentInfo, segment_start_offset) - 0usize];
    ["Offset of field: _VAEncryptionSegmentInfo::segment_length"]
        [::std::mem::offset_of!(_VAEncryptionSegmentInfo, segment_length) - 4usize];
    ["Offset of field: _VAEncryptionSegmentInfo::partial_aes_block_size"]
        [::std::mem::offset_of!(_VAEncryptionSegmentInfo, partial_aes_block_size) - 8usize];
    ["Offset of field: _VAEncryptionSegmentInfo::init_byte_length"]
        [::std::mem::offset_of!(_VAEncryptionSegmentInfo, init_byte_length) - 12usize];
    ["Offset of field: _VAEncryptionSegmentInfo::aes_cbc_iv_or_ctr"]
        [::std::mem::offset_of!(_VAEncryptionSegmentInfo, aes_cbc_iv_or_ctr) - 16usize];
    ["Offset of field: _VAEncryptionSegmentInfo::va_reserved"]
        [::std::mem::offset_of!(_VAEncryptionSegmentInfo, va_reserved) - 80usize];
};
pub type VAEncryptionSegmentInfo = _VAEncryptionSegmentInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncryptionParameters {
    pub encryption_type: u32,
    pub num_segments: u32,
    pub segment_info: *mut VAEncryptionSegmentInfo,
    pub status_report_index: u32,
    pub size_of_length: u32,
    pub wrapped_decrypt_blob: [u8; 64usize],
    pub wrapped_encrypt_blob: [u8; 64usize],
    pub key_blob_size: u32,
    pub blocks_stripe_encrypted: u32,
    pub blocks_stripe_clear: u32,
    pub va_reserved: [u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncryptionParameters"]
        [::std::mem::size_of::<_VAEncryptionParameters>() - 200usize];
    ["Alignment of _VAEncryptionParameters"]
        [::std::mem::align_of::<_VAEncryptionParameters>() - 8usize];
    ["Offset of field: _VAEncryptionParameters::encryption_type"]
        [::std::mem::offset_of!(_VAEncryptionParameters, encryption_type) - 0usize];
    ["Offset of field: _VAEncryptionParameters::num_segments"]
        [::std::mem::offset_of!(_VAEncryptionParameters, num_segments) - 4usize];
    ["Offset of field: _VAEncryptionParameters::segment_info"]
        [::std::mem::offset_of!(_VAEncryptionParameters, segment_info) - 8usize];
    ["Offset of field: _VAEncryptionParameters::status_report_index"]
        [::std::mem::offset_of!(_VAEncryptionParameters, status_report_index) - 16usize];
    ["Offset of field: _VAEncryptionParameters::size_of_length"]
        [::std::mem::offset_of!(_VAEncryptionParameters, size_of_length) - 20usize];
    ["Offset of field: _VAEncryptionParameters::wrapped_decrypt_blob"]
        [::std::mem::offset_of!(_VAEncryptionParameters, wrapped_decrypt_blob) - 24usize];
    ["Offset of field: _VAEncryptionParameters::wrapped_encrypt_blob"]
        [::std::mem::offset_of!(_VAEncryptionParameters, wrapped_encrypt_blob) - 88usize];
    ["Offset of field: _VAEncryptionParameters::key_blob_size"]
        [::std::mem::offset_of!(_VAEncryptionParameters, key_blob_size) - 152usize];
    ["Offset of field: _VAEncryptionParameters::blocks_stripe_encrypted"]
        [::std::mem::offset_of!(_VAEncryptionParameters, blocks_stripe_encrypted) - 156usize];
    ["Offset of field: _VAEncryptionParameters::blocks_stripe_clear"]
        [::std::mem::offset_of!(_VAEncryptionParameters, blocks_stripe_clear) - 160usize];
    ["Offset of field: _VAEncryptionParameters::va_reserved"]
        [::std::mem::offset_of!(_VAEncryptionParameters, va_reserved) - 164usize];
};
pub type VAEncryptionParameters = _VAEncryptionParameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcessingRateParameterEnc {
    pub level_idc: u8,
    pub reserved: [u8; 3usize],
    pub quality_level: u32,
    pub intra_period: u32,
    pub ip_period: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcessingRateParameterEnc"]
        [::std::mem::size_of::<_VAProcessingRateParameterEnc>() - 16usize];
    ["Alignment of _VAProcessingRateParameterEnc"]
        [::std::mem::align_of::<_VAProcessingRateParameterEnc>() - 4usize];
    ["Offset of field: _VAProcessingRateParameterEnc::level_idc"]
        [::std::mem::offset_of!(_VAProcessingRateParameterEnc, level_idc) - 0usize];
    ["Offset of field: _VAProcessingRateParameterEnc::reserved"]
        [::std::mem::offset_of!(_VAProcessingRateParameterEnc, reserved) - 1usize];
    ["Offset of field: _VAProcessingRateParameterEnc::quality_level"]
        [::std::mem::offset_of!(_VAProcessingRateParameterEnc, quality_level) - 4usize];
    ["Offset of field: _VAProcessingRateParameterEnc::intra_period"]
        [::std::mem::offset_of!(_VAProcessingRateParameterEnc, intra_period) - 8usize];
    ["Offset of field: _VAProcessingRateParameterEnc::ip_period"]
        [::std::mem::offset_of!(_VAProcessingRateParameterEnc, ip_period) - 12usize];
};
pub type VAProcessingRateParameterEnc = _VAProcessingRateParameterEnc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcessingRateParameterDec {
    pub level_idc: u8,
    pub reserved0: [u8; 3usize],
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcessingRateParameterDec"]
        [::std::mem::size_of::<_VAProcessingRateParameterDec>() - 8usize];
    ["Alignment of _VAProcessingRateParameterDec"]
        [::std::mem::align_of::<_VAProcessingRateParameterDec>() - 4usize];
    ["Offset of field: _VAProcessingRateParameterDec::level_idc"]
        [::std::mem::offset_of!(_VAProcessingRateParameterDec, level_idc) - 0usize];
    ["Offset of field: _VAProcessingRateParameterDec::reserved0"]
        [::std::mem::offset_of!(_VAProcessingRateParameterDec, reserved0) - 1usize];
    ["Offset of field: _VAProcessingRateParameterDec::reserved"]
        [::std::mem::offset_of!(_VAProcessingRateParameterDec, reserved) - 4usize];
};
pub type VAProcessingRateParameterDec = _VAProcessingRateParameterDec;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAProcessingRateParameter {
    pub __bindgen_anon_1: _VAProcessingRateParameter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAProcessingRateParameter__bindgen_ty_1 {
    pub proc_buf_enc: VAProcessingRateParameterEnc,
    pub proc_buf_dec: VAProcessingRateParameterDec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcessingRateParameter__bindgen_ty_1"]
        [::std::mem::size_of::<_VAProcessingRateParameter__bindgen_ty_1>() - 16usize];
    ["Alignment of _VAProcessingRateParameter__bindgen_ty_1"]
        [::std::mem::align_of::<_VAProcessingRateParameter__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAProcessingRateParameter__bindgen_ty_1::proc_buf_enc"]
        [::std::mem::offset_of!(_VAProcessingRateParameter__bindgen_ty_1, proc_buf_enc) - 0usize];
    ["Offset of field: _VAProcessingRateParameter__bindgen_ty_1::proc_buf_dec"]
        [::std::mem::offset_of!(_VAProcessingRateParameter__bindgen_ty_1, proc_buf_dec) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcessingRateParameter"]
        [::std::mem::size_of::<_VAProcessingRateParameter>() - 16usize];
    ["Alignment of _VAProcessingRateParameter"]
        [::std::mem::align_of::<_VAProcessingRateParameter>() - 4usize];
};
pub type VAProcessingRateParameter = _VAProcessingRateParameter;
pub const VAEncMiscParameterTypeFrameRate: VAEncMiscParameterType = 0;
pub const VAEncMiscParameterTypeRateControl: VAEncMiscParameterType = 1;
pub const VAEncMiscParameterTypeMaxSliceSize: VAEncMiscParameterType = 2;
pub const VAEncMiscParameterTypeAIR: VAEncMiscParameterType = 3;
pub const VAEncMiscParameterTypeMaxFrameSize: VAEncMiscParameterType = 4;
pub const VAEncMiscParameterTypeHRD: VAEncMiscParameterType = 5;
pub const VAEncMiscParameterTypeQualityLevel: VAEncMiscParameterType = 6;
pub const VAEncMiscParameterTypeRIR: VAEncMiscParameterType = 7;
pub const VAEncMiscParameterTypeQuantization: VAEncMiscParameterType = 8;
pub const VAEncMiscParameterTypeSkipFrame: VAEncMiscParameterType = 9;
pub const VAEncMiscParameterTypeROI: VAEncMiscParameterType = 10;
pub const VAEncMiscParameterTypeMultiPassFrameSize: VAEncMiscParameterType = 11;
pub const VAEncMiscParameterTypeTemporalLayerStructure: VAEncMiscParameterType = 12;
pub const VAEncMiscParameterTypeDirtyRect: VAEncMiscParameterType = 13;
pub const VAEncMiscParameterTypeParallelBRC: VAEncMiscParameterType = 14;
pub const VAEncMiscParameterTypeSubMbPartPel: VAEncMiscParameterType = 15;
pub const VAEncMiscParameterTypeEncQuality: VAEncMiscParameterType = 16;
pub const VAEncMiscParameterTypeCustomRoundingControl: VAEncMiscParameterType = 17;
pub const VAEncMiscParameterTypeFEIFrameControl: VAEncMiscParameterType = 18;
pub const VAEncMiscParameterTypeExtensionData: VAEncMiscParameterType = 19;
pub type VAEncMiscParameterType = ::std::os::raw::c_uint;
pub const VAEncPackedHeaderSequence: VAEncPackedHeaderType = 1;
pub const VAEncPackedHeaderPicture: VAEncPackedHeaderType = 2;
pub const VAEncPackedHeaderSlice: VAEncPackedHeaderType = 3;
pub const VAEncPackedHeaderRawData: VAEncPackedHeaderType = 4;
pub const VAEncPackedHeaderMiscMask: VAEncPackedHeaderType = 2147483648;
pub type VAEncPackedHeaderType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPackedHeaderParameterBuffer {
    pub type_: u32,
    pub bit_length: u32,
    pub has_emulation_bytes: u8,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPackedHeaderParameterBuffer"]
        [::std::mem::size_of::<_VAEncPackedHeaderParameterBuffer>() - 28usize];
    ["Alignment of _VAEncPackedHeaderParameterBuffer"]
        [::std::mem::align_of::<_VAEncPackedHeaderParameterBuffer>() - 4usize];
    ["Offset of field: _VAEncPackedHeaderParameterBuffer::type_"]
        [::std::mem::offset_of!(_VAEncPackedHeaderParameterBuffer, type_) - 0usize];
    ["Offset of field: _VAEncPackedHeaderParameterBuffer::bit_length"]
        [::std::mem::offset_of!(_VAEncPackedHeaderParameterBuffer, bit_length) - 4usize];
    ["Offset of field: _VAEncPackedHeaderParameterBuffer::has_emulation_bytes"]
        [::std::mem::offset_of!(_VAEncPackedHeaderParameterBuffer, has_emulation_bytes) - 8usize];
    ["Offset of field: _VAEncPackedHeaderParameterBuffer::va_reserved"]
        [::std::mem::offset_of!(_VAEncPackedHeaderParameterBuffer, va_reserved) - 12usize];
};
pub type VAEncPackedHeaderParameterBuffer = _VAEncPackedHeaderParameterBuffer;
#[repr(C)]
#[derive(Debug)]
pub struct _VAEncMiscParameterBuffer {
    pub type_: VAEncMiscParameterType,
    pub data: __IncompleteArrayField<u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBuffer"]
        [::std::mem::size_of::<_VAEncMiscParameterBuffer>() - 4usize];
    ["Alignment of _VAEncMiscParameterBuffer"]
        [::std::mem::align_of::<_VAEncMiscParameterBuffer>() - 4usize];
    ["Offset of field: _VAEncMiscParameterBuffer::type_"]
        [::std::mem::offset_of!(_VAEncMiscParameterBuffer, type_) - 0usize];
    ["Offset of field: _VAEncMiscParameterBuffer::data"]
        [::std::mem::offset_of!(_VAEncMiscParameterBuffer, data) - 4usize];
};
pub type VAEncMiscParameterBuffer = _VAEncMiscParameterBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterTemporalLayerStructure {
    pub number_of_layers: u32,
    pub periodicity: u32,
    pub layer_id: [u32; 32usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterTemporalLayerStructure"]
        [::std::mem::size_of::<_VAEncMiscParameterTemporalLayerStructure>() - 152usize];
    ["Alignment of _VAEncMiscParameterTemporalLayerStructure"]
        [::std::mem::align_of::<_VAEncMiscParameterTemporalLayerStructure>() - 4usize];
    ["Offset of field: _VAEncMiscParameterTemporalLayerStructure::number_of_layers"][::std::mem::offset_of!(
        _VAEncMiscParameterTemporalLayerStructure,
        number_of_layers
    ) - 0usize];
    ["Offset of field: _VAEncMiscParameterTemporalLayerStructure::periodicity"]
        [::std::mem::offset_of!(_VAEncMiscParameterTemporalLayerStructure, periodicity) - 4usize];
    ["Offset of field: _VAEncMiscParameterTemporalLayerStructure::layer_id"]
        [::std::mem::offset_of!(_VAEncMiscParameterTemporalLayerStructure, layer_id) - 8usize];
    ["Offset of field: _VAEncMiscParameterTemporalLayerStructure::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterTemporalLayerStructure, va_reserved) - 136usize];
};
pub type VAEncMiscParameterTemporalLayerStructure = _VAEncMiscParameterTemporalLayerStructure;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterRateControl {
    pub bits_per_second: u32,
    pub target_percentage: u32,
    pub window_size: u32,
    pub initial_qp: u32,
    pub min_qp: u32,
    pub basic_unit_size: u32,
    pub rc_flags: _VAEncMiscParameterRateControl__bindgen_ty_1,
    pub ICQ_quality_factor: u32,
    pub max_qp: u32,
    pub quality_factor: u32,
    pub target_frame_size: u32,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterRateControl__bindgen_ty_1 {
    pub bits: _VAEncMiscParameterRateControl__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterRateControl__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterRateControl__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncMiscParameterRateControl__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncMiscParameterRateControl__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAEncMiscParameterRateControl__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAEncMiscParameterRateControl__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn reset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_frame_skip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_skip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_bit_stuffing(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_bit_stuffing(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_rate_control(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_mb_rate_control(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn temporal_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_temporal_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn cfs_I_frames(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cfs_I_frames(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_parallel_brc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_parallel_brc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_dynamic_scaling(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_dynamic_scaling(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_tolerance_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_tolerance_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reset: u32,
        disable_frame_skip: u32,
        disable_bit_stuffing: u32,
        mb_rate_control: u32,
        temporal_id: u32,
        cfs_I_frames: u32,
        enable_parallel_brc: u32,
        enable_dynamic_scaling: u32,
        frame_tolerance_mode: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let reset: u32 = unsafe { ::std::mem::transmute(reset) };
            reset as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disable_frame_skip: u32 = unsafe { ::std::mem::transmute(disable_frame_skip) };
            disable_frame_skip as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let disable_bit_stuffing: u32 = unsafe { ::std::mem::transmute(disable_bit_stuffing) };
            disable_bit_stuffing as u64
        });
        __bindgen_bitfield_unit.set(3usize, 4u8, {
            let mb_rate_control: u32 = unsafe { ::std::mem::transmute(mb_rate_control) };
            mb_rate_control as u64
        });
        __bindgen_bitfield_unit.set(7usize, 8u8, {
            let temporal_id: u32 = unsafe { ::std::mem::transmute(temporal_id) };
            temporal_id as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let cfs_I_frames: u32 = unsafe { ::std::mem::transmute(cfs_I_frames) };
            cfs_I_frames as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let enable_parallel_brc: u32 = unsafe { ::std::mem::transmute(enable_parallel_brc) };
            enable_parallel_brc as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let enable_dynamic_scaling: u32 =
                unsafe { ::std::mem::transmute(enable_dynamic_scaling) };
            enable_dynamic_scaling as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let frame_tolerance_mode: u32 = unsafe { ::std::mem::transmute(frame_tolerance_mode) };
            frame_tolerance_mode as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterRateControl__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterRateControl__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterRateControl__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterRateControl__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterRateControl__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncMiscParameterRateControl__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterRateControl"]
        [::std::mem::size_of::<_VAEncMiscParameterRateControl>() - 60usize];
    ["Alignment of _VAEncMiscParameterRateControl"]
        [::std::mem::align_of::<_VAEncMiscParameterRateControl>() - 4usize];
    ["Offset of field: _VAEncMiscParameterRateControl::bits_per_second"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, bits_per_second) - 0usize];
    ["Offset of field: _VAEncMiscParameterRateControl::target_percentage"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, target_percentage) - 4usize];
    ["Offset of field: _VAEncMiscParameterRateControl::window_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, window_size) - 8usize];
    ["Offset of field: _VAEncMiscParameterRateControl::initial_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, initial_qp) - 12usize];
    ["Offset of field: _VAEncMiscParameterRateControl::min_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, min_qp) - 16usize];
    ["Offset of field: _VAEncMiscParameterRateControl::basic_unit_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, basic_unit_size) - 20usize];
    ["Offset of field: _VAEncMiscParameterRateControl::rc_flags"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, rc_flags) - 24usize];
    ["Offset of field: _VAEncMiscParameterRateControl::ICQ_quality_factor"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, ICQ_quality_factor) - 28usize];
    ["Offset of field: _VAEncMiscParameterRateControl::max_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, max_qp) - 32usize];
    ["Offset of field: _VAEncMiscParameterRateControl::quality_factor"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, quality_factor) - 36usize];
    ["Offset of field: _VAEncMiscParameterRateControl::target_frame_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, target_frame_size) - 40usize];
    ["Offset of field: _VAEncMiscParameterRateControl::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterRateControl, va_reserved) - 44usize];
};
pub type VAEncMiscParameterRateControl = _VAEncMiscParameterRateControl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterFrameRate {
    pub framerate: u32,
    pub framerate_flags: _VAEncMiscParameterFrameRate__bindgen_ty_1,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterFrameRate__bindgen_ty_1 {
    pub bits: _VAEncMiscParameterFrameRate__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterFrameRate__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterFrameRate__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncMiscParameterFrameRate__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncMiscParameterFrameRate__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAEncMiscParameterFrameRate__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAEncMiscParameterFrameRate__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn temporal_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_temporal_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(temporal_id: u32, reserved: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let temporal_id: u32 = unsafe { ::std::mem::transmute(temporal_id) };
            temporal_id as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterFrameRate__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterFrameRate__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterFrameRate__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterFrameRate__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterFrameRate__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncMiscParameterFrameRate__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncMiscParameterFrameRate__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncMiscParameterFrameRate__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterFrameRate"]
        [::std::mem::size_of::<_VAEncMiscParameterFrameRate>() - 24usize];
    ["Alignment of _VAEncMiscParameterFrameRate"]
        [::std::mem::align_of::<_VAEncMiscParameterFrameRate>() - 4usize];
    ["Offset of field: _VAEncMiscParameterFrameRate::framerate"]
        [::std::mem::offset_of!(_VAEncMiscParameterFrameRate, framerate) - 0usize];
    ["Offset of field: _VAEncMiscParameterFrameRate::framerate_flags"]
        [::std::mem::offset_of!(_VAEncMiscParameterFrameRate, framerate_flags) - 4usize];
    ["Offset of field: _VAEncMiscParameterFrameRate::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterFrameRate, va_reserved) - 8usize];
};
pub type VAEncMiscParameterFrameRate = _VAEncMiscParameterFrameRate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterMaxSliceSize {
    pub max_slice_size: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterMaxSliceSize"]
        [::std::mem::size_of::<_VAEncMiscParameterMaxSliceSize>() - 20usize];
    ["Alignment of _VAEncMiscParameterMaxSliceSize"]
        [::std::mem::align_of::<_VAEncMiscParameterMaxSliceSize>() - 4usize];
    ["Offset of field: _VAEncMiscParameterMaxSliceSize::max_slice_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterMaxSliceSize, max_slice_size) - 0usize];
    ["Offset of field: _VAEncMiscParameterMaxSliceSize::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterMaxSliceSize, va_reserved) - 4usize];
};
pub type VAEncMiscParameterMaxSliceSize = _VAEncMiscParameterMaxSliceSize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterAIR {
    pub air_num_mbs: u32,
    pub air_threshold: u32,
    pub air_auto: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterAIR"][::std::mem::size_of::<_VAEncMiscParameterAIR>() - 28usize];
    ["Alignment of _VAEncMiscParameterAIR"]
        [::std::mem::align_of::<_VAEncMiscParameterAIR>() - 4usize];
    ["Offset of field: _VAEncMiscParameterAIR::air_num_mbs"]
        [::std::mem::offset_of!(_VAEncMiscParameterAIR, air_num_mbs) - 0usize];
    ["Offset of field: _VAEncMiscParameterAIR::air_threshold"]
        [::std::mem::offset_of!(_VAEncMiscParameterAIR, air_threshold) - 4usize];
    ["Offset of field: _VAEncMiscParameterAIR::air_auto"]
        [::std::mem::offset_of!(_VAEncMiscParameterAIR, air_auto) - 8usize];
    ["Offset of field: _VAEncMiscParameterAIR::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterAIR, va_reserved) - 12usize];
};
pub type VAEncMiscParameterAIR = _VAEncMiscParameterAIR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterRIR {
    pub rir_flags: _VAEncMiscParameterRIR__bindgen_ty_1,
    pub intra_insertion_location: u16,
    pub intra_insert_size: u16,
    pub qp_delta_for_inserted_intra: u8,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterRIR__bindgen_ty_1 {
    pub bits: _VAEncMiscParameterRIR__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterRIR__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterRIR__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterRIR__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterRIR__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterRIR__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _VAEncMiscParameterRIR__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn enable_rir_column(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_rir_column(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_rir_row(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_rir_row(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enable_rir_column: u32,
        enable_rir_row: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enable_rir_column: u32 = unsafe { ::std::mem::transmute(enable_rir_column) };
            enable_rir_column as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let enable_rir_row: u32 = unsafe { ::std::mem::transmute(enable_rir_row) };
            enable_rir_row as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterRIR__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterRIR__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterRIR__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterRIR__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterRIR__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncMiscParameterRIR__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncMiscParameterRIR__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncMiscParameterRIR__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterRIR"][::std::mem::size_of::<_VAEncMiscParameterRIR>() - 28usize];
    ["Alignment of _VAEncMiscParameterRIR"]
        [::std::mem::align_of::<_VAEncMiscParameterRIR>() - 4usize];
    ["Offset of field: _VAEncMiscParameterRIR::rir_flags"]
        [::std::mem::offset_of!(_VAEncMiscParameterRIR, rir_flags) - 0usize];
    ["Offset of field: _VAEncMiscParameterRIR::intra_insertion_location"]
        [::std::mem::offset_of!(_VAEncMiscParameterRIR, intra_insertion_location) - 4usize];
    ["Offset of field: _VAEncMiscParameterRIR::intra_insert_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterRIR, intra_insert_size) - 6usize];
    ["Offset of field: _VAEncMiscParameterRIR::qp_delta_for_inserted_intra"]
        [::std::mem::offset_of!(_VAEncMiscParameterRIR, qp_delta_for_inserted_intra) - 8usize];
    ["Offset of field: _VAEncMiscParameterRIR::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterRIR, va_reserved) - 12usize];
};
pub type VAEncMiscParameterRIR = _VAEncMiscParameterRIR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterHRD {
    pub initial_buffer_fullness: u32,
    pub buffer_size: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterHRD"][::std::mem::size_of::<_VAEncMiscParameterHRD>() - 24usize];
    ["Alignment of _VAEncMiscParameterHRD"]
        [::std::mem::align_of::<_VAEncMiscParameterHRD>() - 4usize];
    ["Offset of field: _VAEncMiscParameterHRD::initial_buffer_fullness"]
        [::std::mem::offset_of!(_VAEncMiscParameterHRD, initial_buffer_fullness) - 0usize];
    ["Offset of field: _VAEncMiscParameterHRD::buffer_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterHRD, buffer_size) - 4usize];
    ["Offset of field: _VAEncMiscParameterHRD::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterHRD, va_reserved) - 8usize];
};
pub type VAEncMiscParameterHRD = _VAEncMiscParameterHRD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterBufferMaxFrameSize {
    pub type_: VAEncMiscParameterType,
    pub max_frame_size: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBufferMaxFrameSize"]
        [::std::mem::size_of::<_VAEncMiscParameterBufferMaxFrameSize>() - 24usize];
    ["Alignment of _VAEncMiscParameterBufferMaxFrameSize"]
        [::std::mem::align_of::<_VAEncMiscParameterBufferMaxFrameSize>() - 4usize];
    ["Offset of field: _VAEncMiscParameterBufferMaxFrameSize::type_"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferMaxFrameSize, type_) - 0usize];
    ["Offset of field: _VAEncMiscParameterBufferMaxFrameSize::max_frame_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferMaxFrameSize, max_frame_size) - 4usize];
    ["Offset of field: _VAEncMiscParameterBufferMaxFrameSize::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferMaxFrameSize, va_reserved) - 8usize];
};
pub type VAEncMiscParameterBufferMaxFrameSize = _VAEncMiscParameterBufferMaxFrameSize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterBufferMultiPassFrameSize {
    pub type_: VAEncMiscParameterType,
    pub max_frame_size: u32,
    pub reserved: u32,
    pub num_passes: u8,
    pub delta_qp: *mut u8,
    pub va_reserved: [::std::os::raw::c_ulong; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBufferMultiPassFrameSize"]
        [::std::mem::size_of::<_VAEncMiscParameterBufferMultiPassFrameSize>() - 56usize];
    ["Alignment of _VAEncMiscParameterBufferMultiPassFrameSize"]
        [::std::mem::align_of::<_VAEncMiscParameterBufferMultiPassFrameSize>() - 8usize];
    ["Offset of field: _VAEncMiscParameterBufferMultiPassFrameSize::type_"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferMultiPassFrameSize, type_) - 0usize];
    ["Offset of field: _VAEncMiscParameterBufferMultiPassFrameSize::max_frame_size"][::std::mem::offset_of!(
        _VAEncMiscParameterBufferMultiPassFrameSize,
        max_frame_size
    ) - 4usize];
    ["Offset of field: _VAEncMiscParameterBufferMultiPassFrameSize::reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferMultiPassFrameSize, reserved) - 8usize];
    ["Offset of field: _VAEncMiscParameterBufferMultiPassFrameSize::num_passes"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferMultiPassFrameSize, num_passes) - 12usize];
    ["Offset of field: _VAEncMiscParameterBufferMultiPassFrameSize::delta_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferMultiPassFrameSize, delta_qp) - 16usize];
    ["Offset of field: _VAEncMiscParameterBufferMultiPassFrameSize::va_reserved"][::std::mem::offset_of!(
        _VAEncMiscParameterBufferMultiPassFrameSize,
        va_reserved
    ) - 24usize];
};
pub type VAEncMiscParameterBufferMultiPassFrameSize = _VAEncMiscParameterBufferMultiPassFrameSize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterBufferQualityLevel {
    pub quality_level: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBufferQualityLevel"]
        [::std::mem::size_of::<_VAEncMiscParameterBufferQualityLevel>() - 20usize];
    ["Alignment of _VAEncMiscParameterBufferQualityLevel"]
        [::std::mem::align_of::<_VAEncMiscParameterBufferQualityLevel>() - 4usize];
    ["Offset of field: _VAEncMiscParameterBufferQualityLevel::quality_level"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferQualityLevel, quality_level) - 0usize];
    ["Offset of field: _VAEncMiscParameterBufferQualityLevel::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferQualityLevel, va_reserved) - 4usize];
};
pub type VAEncMiscParameterBufferQualityLevel = _VAEncMiscParameterBufferQualityLevel;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterQuantization {
    pub quantization_flags: _VAEncMiscParameterQuantization__bindgen_ty_1,
    pub va_reserved: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterQuantization__bindgen_ty_1 {
    pub bits: _VAEncMiscParameterQuantization__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterQuantization__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterQuantization__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncMiscParameterQuantization__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncMiscParameterQuantization__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterQuantization__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncMiscParameterQuantization__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn disable_trellis(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_trellis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_trellis_I(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_trellis_I(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_trellis_P(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_trellis_P(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_trellis_B(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_trellis_B(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_trellis: u32,
        enable_trellis_I: u32,
        enable_trellis_P: u32,
        enable_trellis_B: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disable_trellis: u32 = unsafe { ::std::mem::transmute(disable_trellis) };
            disable_trellis as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let enable_trellis_I: u32 = unsafe { ::std::mem::transmute(enable_trellis_I) };
            enable_trellis_I as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let enable_trellis_P: u32 = unsafe { ::std::mem::transmute(enable_trellis_P) };
            enable_trellis_P as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enable_trellis_B: u32 = unsafe { ::std::mem::transmute(enable_trellis_B) };
            enable_trellis_B as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterQuantization__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterQuantization__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterQuantization__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterQuantization__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterQuantization__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncMiscParameterQuantization__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncMiscParameterQuantization__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncMiscParameterQuantization__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterQuantization"]
        [::std::mem::size_of::<_VAEncMiscParameterQuantization>() - 8usize];
    ["Alignment of _VAEncMiscParameterQuantization"]
        [::std::mem::align_of::<_VAEncMiscParameterQuantization>() - 4usize];
    ["Offset of field: _VAEncMiscParameterQuantization::quantization_flags"]
        [::std::mem::offset_of!(_VAEncMiscParameterQuantization, quantization_flags) - 0usize];
    ["Offset of field: _VAEncMiscParameterQuantization::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterQuantization, va_reserved) - 4usize];
};
pub type VAEncMiscParameterQuantization = _VAEncMiscParameterQuantization;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterSkipFrame {
    pub skip_frame_flag: u8,
    pub num_skip_frames: u8,
    pub size_skip_frames: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterSkipFrame"]
        [::std::mem::size_of::<_VAEncMiscParameterSkipFrame>() - 24usize];
    ["Alignment of _VAEncMiscParameterSkipFrame"]
        [::std::mem::align_of::<_VAEncMiscParameterSkipFrame>() - 4usize];
    ["Offset of field: _VAEncMiscParameterSkipFrame::skip_frame_flag"]
        [::std::mem::offset_of!(_VAEncMiscParameterSkipFrame, skip_frame_flag) - 0usize];
    ["Offset of field: _VAEncMiscParameterSkipFrame::num_skip_frames"]
        [::std::mem::offset_of!(_VAEncMiscParameterSkipFrame, num_skip_frames) - 1usize];
    ["Offset of field: _VAEncMiscParameterSkipFrame::size_skip_frames"]
        [::std::mem::offset_of!(_VAEncMiscParameterSkipFrame, size_skip_frames) - 4usize];
    ["Offset of field: _VAEncMiscParameterSkipFrame::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterSkipFrame, va_reserved) - 8usize];
};
pub type VAEncMiscParameterSkipFrame = _VAEncMiscParameterSkipFrame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncROI {
    pub roi_rectangle: VARectangle,
    pub roi_value: i8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncROI"][::std::mem::size_of::<_VAEncROI>() - 10usize];
    ["Alignment of _VAEncROI"][::std::mem::align_of::<_VAEncROI>() - 2usize];
    ["Offset of field: _VAEncROI::roi_rectangle"]
        [::std::mem::offset_of!(_VAEncROI, roi_rectangle) - 0usize];
    ["Offset of field: _VAEncROI::roi_value"]
        [::std::mem::offset_of!(_VAEncROI, roi_value) - 8usize];
};
pub type VAEncROI = _VAEncROI;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterBufferROI {
    pub num_roi: u32,
    pub max_delta_qp: i8,
    pub min_delta_qp: i8,
    pub roi: *mut VAEncROI,
    pub roi_flags: _VAEncMiscParameterBufferROI__bindgen_ty_1,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterBufferROI__bindgen_ty_1 {
    pub bits: _VAEncMiscParameterBufferROI__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterBufferROI__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBufferROI__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncMiscParameterBufferROI__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncMiscParameterBufferROI__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAEncMiscParameterBufferROI__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAEncMiscParameterBufferROI__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn roi_value_is_qp_delta(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_roi_value_is_qp_delta(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        roi_value_is_qp_delta: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let roi_value_is_qp_delta: u32 =
                unsafe { ::std::mem::transmute(roi_value_is_qp_delta) };
            roi_value_is_qp_delta as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBufferROI__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterBufferROI__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterBufferROI__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterBufferROI__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterBufferROI__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncMiscParameterBufferROI__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBufferROI"]
        [::std::mem::size_of::<_VAEncMiscParameterBufferROI>() - 40usize];
    ["Alignment of _VAEncMiscParameterBufferROI"]
        [::std::mem::align_of::<_VAEncMiscParameterBufferROI>() - 8usize];
    ["Offset of field: _VAEncMiscParameterBufferROI::num_roi"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI, num_roi) - 0usize];
    ["Offset of field: _VAEncMiscParameterBufferROI::max_delta_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI, max_delta_qp) - 4usize];
    ["Offset of field: _VAEncMiscParameterBufferROI::min_delta_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI, min_delta_qp) - 5usize];
    ["Offset of field: _VAEncMiscParameterBufferROI::roi"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI, roi) - 8usize];
    ["Offset of field: _VAEncMiscParameterBufferROI::roi_flags"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI, roi_flags) - 16usize];
    ["Offset of field: _VAEncMiscParameterBufferROI::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferROI, va_reserved) - 20usize];
};
pub type VAEncMiscParameterBufferROI = _VAEncMiscParameterBufferROI;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterBufferDirtyRect {
    pub num_roi_rectangle: u32,
    pub roi_rectangle: *mut VARectangle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterBufferDirtyRect"]
        [::std::mem::size_of::<_VAEncMiscParameterBufferDirtyRect>() - 16usize];
    ["Alignment of _VAEncMiscParameterBufferDirtyRect"]
        [::std::mem::align_of::<_VAEncMiscParameterBufferDirtyRect>() - 8usize];
    ["Offset of field: _VAEncMiscParameterBufferDirtyRect::num_roi_rectangle"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferDirtyRect, num_roi_rectangle) - 0usize];
    ["Offset of field: _VAEncMiscParameterBufferDirtyRect::roi_rectangle"]
        [::std::mem::offset_of!(_VAEncMiscParameterBufferDirtyRect, roi_rectangle) - 8usize];
};
pub type VAEncMiscParameterBufferDirtyRect = _VAEncMiscParameterBufferDirtyRect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterParallelRateControl {
    pub num_layers: u32,
    pub num_b_in_gop: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterParallelRateControl"]
        [::std::mem::size_of::<_VAEncMiscParameterParallelRateControl>() - 16usize];
    ["Alignment of _VAEncMiscParameterParallelRateControl"]
        [::std::mem::align_of::<_VAEncMiscParameterParallelRateControl>() - 8usize];
    ["Offset of field: _VAEncMiscParameterParallelRateControl::num_layers"]
        [::std::mem::offset_of!(_VAEncMiscParameterParallelRateControl, num_layers) - 0usize];
    ["Offset of field: _VAEncMiscParameterParallelRateControl::num_b_in_gop"]
        [::std::mem::offset_of!(_VAEncMiscParameterParallelRateControl, num_b_in_gop) - 8usize];
};
pub type VAEncMiscParameterParallelRateControl = _VAEncMiscParameterParallelRateControl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterEncQuality {
    pub __bindgen_anon_1: _VAEncMiscParameterEncQuality__bindgen_ty_1,
    pub FTQSkipThresholdLUT: [u8; 52usize],
    pub NonFTQSkipThresholdLUT: [u16; 52usize],
    pub reserved: [u32; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterEncQuality__bindgen_ty_1 {
    pub __bindgen_anon_1: _VAEncMiscParameterEncQuality__bindgen_ty_1__bindgen_ty_1,
    pub encControls: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterEncQuality__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterEncQuality__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncMiscParameterEncQuality__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncMiscParameterEncQuality__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAEncMiscParameterEncQuality__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAEncMiscParameterEncQuality__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn useRawPicForRef(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_useRawPicForRef(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skipCheckDisable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skipCheckDisable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FTQOverride(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FTQOverride(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FTQEnable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FTQEnable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FTQSkipThresholdLUTInput(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FTQSkipThresholdLUTInput(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn NonFTQSkipThresholdLUTInput(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NonFTQSkipThresholdLUTInput(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ReservedBit(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedBit(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn directBiasAdjustmentEnable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_directBiasAdjustmentEnable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn globalMotionBiasAdjustmentEnable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_globalMotionBiasAdjustmentEnable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HMEMVCostScalingFactor(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_HMEMVCostScalingFactor(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn HMEDisable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_HMEDisable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SuperHMEDisable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SuperHMEDisable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn UltraHMEDisable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_UltraHMEDisable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn PanicModeDisable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_PanicModeDisable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ForceRepartitionCheck(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ForceRepartitionCheck(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        useRawPicForRef: u32,
        skipCheckDisable: u32,
        FTQOverride: u32,
        FTQEnable: u32,
        FTQSkipThresholdLUTInput: u32,
        NonFTQSkipThresholdLUTInput: u32,
        ReservedBit: u32,
        directBiasAdjustmentEnable: u32,
        globalMotionBiasAdjustmentEnable: u32,
        HMEMVCostScalingFactor: u32,
        HMEDisable: u32,
        SuperHMEDisable: u32,
        UltraHMEDisable: u32,
        PanicModeDisable: u32,
        ForceRepartitionCheck: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let useRawPicForRef: u32 = unsafe { ::std::mem::transmute(useRawPicForRef) };
            useRawPicForRef as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let skipCheckDisable: u32 = unsafe { ::std::mem::transmute(skipCheckDisable) };
            skipCheckDisable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let FTQOverride: u32 = unsafe { ::std::mem::transmute(FTQOverride) };
            FTQOverride as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let FTQEnable: u32 = unsafe { ::std::mem::transmute(FTQEnable) };
            FTQEnable as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let FTQSkipThresholdLUTInput: u32 =
                unsafe { ::std::mem::transmute(FTQSkipThresholdLUTInput) };
            FTQSkipThresholdLUTInput as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let NonFTQSkipThresholdLUTInput: u32 =
                unsafe { ::std::mem::transmute(NonFTQSkipThresholdLUTInput) };
            NonFTQSkipThresholdLUTInput as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ReservedBit: u32 = unsafe { ::std::mem::transmute(ReservedBit) };
            ReservedBit as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let directBiasAdjustmentEnable: u32 =
                unsafe { ::std::mem::transmute(directBiasAdjustmentEnable) };
            directBiasAdjustmentEnable as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let globalMotionBiasAdjustmentEnable: u32 =
                unsafe { ::std::mem::transmute(globalMotionBiasAdjustmentEnable) };
            globalMotionBiasAdjustmentEnable as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let HMEMVCostScalingFactor: u32 =
                unsafe { ::std::mem::transmute(HMEMVCostScalingFactor) };
            HMEMVCostScalingFactor as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let HMEDisable: u32 = unsafe { ::std::mem::transmute(HMEDisable) };
            HMEDisable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let SuperHMEDisable: u32 = unsafe { ::std::mem::transmute(SuperHMEDisable) };
            SuperHMEDisable as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let UltraHMEDisable: u32 = unsafe { ::std::mem::transmute(UltraHMEDisable) };
            UltraHMEDisable as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let PanicModeDisable: u32 = unsafe { ::std::mem::transmute(PanicModeDisable) };
            PanicModeDisable as u64
        });
        __bindgen_bitfield_unit.set(15usize, 2u8, {
            let ForceRepartitionCheck: u32 =
                unsafe { ::std::mem::transmute(ForceRepartitionCheck) };
            ForceRepartitionCheck as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterEncQuality__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterEncQuality__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterEncQuality__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterEncQuality__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterEncQuality__bindgen_ty_1::encControls"]
        [::std::mem::offset_of!(_VAEncMiscParameterEncQuality__bindgen_ty_1, encControls) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterEncQuality"]
        [::std::mem::size_of::<_VAEncMiscParameterEncQuality>() - 224usize];
    ["Alignment of _VAEncMiscParameterEncQuality"]
        [::std::mem::align_of::<_VAEncMiscParameterEncQuality>() - 4usize];
    ["Offset of field: _VAEncMiscParameterEncQuality::FTQSkipThresholdLUT"]
        [::std::mem::offset_of!(_VAEncMiscParameterEncQuality, FTQSkipThresholdLUT) - 4usize];
    ["Offset of field: _VAEncMiscParameterEncQuality::NonFTQSkipThresholdLUT"]
        [::std::mem::offset_of!(_VAEncMiscParameterEncQuality, NonFTQSkipThresholdLUT) - 56usize];
    ["Offset of field: _VAEncMiscParameterEncQuality::reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterEncQuality, reserved) - 160usize];
};
pub type VAEncMiscParameterEncQuality = _VAEncMiscParameterEncQuality;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterCustomRoundingControl {
    pub rounding_offset_setting: _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1 {
    pub bits: _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterCustomRoundingControl__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn enable_custom_rouding_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_custom_rouding_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rounding_offset_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_rounding_offset_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_custom_rounding_inter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_custom_rounding_inter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rounding_offset_inter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_rounding_offset_inter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enable_custom_rouding_intra: u32,
        rounding_offset_intra: u32,
        enable_custom_rounding_inter: u32,
        rounding_offset_inter: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enable_custom_rouding_intra: u32 =
                unsafe { ::std::mem::transmute(enable_custom_rouding_intra) };
            enable_custom_rouding_intra as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let rounding_offset_intra: u32 =
                unsafe { ::std::mem::transmute(rounding_offset_intra) };
            rounding_offset_intra as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let enable_custom_rounding_inter: u32 =
                unsafe { ::std::mem::transmute(enable_custom_rounding_inter) };
            enable_custom_rounding_inter as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let rounding_offset_inter: u32 =
                unsafe { ::std::mem::transmute(rounding_offset_inter) };
            rounding_offset_inter as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterCustomRoundingControl__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterCustomRoundingControl__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1::bits"][::std::mem::offset_of!(
        _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1,
        bits
    ) - 0usize];
    ["Offset of field: _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1::value"][::std::mem::offset_of!(
        _VAEncMiscParameterCustomRoundingControl__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterCustomRoundingControl"]
        [::std::mem::size_of::<_VAEncMiscParameterCustomRoundingControl>() - 4usize];
    ["Alignment of _VAEncMiscParameterCustomRoundingControl"]
        [::std::mem::align_of::<_VAEncMiscParameterCustomRoundingControl>() - 4usize];
    ["Offset of field: _VAEncMiscParameterCustomRoundingControl::rounding_offset_setting"][::std::mem::offset_of!(
        _VAEncMiscParameterCustomRoundingControl,
        rounding_offset_setting
    )
        - 0usize];
};
pub type VAEncMiscParameterCustomRoundingControl = _VAEncMiscParameterCustomRoundingControl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferBase {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferBase"]
        [::std::mem::size_of::<_VASliceParameterBufferBase>() - 12usize];
    ["Alignment of _VASliceParameterBufferBase"]
        [::std::mem::align_of::<_VASliceParameterBufferBase>() - 4usize];
    ["Offset of field: _VASliceParameterBufferBase::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferBase, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferBase::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferBase, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferBase::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferBase, slice_data_flag) - 8usize];
};
pub type VASliceParameterBufferBase = _VASliceParameterBufferBase;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAHuffmanTableBufferJPEGBaseline {
    pub load_huffman_table: [u8; 2usize],
    pub huffman_table: [_VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1; 2usize],
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1 {
    pub num_dc_codes: [u8; 16usize],
    pub dc_values: [u8; 12usize],
    pub num_ac_codes: [u8; 16usize],
    pub ac_values: [u8; 162usize],
    pub pad: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1"]
        [::std::mem::size_of::<_VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1>() - 208usize];
    ["Alignment of _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1"]
        [::std::mem::align_of::<_VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1>() - 1usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1::num_dc_codes"][::std::mem::offset_of!(
        _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1,
        num_dc_codes
    ) - 0usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1::dc_values"][::std::mem::offset_of!(
        _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1,
        dc_values
    ) - 16usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1::num_ac_codes"][::std::mem::offset_of!(
        _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1,
        num_ac_codes
    ) - 28usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1::ac_values"][::std::mem::offset_of!(
        _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1,
        ac_values
    ) - 44usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(_VAHuffmanTableBufferJPEGBaseline__bindgen_ty_1, pad) - 206usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAHuffmanTableBufferJPEGBaseline"]
        [::std::mem::size_of::<_VAHuffmanTableBufferJPEGBaseline>() - 436usize];
    ["Alignment of _VAHuffmanTableBufferJPEGBaseline"]
        [::std::mem::align_of::<_VAHuffmanTableBufferJPEGBaseline>() - 4usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline::load_huffman_table"]
        [::std::mem::offset_of!(_VAHuffmanTableBufferJPEGBaseline, load_huffman_table) - 0usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline::huffman_table"]
        [::std::mem::offset_of!(_VAHuffmanTableBufferJPEGBaseline, huffman_table) - 2usize];
    ["Offset of field: _VAHuffmanTableBufferJPEGBaseline::va_reserved"]
        [::std::mem::offset_of!(_VAHuffmanTableBufferJPEGBaseline, va_reserved) - 420usize];
};
pub type VAHuffmanTableBufferJPEGBaseline = _VAHuffmanTableBufferJPEGBaseline;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferMPEG2 {
    pub horizontal_size: u16,
    pub vertical_size: u16,
    pub forward_reference_picture: VASurfaceID,
    pub backward_reference_picture: VASurfaceID,
    pub picture_coding_type: i32,
    pub f_code: i32,
    pub picture_coding_extension: _VAPictureParameterBufferMPEG2__bindgen_ty_1,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferMPEG2__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn intra_dc_precision(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_intra_dc_precision(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn picture_structure(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_picture_structure(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn top_field_first(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_top_field_first(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_pred_frame_dct(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_pred_frame_dct(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn concealment_motion_vectors(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_concealment_motion_vectors(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn q_scale_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_q_scale_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_vlc_format(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_vlc_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alternate_scan(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alternate_scan(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn repeat_first_field(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_repeat_first_field(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn progressive_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_progressive_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_first_field(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_first_field(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        intra_dc_precision: u32,
        picture_structure: u32,
        top_field_first: u32,
        frame_pred_frame_dct: u32,
        concealment_motion_vectors: u32,
        q_scale_type: u32,
        intra_vlc_format: u32,
        alternate_scan: u32,
        repeat_first_field: u32,
        progressive_frame: u32,
        is_first_field: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let intra_dc_precision: u32 = unsafe { ::std::mem::transmute(intra_dc_precision) };
            intra_dc_precision as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let picture_structure: u32 = unsafe { ::std::mem::transmute(picture_structure) };
            picture_structure as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let top_field_first: u32 = unsafe { ::std::mem::transmute(top_field_first) };
            top_field_first as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let frame_pred_frame_dct: u32 = unsafe { ::std::mem::transmute(frame_pred_frame_dct) };
            frame_pred_frame_dct as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let concealment_motion_vectors: u32 =
                unsafe { ::std::mem::transmute(concealment_motion_vectors) };
            concealment_motion_vectors as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let q_scale_type: u32 = unsafe { ::std::mem::transmute(q_scale_type) };
            q_scale_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let intra_vlc_format: u32 = unsafe { ::std::mem::transmute(intra_vlc_format) };
            intra_vlc_format as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let alternate_scan: u32 = unsafe { ::std::mem::transmute(alternate_scan) };
            alternate_scan as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let repeat_first_field: u32 = unsafe { ::std::mem::transmute(repeat_first_field) };
            repeat_first_field as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let progressive_frame: u32 = unsafe { ::std::mem::transmute(progressive_frame) };
            progressive_frame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_first_field: u32 = unsafe { ::std::mem::transmute(is_first_field) };
            is_first_field as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG2__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG2__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG2"]
        [::std::mem::size_of::<_VAPictureParameterBufferMPEG2>() - 40usize];
    ["Alignment of _VAPictureParameterBufferMPEG2"]
        [::std::mem::align_of::<_VAPictureParameterBufferMPEG2>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::horizontal_size"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG2, horizontal_size) - 0usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::vertical_size"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG2, vertical_size) - 2usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::forward_reference_picture"][::std::mem::offset_of!(
        _VAPictureParameterBufferMPEG2,
        forward_reference_picture
    ) - 4usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::backward_reference_picture"][::std::mem::offset_of!(
        _VAPictureParameterBufferMPEG2,
        backward_reference_picture
    ) - 8usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::picture_coding_type"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG2, picture_coding_type) - 12usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::f_code"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG2, f_code) - 16usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::picture_coding_extension"][::std::mem::offset_of!(
        _VAPictureParameterBufferMPEG2,
        picture_coding_extension
    ) - 20usize];
    ["Offset of field: _VAPictureParameterBufferMPEG2::va_reserved"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG2, va_reserved) - 24usize];
};
pub type VAPictureParameterBufferMPEG2 = _VAPictureParameterBufferMPEG2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAIQMatrixBufferMPEG2 {
    pub load_intra_quantiser_matrix: i32,
    pub load_non_intra_quantiser_matrix: i32,
    pub load_chroma_intra_quantiser_matrix: i32,
    pub load_chroma_non_intra_quantiser_matrix: i32,
    pub intra_quantiser_matrix: [u8; 64usize],
    pub non_intra_quantiser_matrix: [u8; 64usize],
    pub chroma_intra_quantiser_matrix: [u8; 64usize],
    pub chroma_non_intra_quantiser_matrix: [u8; 64usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAIQMatrixBufferMPEG2"][::std::mem::size_of::<_VAIQMatrixBufferMPEG2>() - 288usize];
    ["Alignment of _VAIQMatrixBufferMPEG2"]
        [::std::mem::align_of::<_VAIQMatrixBufferMPEG2>() - 4usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::load_intra_quantiser_matrix"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG2, load_intra_quantiser_matrix) - 0usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::load_non_intra_quantiser_matrix"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG2, load_non_intra_quantiser_matrix) - 4usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::load_chroma_intra_quantiser_matrix"][::std::mem::offset_of!(
        _VAIQMatrixBufferMPEG2,
        load_chroma_intra_quantiser_matrix
    ) - 8usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::load_chroma_non_intra_quantiser_matrix"][::std::mem::offset_of!(
        _VAIQMatrixBufferMPEG2,
        load_chroma_non_intra_quantiser_matrix
    )
        - 12usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::intra_quantiser_matrix"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG2, intra_quantiser_matrix) - 16usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::non_intra_quantiser_matrix"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG2, non_intra_quantiser_matrix) - 80usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::chroma_intra_quantiser_matrix"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG2, chroma_intra_quantiser_matrix) - 144usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::chroma_non_intra_quantiser_matrix"][::std::mem::offset_of!(
        _VAIQMatrixBufferMPEG2,
        chroma_non_intra_quantiser_matrix
    ) - 208usize];
    ["Offset of field: _VAIQMatrixBufferMPEG2::va_reserved"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG2, va_reserved) - 272usize];
};
pub type VAIQMatrixBufferMPEG2 = _VAIQMatrixBufferMPEG2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferMPEG2 {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub macroblock_offset: u32,
    pub slice_horizontal_position: u32,
    pub slice_vertical_position: u32,
    pub quantiser_scale_code: i32,
    pub intra_slice_flag: i32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferMPEG2"]
        [::std::mem::size_of::<_VASliceParameterBufferMPEG2>() - 48usize];
    ["Alignment of _VASliceParameterBufferMPEG2"]
        [::std::mem::align_of::<_VASliceParameterBufferMPEG2>() - 4usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::macroblock_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, macroblock_offset) - 12usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::slice_horizontal_position"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, slice_horizontal_position) - 16usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::slice_vertical_position"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, slice_vertical_position) - 20usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::quantiser_scale_code"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, quantiser_scale_code) - 24usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::intra_slice_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, intra_slice_flag) - 28usize];
    ["Offset of field: _VASliceParameterBufferMPEG2::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG2, va_reserved) - 32usize];
};
pub type VASliceParameterBufferMPEG2 = _VASliceParameterBufferMPEG2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAMacroblockParameterBufferMPEG2 {
    pub macroblock_address: u16,
    pub macroblock_type: u8,
    pub macroblock_modes: _VAMacroblockParameterBufferMPEG2__bindgen_ty_1,
    pub motion_vertical_field_select: u8,
    pub PMV: [[[i16; 2usize]; 2usize]; 2usize],
    pub coded_block_pattern: u16,
    pub num_skipped_macroblocks: u16,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAMacroblockParameterBufferMPEG2__bindgen_ty_1 {
    pub bits: _VAMacroblockParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAMacroblockParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAMacroblockParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAMacroblockParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAMacroblockParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAMacroblockParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAMacroblockParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn frame_motion_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_motion_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn field_motion_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_field_motion_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dct_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dct_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frame_motion_type: u32,
        field_motion_type: u32,
        dct_type: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let frame_motion_type: u32 = unsafe { ::std::mem::transmute(frame_motion_type) };
            frame_motion_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let field_motion_type: u32 = unsafe { ::std::mem::transmute(field_motion_type) };
            field_motion_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dct_type: u32 = unsafe { ::std::mem::transmute(dct_type) };
            dct_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAMacroblockParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::size_of::<_VAMacroblockParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAMacroblockParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAMacroblockParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAMacroblockParameterBufferMPEG2"]
        [::std::mem::size_of::<_VAMacroblockParameterBufferMPEG2>() - 48usize];
    ["Alignment of _VAMacroblockParameterBufferMPEG2"]
        [::std::mem::align_of::<_VAMacroblockParameterBufferMPEG2>() - 4usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::macroblock_address"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2, macroblock_address) - 0usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::macroblock_type"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2, macroblock_type) - 2usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::macroblock_modes"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2, macroblock_modes) - 4usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::motion_vertical_field_select"][::std::mem::offset_of!(
        _VAMacroblockParameterBufferMPEG2,
        motion_vertical_field_select
    )
        - 8usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::PMV"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2, PMV) - 10usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::coded_block_pattern"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2, coded_block_pattern) - 26usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::num_skipped_macroblocks"][::std::mem::offset_of!(
        _VAMacroblockParameterBufferMPEG2,
        num_skipped_macroblocks
    ) - 28usize];
    ["Offset of field: _VAMacroblockParameterBufferMPEG2::va_reserved"]
        [::std::mem::offset_of!(_VAMacroblockParameterBufferMPEG2, va_reserved) - 32usize];
};
pub type VAMacroblockParameterBufferMPEG2 = _VAMacroblockParameterBufferMPEG2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferMPEG4 {
    pub vop_width: u16,
    pub vop_height: u16,
    pub forward_reference_picture: VASurfaceID,
    pub backward_reference_picture: VASurfaceID,
    pub vol_fields: _VAPictureParameterBufferMPEG4__bindgen_ty_1,
    pub no_of_sprite_warping_points: u8,
    pub sprite_trajectory_du: [i16; 3usize],
    pub sprite_trajectory_dv: [i16; 3usize],
    pub quant_precision: u8,
    pub vop_fields: _VAPictureParameterBufferMPEG4__bindgen_ty_2,
    pub vop_fcode_forward: u8,
    pub vop_fcode_backward: u8,
    pub vop_time_increment_resolution: u16,
    pub num_gobs_in_vop: u8,
    pub num_macroblocks_in_gob: u8,
    pub TRB: i16,
    pub TRD: i16,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferMPEG4__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferMPEG4__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferMPEG4__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG4__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferMPEG4__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferMPEG4__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferMPEG4__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferMPEG4__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn short_video_header(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_short_video_header(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_format(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn interlaced(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_interlaced(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn obmc_disable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_obmc_disable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sprite_enable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sprite_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sprite_warping_accuracy(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sprite_warping_accuracy(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn quant_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quant_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quarter_sample(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quarter_sample(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn data_partitioned(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_data_partitioned(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reversible_vlc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reversible_vlc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn resync_marker_disable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_resync_marker_disable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        short_video_header: u32,
        chroma_format: u32,
        interlaced: u32,
        obmc_disable: u32,
        sprite_enable: u32,
        sprite_warping_accuracy: u32,
        quant_type: u32,
        quarter_sample: u32,
        data_partitioned: u32,
        reversible_vlc: u32,
        resync_marker_disable: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let short_video_header: u32 = unsafe { ::std::mem::transmute(short_video_header) };
            short_video_header as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let chroma_format: u32 = unsafe { ::std::mem::transmute(chroma_format) };
            chroma_format as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let interlaced: u32 = unsafe { ::std::mem::transmute(interlaced) };
            interlaced as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let obmc_disable: u32 = unsafe { ::std::mem::transmute(obmc_disable) };
            obmc_disable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let sprite_enable: u32 = unsafe { ::std::mem::transmute(sprite_enable) };
            sprite_enable as u64
        });
        __bindgen_bitfield_unit.set(7usize, 2u8, {
            let sprite_warping_accuracy: u32 =
                unsafe { ::std::mem::transmute(sprite_warping_accuracy) };
            sprite_warping_accuracy as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let quant_type: u32 = unsafe { ::std::mem::transmute(quant_type) };
            quant_type as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let quarter_sample: u32 = unsafe { ::std::mem::transmute(quarter_sample) };
            quarter_sample as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let data_partitioned: u32 = unsafe { ::std::mem::transmute(data_partitioned) };
            data_partitioned as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let reversible_vlc: u32 = unsafe { ::std::mem::transmute(reversible_vlc) };
            reversible_vlc as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let resync_marker_disable: u32 =
                unsafe { ::std::mem::transmute(resync_marker_disable) };
            resync_marker_disable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG4__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferMPEG4__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferMPEG4__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferMPEG4__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferMPEG4__bindgen_ty_2 {
    pub bits: _VAPictureParameterBufferMPEG4__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferMPEG4__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG4__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferMPEG4__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferMPEG4__bindgen_ty_2__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferMPEG4__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferMPEG4__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn vop_coding_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_vop_coding_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn backward_reference_vop_coding_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_backward_reference_vop_coding_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn vop_rounding_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vop_rounding_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_dc_vlc_thr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_intra_dc_vlc_thr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn top_field_first(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_top_field_first(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alternate_vertical_scan_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alternate_vertical_scan_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vop_coding_type: u32,
        backward_reference_vop_coding_type: u32,
        vop_rounding_type: u32,
        intra_dc_vlc_thr: u32,
        top_field_first: u32,
        alternate_vertical_scan_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let vop_coding_type: u32 = unsafe { ::std::mem::transmute(vop_coding_type) };
            vop_coding_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let backward_reference_vop_coding_type: u32 =
                unsafe { ::std::mem::transmute(backward_reference_vop_coding_type) };
            backward_reference_vop_coding_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let vop_rounding_type: u32 = unsafe { ::std::mem::transmute(vop_rounding_type) };
            vop_rounding_type as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let intra_dc_vlc_thr: u32 = unsafe { ::std::mem::transmute(intra_dc_vlc_thr) };
            intra_dc_vlc_thr as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let top_field_first: u32 = unsafe { ::std::mem::transmute(top_field_first) };
            top_field_first as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let alternate_vertical_scan_flag: u32 =
                unsafe { ::std::mem::transmute(alternate_vertical_scan_flag) };
            alternate_vertical_scan_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG4__bindgen_ty_2"]
        [::std::mem::size_of::<_VAPictureParameterBufferMPEG4__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAPictureParameterBufferMPEG4__bindgen_ty_2"]
        [::std::mem::align_of::<_VAPictureParameterBufferMPEG4__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferMPEG4"]
        [::std::mem::size_of::<_VAPictureParameterBufferMPEG4>() - 64usize];
    ["Alignment of _VAPictureParameterBufferMPEG4"]
        [::std::mem::align_of::<_VAPictureParameterBufferMPEG4>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::vop_width"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, vop_width) - 0usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::vop_height"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, vop_height) - 2usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::forward_reference_picture"][::std::mem::offset_of!(
        _VAPictureParameterBufferMPEG4,
        forward_reference_picture
    ) - 4usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::backward_reference_picture"][::std::mem::offset_of!(
        _VAPictureParameterBufferMPEG4,
        backward_reference_picture
    ) - 8usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::vol_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, vol_fields) - 12usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::no_of_sprite_warping_points"][::std::mem::offset_of!(
        _VAPictureParameterBufferMPEG4,
        no_of_sprite_warping_points
    ) - 16usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::sprite_trajectory_du"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, sprite_trajectory_du) - 18usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::sprite_trajectory_dv"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, sprite_trajectory_dv) - 24usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::quant_precision"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, quant_precision) - 30usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::vop_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, vop_fields) - 32usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::vop_fcode_forward"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, vop_fcode_forward) - 36usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::vop_fcode_backward"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, vop_fcode_backward) - 37usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::vop_time_increment_resolution"][::std::mem::offset_of!(
        _VAPictureParameterBufferMPEG4,
        vop_time_increment_resolution
    ) - 38usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::num_gobs_in_vop"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, num_gobs_in_vop) - 40usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::num_macroblocks_in_gob"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, num_macroblocks_in_gob) - 41usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::TRB"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, TRB) - 42usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::TRD"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, TRD) - 44usize];
    ["Offset of field: _VAPictureParameterBufferMPEG4::va_reserved"]
        [::std::mem::offset_of!(_VAPictureParameterBufferMPEG4, va_reserved) - 48usize];
};
pub type VAPictureParameterBufferMPEG4 = _VAPictureParameterBufferMPEG4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAIQMatrixBufferMPEG4 {
    pub load_intra_quant_mat: i32,
    pub load_non_intra_quant_mat: i32,
    pub intra_quant_mat: [u8; 64usize],
    pub non_intra_quant_mat: [u8; 64usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAIQMatrixBufferMPEG4"][::std::mem::size_of::<_VAIQMatrixBufferMPEG4>() - 152usize];
    ["Alignment of _VAIQMatrixBufferMPEG4"]
        [::std::mem::align_of::<_VAIQMatrixBufferMPEG4>() - 4usize];
    ["Offset of field: _VAIQMatrixBufferMPEG4::load_intra_quant_mat"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG4, load_intra_quant_mat) - 0usize];
    ["Offset of field: _VAIQMatrixBufferMPEG4::load_non_intra_quant_mat"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG4, load_non_intra_quant_mat) - 4usize];
    ["Offset of field: _VAIQMatrixBufferMPEG4::intra_quant_mat"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG4, intra_quant_mat) - 8usize];
    ["Offset of field: _VAIQMatrixBufferMPEG4::non_intra_quant_mat"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG4, non_intra_quant_mat) - 72usize];
    ["Offset of field: _VAIQMatrixBufferMPEG4::va_reserved"]
        [::std::mem::offset_of!(_VAIQMatrixBufferMPEG4, va_reserved) - 136usize];
};
pub type VAIQMatrixBufferMPEG4 = _VAIQMatrixBufferMPEG4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferMPEG4 {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub macroblock_offset: u32,
    pub macroblock_number: u32,
    pub quant_scale: i32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferMPEG4"]
        [::std::mem::size_of::<_VASliceParameterBufferMPEG4>() - 40usize];
    ["Alignment of _VASliceParameterBufferMPEG4"]
        [::std::mem::align_of::<_VASliceParameterBufferMPEG4>() - 4usize];
    ["Offset of field: _VASliceParameterBufferMPEG4::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG4, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferMPEG4::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG4, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferMPEG4::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG4, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferMPEG4::macroblock_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG4, macroblock_offset) - 12usize];
    ["Offset of field: _VASliceParameterBufferMPEG4::macroblock_number"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG4, macroblock_number) - 16usize];
    ["Offset of field: _VASliceParameterBufferMPEG4::quant_scale"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG4, quant_scale) - 20usize];
    ["Offset of field: _VASliceParameterBufferMPEG4::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferMPEG4, va_reserved) - 24usize];
};
pub type VASliceParameterBufferMPEG4 = _VASliceParameterBufferMPEG4;
pub const VAMvMode1Mv: VAMvModeVC1 = 0;
pub const VAMvMode1MvHalfPel: VAMvModeVC1 = 1;
pub const VAMvMode1MvHalfPelBilinear: VAMvModeVC1 = 2;
pub const VAMvModeMixedMv: VAMvModeVC1 = 3;
pub const VAMvModeIntensityCompensation: VAMvModeVC1 = 4;
pub type VAMvModeVC1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferVC1 {
    pub forward_reference_picture: VASurfaceID,
    pub backward_reference_picture: VASurfaceID,
    pub inloop_decoded_picture: VASurfaceID,
    pub sequence_fields: _VAPictureParameterBufferVC1__bindgen_ty_1,
    pub coded_width: u16,
    pub coded_height: u16,
    pub entrypoint_fields: _VAPictureParameterBufferVC1__bindgen_ty_2,
    pub conditional_overlap_flag: u8,
    pub fast_uvmc_flag: u8,
    pub range_mapping_fields: _VAPictureParameterBufferVC1__bindgen_ty_3,
    pub b_picture_fraction: u8,
    pub cbp_table: u8,
    pub mb_mode_table: u8,
    pub range_reduction_frame: u8,
    pub rounding_control: u8,
    pub post_processing: u8,
    pub picture_resolution_index: u8,
    pub luma_scale: u8,
    pub luma_shift: u8,
    pub picture_fields: _VAPictureParameterBufferVC1__bindgen_ty_4,
    pub raw_coding: _VAPictureParameterBufferVC1__bindgen_ty_5,
    pub bitplane_present: _VAPictureParameterBufferVC1__bindgen_ty_6,
    pub reference_fields: _VAPictureParameterBufferVC1__bindgen_ty_7,
    pub mv_fields: _VAPictureParameterBufferVC1__bindgen_ty_8,
    pub pic_quantizer_fields: _VAPictureParameterBufferVC1__bindgen_ty_9,
    pub transform_fields: _VAPictureParameterBufferVC1__bindgen_ty_10,
    pub luma_scale2: u8,
    pub luma_shift2: u8,
    pub intensity_compensation_field: u8,
    pub va_reserved: [u32; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn pulldown(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pulldown(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn interlace(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_interlace(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tfcntrflag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tfcntrflag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn finterpflag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_finterpflag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn psf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_psf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn multires(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multires(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn overlap(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overlap(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn syncmarker(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_syncmarker(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rangered(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rangered(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn max_b_frames(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_max_b_frames(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn profile(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_profile(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pulldown: u32,
        interlace: u32,
        tfcntrflag: u32,
        finterpflag: u32,
        psf: u32,
        multires: u32,
        overlap: u32,
        syncmarker: u32,
        rangered: u32,
        max_b_frames: u32,
        profile: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pulldown: u32 = unsafe { ::std::mem::transmute(pulldown) };
            pulldown as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let interlace: u32 = unsafe { ::std::mem::transmute(interlace) };
            interlace as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let tfcntrflag: u32 = unsafe { ::std::mem::transmute(tfcntrflag) };
            tfcntrflag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let finterpflag: u32 = unsafe { ::std::mem::transmute(finterpflag) };
            finterpflag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let psf: u32 = unsafe { ::std::mem::transmute(psf) };
            psf as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let multires: u32 = unsafe { ::std::mem::transmute(multires) };
            multires as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let overlap: u32 = unsafe { ::std::mem::transmute(overlap) };
            overlap as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let syncmarker: u32 = unsafe { ::std::mem::transmute(syncmarker) };
            syncmarker as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let rangered: u32 = unsafe { ::std::mem::transmute(rangered) };
            rangered as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let max_b_frames: u32 = unsafe { ::std::mem::transmute(max_b_frames) };
            max_b_frames as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let profile: u32 = unsafe { ::std::mem::transmute(profile) };
            profile as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_2 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_2__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn broken_link(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_broken_link(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn closed_entry(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_closed_entry(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn panscan_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_panscan_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn loopfilter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loopfilter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        broken_link: u32,
        closed_entry: u32,
        panscan_flag: u32,
        loopfilter: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let broken_link: u32 = unsafe { ::std::mem::transmute(broken_link) };
            broken_link as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let closed_entry: u32 = unsafe { ::std::mem::transmute(closed_entry) };
            closed_entry as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let panscan_flag: u32 = unsafe { ::std::mem::transmute(panscan_flag) };
            panscan_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let loopfilter: u32 = unsafe { ::std::mem::transmute(loopfilter) };
            loopfilter as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_2"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_2"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_2, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_3 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_3__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_3__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_3__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_3__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_3__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn luma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_luma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn luma(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_luma(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_chroma(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        luma_flag: u32,
        luma: u32,
        chroma_flag: u32,
        chroma: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let luma_flag: u32 = unsafe { ::std::mem::transmute(luma_flag) };
            luma_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let luma: u32 = unsafe { ::std::mem::transmute(luma) };
            luma as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let chroma_flag: u32 = unsafe { ::std::mem::transmute(chroma_flag) };
            chroma_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let chroma: u32 = unsafe { ::std::mem::transmute(chroma) };
            chroma as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_3"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_3>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_3"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_3>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_3::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_3, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_3::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_3, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_4 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_4__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_4__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_4__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_4__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_4__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn picture_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_picture_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_coding_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_frame_coding_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn top_field_first(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_top_field_first(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_first_field(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_first_field(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intensity_compensation(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intensity_compensation(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        picture_type: u32,
        frame_coding_mode: u32,
        top_field_first: u32,
        is_first_field: u32,
        intensity_compensation: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let picture_type: u32 = unsafe { ::std::mem::transmute(picture_type) };
            picture_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let frame_coding_mode: u32 = unsafe { ::std::mem::transmute(frame_coding_mode) };
            frame_coding_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let top_field_first: u32 = unsafe { ::std::mem::transmute(top_field_first) };
            top_field_first as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let is_first_field: u32 = unsafe { ::std::mem::transmute(is_first_field) };
            is_first_field as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let intensity_compensation: u32 =
                unsafe { ::std::mem::transmute(intensity_compensation) };
            intensity_compensation as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_4"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_4>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_4"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_4>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_4::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_4, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_4::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_4, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_5 {
    pub flags: _VAPictureParameterBufferVC1__bindgen_ty_5__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_5__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_5__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_5__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_5__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn mv_type_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mv_type_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn field_tx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_tx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forward_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_forward_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ac_pred(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ac_pred(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn overflags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overflags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mv_type_mb: u32,
        direct_mb: u32,
        skip_mb: u32,
        field_tx: u32,
        forward_mb: u32,
        ac_pred: u32,
        overflags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mv_type_mb: u32 = unsafe { ::std::mem::transmute(mv_type_mb) };
            mv_type_mb as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let direct_mb: u32 = unsafe { ::std::mem::transmute(direct_mb) };
            direct_mb as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let skip_mb: u32 = unsafe { ::std::mem::transmute(skip_mb) };
            skip_mb as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let field_tx: u32 = unsafe { ::std::mem::transmute(field_tx) };
            field_tx as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let forward_mb: u32 = unsafe { ::std::mem::transmute(forward_mb) };
            forward_mb as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ac_pred: u32 = unsafe { ::std::mem::transmute(ac_pred) };
            ac_pred as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let overflags: u32 = unsafe { ::std::mem::transmute(overflags) };
            overflags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_5"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_5>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_5"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_5>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_5::flags"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_5, flags) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_5::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_5, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_6 {
    pub flags: _VAPictureParameterBufferVC1__bindgen_ty_6__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_6__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_6__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_6__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_6__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn bp_mv_type_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bp_mv_type_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_direct_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bp_direct_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_skip_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bp_skip_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_field_tx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bp_field_tx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_forward_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bp_forward_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_ac_pred(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bp_ac_pred(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bp_overflags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bp_overflags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bp_mv_type_mb: u32,
        bp_direct_mb: u32,
        bp_skip_mb: u32,
        bp_field_tx: u32,
        bp_forward_mb: u32,
        bp_ac_pred: u32,
        bp_overflags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bp_mv_type_mb: u32 = unsafe { ::std::mem::transmute(bp_mv_type_mb) };
            bp_mv_type_mb as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bp_direct_mb: u32 = unsafe { ::std::mem::transmute(bp_direct_mb) };
            bp_direct_mb as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bp_skip_mb: u32 = unsafe { ::std::mem::transmute(bp_skip_mb) };
            bp_skip_mb as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bp_field_tx: u32 = unsafe { ::std::mem::transmute(bp_field_tx) };
            bp_field_tx as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bp_forward_mb: u32 = unsafe { ::std::mem::transmute(bp_forward_mb) };
            bp_forward_mb as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bp_ac_pred: u32 = unsafe { ::std::mem::transmute(bp_ac_pred) };
            bp_ac_pred as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bp_overflags: u32 = unsafe { ::std::mem::transmute(bp_overflags) };
            bp_overflags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_6"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_6>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_6"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_6>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_6::flags"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_6, flags) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_6::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_6, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_7 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_7__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_7__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_7__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_7__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_7__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_7__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_7__bindgen_ty_1 {
    #[inline]
    pub fn reference_distance_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_distance_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reference_distance(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reference_distance(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn num_reference_pictures(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_num_reference_pictures(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reference_field_pic_indicator(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_field_pic_indicator(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        reference_distance_flag: u32,
        reference_distance: u32,
        num_reference_pictures: u32,
        reference_field_pic_indicator: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let reference_distance_flag: u32 =
                unsafe { ::std::mem::transmute(reference_distance_flag) };
            reference_distance_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 5u8, {
            let reference_distance: u32 = unsafe { ::std::mem::transmute(reference_distance) };
            reference_distance as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let num_reference_pictures: u32 =
                unsafe { ::std::mem::transmute(num_reference_pictures) };
            num_reference_pictures as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let reference_field_pic_indicator: u32 =
                unsafe { ::std::mem::transmute(reference_field_pic_indicator) };
            reference_field_pic_indicator as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_7"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_7>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_7"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_7>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_7::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_7, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_7::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_7, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_8 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_8__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_8__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_8__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_8__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_8__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_8__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_8__bindgen_ty_1 {
    #[inline]
    pub fn mv_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mv_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mv_mode2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mv_mode2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mv_table(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mv_table(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn two_mv_block_pattern_table(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_two_mv_block_pattern_table(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn four_mv_switch(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_four_mv_switch(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn four_mv_block_pattern_table(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_four_mv_block_pattern_table(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn extended_mv_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extended_mv_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn extended_mv_range(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_extended_mv_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn extended_dmv_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extended_dmv_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn extended_dmv_range(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_extended_dmv_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mv_mode: u32,
        mv_mode2: u32,
        mv_table: u32,
        two_mv_block_pattern_table: u32,
        four_mv_switch: u32,
        four_mv_block_pattern_table: u32,
        extended_mv_flag: u32,
        extended_mv_range: u32,
        extended_dmv_flag: u32,
        extended_dmv_range: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let mv_mode: u32 = unsafe { ::std::mem::transmute(mv_mode) };
            mv_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let mv_mode2: u32 = unsafe { ::std::mem::transmute(mv_mode2) };
            mv_mode2 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let mv_table: u32 = unsafe { ::std::mem::transmute(mv_table) };
            mv_table as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let two_mv_block_pattern_table: u32 =
                unsafe { ::std::mem::transmute(two_mv_block_pattern_table) };
            two_mv_block_pattern_table as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let four_mv_switch: u32 = unsafe { ::std::mem::transmute(four_mv_switch) };
            four_mv_switch as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let four_mv_block_pattern_table: u32 =
                unsafe { ::std::mem::transmute(four_mv_block_pattern_table) };
            four_mv_block_pattern_table as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let extended_mv_flag: u32 = unsafe { ::std::mem::transmute(extended_mv_flag) };
            extended_mv_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 2u8, {
            let extended_mv_range: u32 = unsafe { ::std::mem::transmute(extended_mv_range) };
            extended_mv_range as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let extended_dmv_flag: u32 = unsafe { ::std::mem::transmute(extended_dmv_flag) };
            extended_dmv_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let extended_dmv_range: u32 = unsafe { ::std::mem::transmute(extended_dmv_range) };
            extended_dmv_range as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_8"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_8>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_8"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_8>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_8::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_8, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_8::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_8, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_9 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_9__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_9__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_9__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_9__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_9__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_9__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_9__bindgen_ty_1 {
    #[inline]
    pub fn dquant(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_dquant(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn quantizer(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_quantizer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn half_qp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_half_qp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_quantizer_scale(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_pic_quantizer_scale(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_quantizer_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_quantizer_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dq_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dq_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dq_profile(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_dq_profile(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dq_sb_edge(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_dq_sb_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dq_db_edge(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_dq_db_edge(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dq_binary_level(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dq_binary_level(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alt_pic_quantizer(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_alt_pic_quantizer(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dquant: u32,
        quantizer: u32,
        half_qp: u32,
        pic_quantizer_scale: u32,
        pic_quantizer_type: u32,
        dq_frame: u32,
        dq_profile: u32,
        dq_sb_edge: u32,
        dq_db_edge: u32,
        dq_binary_level: u32,
        alt_pic_quantizer: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let dquant: u32 = unsafe { ::std::mem::transmute(dquant) };
            dquant as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let quantizer: u32 = unsafe { ::std::mem::transmute(quantizer) };
            quantizer as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let half_qp: u32 = unsafe { ::std::mem::transmute(half_qp) };
            half_qp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 5u8, {
            let pic_quantizer_scale: u32 = unsafe { ::std::mem::transmute(pic_quantizer_scale) };
            pic_quantizer_scale as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let pic_quantizer_type: u32 = unsafe { ::std::mem::transmute(pic_quantizer_type) };
            pic_quantizer_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let dq_frame: u32 = unsafe { ::std::mem::transmute(dq_frame) };
            dq_frame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let dq_profile: u32 = unsafe { ::std::mem::transmute(dq_profile) };
            dq_profile as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let dq_sb_edge: u32 = unsafe { ::std::mem::transmute(dq_sb_edge) };
            dq_sb_edge as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let dq_db_edge: u32 = unsafe { ::std::mem::transmute(dq_db_edge) };
            dq_db_edge as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let dq_binary_level: u32 = unsafe { ::std::mem::transmute(dq_binary_level) };
            dq_binary_level as u64
        });
        __bindgen_bitfield_unit.set(19usize, 5u8, {
            let alt_pic_quantizer: u32 = unsafe { ::std::mem::transmute(alt_pic_quantizer) };
            alt_pic_quantizer as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_9"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_9>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_9"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_9>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_9::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_9, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_9::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_9, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVC1__bindgen_ty_10 {
    pub bits: _VAPictureParameterBufferVC1__bindgen_ty_10__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVC1__bindgen_ty_10__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_10__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_10__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_10__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVC1__bindgen_ty_10__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVC1__bindgen_ty_10__bindgen_ty_1 {
    #[inline]
    pub fn variable_sized_transform_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_variable_sized_transform_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_level_transform_type_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_level_transform_type_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_level_transform_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_level_transform_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_ac_codingset_idx1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_transform_ac_codingset_idx1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_ac_codingset_idx2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_transform_ac_codingset_idx2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_transform_dc_table(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_transform_dc_table(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        variable_sized_transform_flag: u32,
        mb_level_transform_type_flag: u32,
        frame_level_transform_type: u32,
        transform_ac_codingset_idx1: u32,
        transform_ac_codingset_idx2: u32,
        intra_transform_dc_table: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let variable_sized_transform_flag: u32 =
                unsafe { ::std::mem::transmute(variable_sized_transform_flag) };
            variable_sized_transform_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mb_level_transform_type_flag: u32 =
                unsafe { ::std::mem::transmute(mb_level_transform_type_flag) };
            mb_level_transform_type_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let frame_level_transform_type: u32 =
                unsafe { ::std::mem::transmute(frame_level_transform_type) };
            frame_level_transform_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let transform_ac_codingset_idx1: u32 =
                unsafe { ::std::mem::transmute(transform_ac_codingset_idx1) };
            transform_ac_codingset_idx1 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let transform_ac_codingset_idx2: u32 =
                unsafe { ::std::mem::transmute(transform_ac_codingset_idx2) };
            transform_ac_codingset_idx2 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let intra_transform_dc_table: u32 =
                unsafe { ::std::mem::transmute(intra_transform_dc_table) };
            intra_transform_dc_table as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1__bindgen_ty_10"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1__bindgen_ty_10>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVC1__bindgen_ty_10"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1__bindgen_ty_10>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_10::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_10, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1__bindgen_ty_10::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1__bindgen_ty_10, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVC1"]
        [::std::mem::size_of::<_VAPictureParameterBufferVC1>() - 104usize];
    ["Alignment of _VAPictureParameterBufferVC1"]
        [::std::mem::align_of::<_VAPictureParameterBufferVC1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1::forward_reference_picture"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, forward_reference_picture) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVC1::backward_reference_picture"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, backward_reference_picture) - 4usize];
    ["Offset of field: _VAPictureParameterBufferVC1::inloop_decoded_picture"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, inloop_decoded_picture) - 8usize];
    ["Offset of field: _VAPictureParameterBufferVC1::sequence_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, sequence_fields) - 12usize];
    ["Offset of field: _VAPictureParameterBufferVC1::coded_width"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, coded_width) - 16usize];
    ["Offset of field: _VAPictureParameterBufferVC1::coded_height"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, coded_height) - 18usize];
    ["Offset of field: _VAPictureParameterBufferVC1::entrypoint_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, entrypoint_fields) - 20usize];
    ["Offset of field: _VAPictureParameterBufferVC1::conditional_overlap_flag"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, conditional_overlap_flag) - 24usize];
    ["Offset of field: _VAPictureParameterBufferVC1::fast_uvmc_flag"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, fast_uvmc_flag) - 25usize];
    ["Offset of field: _VAPictureParameterBufferVC1::range_mapping_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, range_mapping_fields) - 28usize];
    ["Offset of field: _VAPictureParameterBufferVC1::b_picture_fraction"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, b_picture_fraction) - 32usize];
    ["Offset of field: _VAPictureParameterBufferVC1::cbp_table"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, cbp_table) - 33usize];
    ["Offset of field: _VAPictureParameterBufferVC1::mb_mode_table"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, mb_mode_table) - 34usize];
    ["Offset of field: _VAPictureParameterBufferVC1::range_reduction_frame"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, range_reduction_frame) - 35usize];
    ["Offset of field: _VAPictureParameterBufferVC1::rounding_control"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, rounding_control) - 36usize];
    ["Offset of field: _VAPictureParameterBufferVC1::post_processing"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, post_processing) - 37usize];
    ["Offset of field: _VAPictureParameterBufferVC1::picture_resolution_index"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, picture_resolution_index) - 38usize];
    ["Offset of field: _VAPictureParameterBufferVC1::luma_scale"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, luma_scale) - 39usize];
    ["Offset of field: _VAPictureParameterBufferVC1::luma_shift"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, luma_shift) - 40usize];
    ["Offset of field: _VAPictureParameterBufferVC1::picture_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, picture_fields) - 44usize];
    ["Offset of field: _VAPictureParameterBufferVC1::raw_coding"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, raw_coding) - 48usize];
    ["Offset of field: _VAPictureParameterBufferVC1::bitplane_present"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, bitplane_present) - 52usize];
    ["Offset of field: _VAPictureParameterBufferVC1::reference_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, reference_fields) - 56usize];
    ["Offset of field: _VAPictureParameterBufferVC1::mv_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, mv_fields) - 60usize];
    ["Offset of field: _VAPictureParameterBufferVC1::pic_quantizer_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, pic_quantizer_fields) - 64usize];
    ["Offset of field: _VAPictureParameterBufferVC1::transform_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, transform_fields) - 68usize];
    ["Offset of field: _VAPictureParameterBufferVC1::luma_scale2"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, luma_scale2) - 72usize];
    ["Offset of field: _VAPictureParameterBufferVC1::luma_shift2"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, luma_shift2) - 73usize];
    ["Offset of field: _VAPictureParameterBufferVC1::intensity_compensation_field"][::std::mem::offset_of!(
        _VAPictureParameterBufferVC1,
        intensity_compensation_field
    ) - 74usize];
    ["Offset of field: _VAPictureParameterBufferVC1::va_reserved"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVC1, va_reserved) - 76usize];
};
pub type VAPictureParameterBufferVC1 = _VAPictureParameterBufferVC1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferVC1 {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub macroblock_offset: u32,
    pub slice_vertical_position: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferVC1"]
        [::std::mem::size_of::<_VASliceParameterBufferVC1>() - 36usize];
    ["Alignment of _VASliceParameterBufferVC1"]
        [::std::mem::align_of::<_VASliceParameterBufferVC1>() - 4usize];
    ["Offset of field: _VASliceParameterBufferVC1::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferVC1, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferVC1::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVC1, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferVC1::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferVC1, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferVC1::macroblock_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVC1, macroblock_offset) - 12usize];
    ["Offset of field: _VASliceParameterBufferVC1::slice_vertical_position"]
        [::std::mem::offset_of!(_VASliceParameterBufferVC1, slice_vertical_position) - 16usize];
    ["Offset of field: _VASliceParameterBufferVC1::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferVC1, va_reserved) - 20usize];
};
pub type VASliceParameterBufferVC1 = _VASliceParameterBufferVC1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureH264 {
    pub picture_id: VASurfaceID,
    pub frame_idx: u32,
    pub flags: u32,
    pub TopFieldOrderCnt: i32,
    pub BottomFieldOrderCnt: i32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureH264"][::std::mem::size_of::<_VAPictureH264>() - 36usize];
    ["Alignment of _VAPictureH264"][::std::mem::align_of::<_VAPictureH264>() - 4usize];
    ["Offset of field: _VAPictureH264::picture_id"]
        [::std::mem::offset_of!(_VAPictureH264, picture_id) - 0usize];
    ["Offset of field: _VAPictureH264::frame_idx"]
        [::std::mem::offset_of!(_VAPictureH264, frame_idx) - 4usize];
    ["Offset of field: _VAPictureH264::flags"]
        [::std::mem::offset_of!(_VAPictureH264, flags) - 8usize];
    ["Offset of field: _VAPictureH264::TopFieldOrderCnt"]
        [::std::mem::offset_of!(_VAPictureH264, TopFieldOrderCnt) - 12usize];
    ["Offset of field: _VAPictureH264::BottomFieldOrderCnt"]
        [::std::mem::offset_of!(_VAPictureH264, BottomFieldOrderCnt) - 16usize];
    ["Offset of field: _VAPictureH264::va_reserved"]
        [::std::mem::offset_of!(_VAPictureH264, va_reserved) - 20usize];
};
pub type VAPictureH264 = _VAPictureH264;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferH264 {
    pub CurrPic: VAPictureH264,
    pub ReferenceFrames: [VAPictureH264; 16usize],
    pub picture_width_in_mbs_minus1: u16,
    pub picture_height_in_mbs_minus1: u16,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub num_ref_frames: u8,
    pub seq_fields: _VAPictureParameterBufferH264__bindgen_ty_1,
    pub num_slice_groups_minus1: u8,
    pub slice_group_map_type: u8,
    pub slice_group_change_rate_minus1: u16,
    pub pic_init_qp_minus26: i8,
    pub pic_init_qs_minus26: i8,
    pub chroma_qp_index_offset: i8,
    pub second_chroma_qp_index_offset: i8,
    pub pic_fields: _VAPictureParameterBufferH264__bindgen_ty_2,
    pub frame_num: u16,
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferH264__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn chroma_format_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_format_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn residual_colour_transform_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_residual_colour_transform_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gaps_in_frame_num_value_allowed_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gaps_in_frame_num_value_allowed_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_mbs_only_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_mbs_only_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_adaptive_frame_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_adaptive_frame_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_8x8_inference_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_8x8_inference_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn MinLumaBiPredSize8x8(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MinLumaBiPredSize8x8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_frame_num_minus4(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_frame_num_minus4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_order_cnt_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_pic_order_cnt_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_pic_order_cnt_lsb_minus4(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_pic_order_cnt_lsb_minus4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_pic_order_always_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_pic_order_always_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chroma_format_idc: u32,
        residual_colour_transform_flag: u32,
        gaps_in_frame_num_value_allowed_flag: u32,
        frame_mbs_only_flag: u32,
        mb_adaptive_frame_field_flag: u32,
        direct_8x8_inference_flag: u32,
        MinLumaBiPredSize8x8: u32,
        log2_max_frame_num_minus4: u32,
        pic_order_cnt_type: u32,
        log2_max_pic_order_cnt_lsb_minus4: u32,
        delta_pic_order_always_zero_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let chroma_format_idc: u32 = unsafe { ::std::mem::transmute(chroma_format_idc) };
            chroma_format_idc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let residual_colour_transform_flag: u32 =
                unsafe { ::std::mem::transmute(residual_colour_transform_flag) };
            residual_colour_transform_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let gaps_in_frame_num_value_allowed_flag: u32 =
                unsafe { ::std::mem::transmute(gaps_in_frame_num_value_allowed_flag) };
            gaps_in_frame_num_value_allowed_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let frame_mbs_only_flag: u32 = unsafe { ::std::mem::transmute(frame_mbs_only_flag) };
            frame_mbs_only_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mb_adaptive_frame_field_flag: u32 =
                unsafe { ::std::mem::transmute(mb_adaptive_frame_field_flag) };
            mb_adaptive_frame_field_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let direct_8x8_inference_flag: u32 =
                unsafe { ::std::mem::transmute(direct_8x8_inference_flag) };
            direct_8x8_inference_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let MinLumaBiPredSize8x8: u32 = unsafe { ::std::mem::transmute(MinLumaBiPredSize8x8) };
            MinLumaBiPredSize8x8 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let log2_max_frame_num_minus4: u32 =
                unsafe { ::std::mem::transmute(log2_max_frame_num_minus4) };
            log2_max_frame_num_minus4 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let pic_order_cnt_type: u32 = unsafe { ::std::mem::transmute(pic_order_cnt_type) };
            pic_order_cnt_type as u64
        });
        __bindgen_bitfield_unit.set(14usize, 4u8, {
            let log2_max_pic_order_cnt_lsb_minus4: u32 =
                unsafe { ::std::mem::transmute(log2_max_pic_order_cnt_lsb_minus4) };
            log2_max_pic_order_cnt_lsb_minus4 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let delta_pic_order_always_zero_flag: u32 =
                unsafe { ::std::mem::transmute(delta_pic_order_always_zero_flag) };
            delta_pic_order_always_zero_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferH264__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferH264__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferH264__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferH264__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferH264__bindgen_ty_2 {
    pub bits: _VAPictureParameterBufferH264__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferH264__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferH264__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferH264__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferH264__bindgen_ty_2__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferH264__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferH264__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn entropy_coding_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_bipred_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_bipred_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_8x8_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_8x8_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn field_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_order_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_order_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn redundant_pic_cnt_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_redundant_pic_cnt_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reference_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        entropy_coding_mode_flag: u32,
        weighted_pred_flag: u32,
        weighted_bipred_idc: u32,
        transform_8x8_mode_flag: u32,
        field_pic_flag: u32,
        constrained_intra_pred_flag: u32,
        pic_order_present_flag: u32,
        deblocking_filter_control_present_flag: u32,
        redundant_pic_cnt_present_flag: u32,
        reference_pic_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let entropy_coding_mode_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_mode_flag) };
            entropy_coding_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let weighted_bipred_idc: u32 = unsafe { ::std::mem::transmute(weighted_bipred_idc) };
            weighted_bipred_idc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let transform_8x8_mode_flag: u32 =
                unsafe { ::std::mem::transmute(transform_8x8_mode_flag) };
            transform_8x8_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let field_pic_flag: u32 = unsafe { ::std::mem::transmute(field_pic_flag) };
            field_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pic_order_present_flag: u32 =
                unsafe { ::std::mem::transmute(pic_order_present_flag) };
            pic_order_present_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let redundant_pic_cnt_present_flag: u32 =
                unsafe { ::std::mem::transmute(redundant_pic_cnt_present_flag) };
            redundant_pic_cnt_present_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let reference_pic_flag: u32 = unsafe { ::std::mem::transmute(reference_pic_flag) };
            reference_pic_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferH264__bindgen_ty_2"]
        [::std::mem::size_of::<_VAPictureParameterBufferH264__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAPictureParameterBufferH264__bindgen_ty_2"]
        [::std::mem::align_of::<_VAPictureParameterBufferH264__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferH264__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferH264__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferH264"]
        [::std::mem::size_of::<_VAPictureParameterBufferH264>() - 672usize];
    ["Alignment of _VAPictureParameterBufferH264"]
        [::std::mem::align_of::<_VAPictureParameterBufferH264>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferH264::CurrPic"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, CurrPic) - 0usize];
    ["Offset of field: _VAPictureParameterBufferH264::ReferenceFrames"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, ReferenceFrames) - 36usize];
    ["Offset of field: _VAPictureParameterBufferH264::picture_width_in_mbs_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferH264,
        picture_width_in_mbs_minus1
    ) - 612usize];
    ["Offset of field: _VAPictureParameterBufferH264::picture_height_in_mbs_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferH264,
        picture_height_in_mbs_minus1
    ) - 614usize];
    ["Offset of field: _VAPictureParameterBufferH264::bit_depth_luma_minus8"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, bit_depth_luma_minus8) - 616usize];
    ["Offset of field: _VAPictureParameterBufferH264::bit_depth_chroma_minus8"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, bit_depth_chroma_minus8) - 617usize];
    ["Offset of field: _VAPictureParameterBufferH264::num_ref_frames"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, num_ref_frames) - 618usize];
    ["Offset of field: _VAPictureParameterBufferH264::seq_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, seq_fields) - 620usize];
    ["Offset of field: _VAPictureParameterBufferH264::num_slice_groups_minus1"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, num_slice_groups_minus1) - 624usize];
    ["Offset of field: _VAPictureParameterBufferH264::slice_group_map_type"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, slice_group_map_type) - 625usize];
    ["Offset of field: _VAPictureParameterBufferH264::slice_group_change_rate_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferH264,
        slice_group_change_rate_minus1
    )
        - 626usize];
    ["Offset of field: _VAPictureParameterBufferH264::pic_init_qp_minus26"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, pic_init_qp_minus26) - 628usize];
    ["Offset of field: _VAPictureParameterBufferH264::pic_init_qs_minus26"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, pic_init_qs_minus26) - 629usize];
    ["Offset of field: _VAPictureParameterBufferH264::chroma_qp_index_offset"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, chroma_qp_index_offset) - 630usize];
    ["Offset of field: _VAPictureParameterBufferH264::second_chroma_qp_index_offset"][::std::mem::offset_of!(
        _VAPictureParameterBufferH264,
        second_chroma_qp_index_offset
    ) - 631usize];
    ["Offset of field: _VAPictureParameterBufferH264::pic_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, pic_fields) - 632usize];
    ["Offset of field: _VAPictureParameterBufferH264::frame_num"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, frame_num) - 636usize];
    ["Offset of field: _VAPictureParameterBufferH264::va_reserved"]
        [::std::mem::offset_of!(_VAPictureParameterBufferH264, va_reserved) - 640usize];
};
pub type VAPictureParameterBufferH264 = _VAPictureParameterBufferH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAIQMatrixBufferH264 {
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 2usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAIQMatrixBufferH264"][::std::mem::size_of::<_VAIQMatrixBufferH264>() - 240usize];
    ["Alignment of _VAIQMatrixBufferH264"]
        [::std::mem::align_of::<_VAIQMatrixBufferH264>() - 4usize];
    ["Offset of field: _VAIQMatrixBufferH264::ScalingList4x4"]
        [::std::mem::offset_of!(_VAIQMatrixBufferH264, ScalingList4x4) - 0usize];
    ["Offset of field: _VAIQMatrixBufferH264::ScalingList8x8"]
        [::std::mem::offset_of!(_VAIQMatrixBufferH264, ScalingList8x8) - 96usize];
    ["Offset of field: _VAIQMatrixBufferH264::va_reserved"]
        [::std::mem::offset_of!(_VAIQMatrixBufferH264, va_reserved) - 224usize];
};
pub type VAIQMatrixBufferH264 = _VAIQMatrixBufferH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferH264 {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub slice_data_bit_offset: u16,
    pub first_mb_in_slice: u16,
    pub slice_type: u8,
    pub direct_spatial_mv_pred_flag: u8,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub cabac_init_idc: u8,
    pub slice_qp_delta: i8,
    pub disable_deblocking_filter_idc: u8,
    pub slice_alpha_c0_offset_div2: i8,
    pub slice_beta_offset_div2: i8,
    pub RefPicList0: [VAPictureH264; 32usize],
    pub RefPicList1: [VAPictureH264; 32usize],
    pub luma_log2_weight_denom: u8,
    pub chroma_log2_weight_denom: u8,
    pub luma_weight_l0_flag: u8,
    pub luma_weight_l0: [i16; 32usize],
    pub luma_offset_l0: [i16; 32usize],
    pub chroma_weight_l0_flag: u8,
    pub chroma_weight_l0: [[i16; 2usize]; 32usize],
    pub chroma_offset_l0: [[i16; 2usize]; 32usize],
    pub luma_weight_l1_flag: u8,
    pub luma_weight_l1: [i16; 32usize],
    pub luma_offset_l1: [i16; 32usize],
    pub chroma_weight_l1_flag: u8,
    pub chroma_weight_l1: [[i16; 2usize]; 32usize],
    pub chroma_offset_l1: [[i16; 2usize]; 32usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferH264"]
        [::std::mem::size_of::<_VASliceParameterBufferH264>() - 3128usize];
    ["Alignment of _VASliceParameterBufferH264"]
        [::std::mem::align_of::<_VASliceParameterBufferH264>() - 4usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_data_bit_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_data_bit_offset) - 12usize];
    ["Offset of field: _VASliceParameterBufferH264::first_mb_in_slice"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, first_mb_in_slice) - 14usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_type"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_type) - 16usize];
    ["Offset of field: _VASliceParameterBufferH264::direct_spatial_mv_pred_flag"][::std::mem::offset_of!(
        _VASliceParameterBufferH264,
        direct_spatial_mv_pred_flag
    ) - 17usize];
    ["Offset of field: _VASliceParameterBufferH264::num_ref_idx_l0_active_minus1"][::std::mem::offset_of!(
        _VASliceParameterBufferH264,
        num_ref_idx_l0_active_minus1
    ) - 18usize];
    ["Offset of field: _VASliceParameterBufferH264::num_ref_idx_l1_active_minus1"][::std::mem::offset_of!(
        _VASliceParameterBufferH264,
        num_ref_idx_l1_active_minus1
    ) - 19usize];
    ["Offset of field: _VASliceParameterBufferH264::cabac_init_idc"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, cabac_init_idc) - 20usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_qp_delta"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_qp_delta) - 21usize];
    ["Offset of field: _VASliceParameterBufferH264::disable_deblocking_filter_idc"][::std::mem::offset_of!(
        _VASliceParameterBufferH264,
        disable_deblocking_filter_idc
    ) - 22usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_alpha_c0_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_alpha_c0_offset_div2) - 23usize];
    ["Offset of field: _VASliceParameterBufferH264::slice_beta_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, slice_beta_offset_div2) - 24usize];
    ["Offset of field: _VASliceParameterBufferH264::RefPicList0"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, RefPicList0) - 28usize];
    ["Offset of field: _VASliceParameterBufferH264::RefPicList1"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, RefPicList1) - 1180usize];
    ["Offset of field: _VASliceParameterBufferH264::luma_log2_weight_denom"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, luma_log2_weight_denom) - 2332usize];
    ["Offset of field: _VASliceParameterBufferH264::chroma_log2_weight_denom"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, chroma_log2_weight_denom) - 2333usize];
    ["Offset of field: _VASliceParameterBufferH264::luma_weight_l0_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, luma_weight_l0_flag) - 2334usize];
    ["Offset of field: _VASliceParameterBufferH264::luma_weight_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, luma_weight_l0) - 2336usize];
    ["Offset of field: _VASliceParameterBufferH264::luma_offset_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, luma_offset_l0) - 2400usize];
    ["Offset of field: _VASliceParameterBufferH264::chroma_weight_l0_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, chroma_weight_l0_flag) - 2464usize];
    ["Offset of field: _VASliceParameterBufferH264::chroma_weight_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, chroma_weight_l0) - 2466usize];
    ["Offset of field: _VASliceParameterBufferH264::chroma_offset_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, chroma_offset_l0) - 2594usize];
    ["Offset of field: _VASliceParameterBufferH264::luma_weight_l1_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, luma_weight_l1_flag) - 2722usize];
    ["Offset of field: _VASliceParameterBufferH264::luma_weight_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, luma_weight_l1) - 2724usize];
    ["Offset of field: _VASliceParameterBufferH264::luma_offset_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, luma_offset_l1) - 2788usize];
    ["Offset of field: _VASliceParameterBufferH264::chroma_weight_l1_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, chroma_weight_l1_flag) - 2852usize];
    ["Offset of field: _VASliceParameterBufferH264::chroma_weight_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, chroma_weight_l1) - 2854usize];
    ["Offset of field: _VASliceParameterBufferH264::chroma_offset_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, chroma_offset_l1) - 2982usize];
    ["Offset of field: _VASliceParameterBufferH264::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferH264, va_reserved) - 3112usize];
};
pub type VASliceParameterBufferH264 = _VASliceParameterBufferH264;
pub const VAEncPictureTypeIntra: VAEncPictureType = 0;
pub const VAEncPictureTypePredictive: VAEncPictureType = 1;
pub const VAEncPictureTypeBidirectional: VAEncPictureType = 2;
pub type VAEncPictureType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSliceParameterBuffer {
    pub start_row_number: u32,
    pub slice_height: u32,
    pub slice_flags: _VAEncSliceParameterBuffer__bindgen_ty_1,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSliceParameterBuffer__bindgen_ty_1 {
    pub bits: _VAEncSliceParameterBuffer__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSliceParameterBuffer__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBuffer__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSliceParameterBuffer__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncSliceParameterBuffer__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSliceParameterBuffer__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _VAEncSliceParameterBuffer__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn is_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_deblocking_filter_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_disable_deblocking_filter_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn uses_long_term_ref(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uses_long_term_ref(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_long_term_ref(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_long_term_ref(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_intra: u32,
        disable_deblocking_filter_idc: u32,
        uses_long_term_ref: u32,
        is_long_term_ref: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_intra: u32 = unsafe { ::std::mem::transmute(is_intra) };
            is_intra as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let disable_deblocking_filter_idc: u32 =
                unsafe { ::std::mem::transmute(disable_deblocking_filter_idc) };
            disable_deblocking_filter_idc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let uses_long_term_ref: u32 = unsafe { ::std::mem::transmute(uses_long_term_ref) };
            uses_long_term_ref as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_long_term_ref: u32 = unsafe { ::std::mem::transmute(is_long_term_ref) };
            is_long_term_ref as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBuffer__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSliceParameterBuffer__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncSliceParameterBuffer__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSliceParameterBuffer__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncSliceParameterBuffer__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSliceParameterBuffer__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSliceParameterBuffer__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSliceParameterBuffer__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBuffer"]
        [::std::mem::size_of::<_VAEncSliceParameterBuffer>() - 28usize];
    ["Alignment of _VAEncSliceParameterBuffer"]
        [::std::mem::align_of::<_VAEncSliceParameterBuffer>() - 4usize];
    ["Offset of field: _VAEncSliceParameterBuffer::start_row_number"]
        [::std::mem::offset_of!(_VAEncSliceParameterBuffer, start_row_number) - 0usize];
    ["Offset of field: _VAEncSliceParameterBuffer::slice_height"]
        [::std::mem::offset_of!(_VAEncSliceParameterBuffer, slice_height) - 4usize];
    ["Offset of field: _VAEncSliceParameterBuffer::slice_flags"]
        [::std::mem::offset_of!(_VAEncSliceParameterBuffer, slice_flags) - 8usize];
    ["Offset of field: _VAEncSliceParameterBuffer::va_reserved"]
        [::std::mem::offset_of!(_VAEncSliceParameterBuffer, va_reserved) - 12usize];
};
pub type VAEncSliceParameterBuffer = _VAEncSliceParameterBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferH263 {
    pub intra_period: u32,
    pub bits_per_second: u32,
    pub frame_rate: u32,
    pub initial_qp: u32,
    pub min_qp: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferH263"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferH263>() - 36usize];
    ["Alignment of _VAEncSequenceParameterBufferH263"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferH263>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferH263::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH263, intra_period) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferH263::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH263, bits_per_second) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferH263::frame_rate"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH263, frame_rate) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferH263::initial_qp"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH263, initial_qp) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferH263::min_qp"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH263, min_qp) - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferH263::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH263, va_reserved) - 20usize];
};
pub type VAEncSequenceParameterBufferH263 = _VAEncSequenceParameterBufferH263;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferH263 {
    pub reference_picture: VASurfaceID,
    pub reconstructed_picture: VASurfaceID,
    pub coded_buf: VABufferID,
    pub picture_width: u16,
    pub picture_height: u16,
    pub picture_type: VAEncPictureType,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferH263"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferH263>() - 36usize];
    ["Alignment of _VAEncPictureParameterBufferH263"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferH263>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferH263::reference_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH263, reference_picture) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferH263::reconstructed_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH263, reconstructed_picture) - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferH263::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH263, coded_buf) - 8usize];
    ["Offset of field: _VAEncPictureParameterBufferH263::picture_width"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH263, picture_width) - 12usize];
    ["Offset of field: _VAEncPictureParameterBufferH263::picture_height"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH263, picture_height) - 14usize];
    ["Offset of field: _VAEncPictureParameterBufferH263::picture_type"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH263, picture_type) - 16usize];
    ["Offset of field: _VAEncPictureParameterBufferH263::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH263, va_reserved) - 20usize];
};
pub type VAEncPictureParameterBufferH263 = _VAEncPictureParameterBufferH263;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferMPEG4 {
    pub profile_and_level_indication: u8,
    pub intra_period: u32,
    pub video_object_layer_width: u32,
    pub video_object_layer_height: u32,
    pub vop_time_increment_resolution: u32,
    pub fixed_vop_rate: u32,
    pub fixed_vop_time_increment: u32,
    pub bits_per_second: u32,
    pub frame_rate: u32,
    pub initial_qp: u32,
    pub min_qp: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferMPEG4"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferMPEG4>() - 60usize];
    ["Alignment of _VAEncSequenceParameterBufferMPEG4"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferMPEG4>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::profile_and_level_indication"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferMPEG4,
        profile_and_level_indication
    )
        - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG4, intra_period) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::video_object_layer_width"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferMPEG4,
        video_object_layer_width
    ) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::video_object_layer_height"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferMPEG4,
        video_object_layer_height
    ) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::vop_time_increment_resolution"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferMPEG4,
        vop_time_increment_resolution
    )
        - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::fixed_vop_rate"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG4, fixed_vop_rate) - 20usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::fixed_vop_time_increment"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferMPEG4,
        fixed_vop_time_increment
    ) - 24usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG4, bits_per_second) - 28usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::frame_rate"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG4, frame_rate) - 32usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::initial_qp"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG4, initial_qp) - 36usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::min_qp"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG4, min_qp) - 40usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG4::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG4, va_reserved) - 44usize];
};
pub type VAEncSequenceParameterBufferMPEG4 = _VAEncSequenceParameterBufferMPEG4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferMPEG4 {
    pub reference_picture: VASurfaceID,
    pub reconstructed_picture: VASurfaceID,
    pub coded_buf: VABufferID,
    pub picture_width: u16,
    pub picture_height: u16,
    pub modulo_time_base: u32,
    pub vop_time_increment: u32,
    pub picture_type: VAEncPictureType,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferMPEG4"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferMPEG4>() - 44usize];
    ["Alignment of _VAEncPictureParameterBufferMPEG4"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferMPEG4>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::reference_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, reference_picture) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::reconstructed_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, reconstructed_picture) - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, coded_buf) - 8usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::picture_width"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, picture_width) - 12usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::picture_height"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, picture_height) - 14usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::modulo_time_base"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, modulo_time_base) - 16usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::vop_time_increment"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, vop_time_increment) - 20usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::picture_type"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, picture_type) - 24usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG4::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG4, va_reserved) - 28usize];
};
pub type VAEncPictureParameterBufferMPEG4 = _VAEncPictureParameterBufferMPEG4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VACodedBufferSegment {
    pub size: u32,
    pub bit_offset: u32,
    pub status: u32,
    pub reserved: u32,
    pub buf: *mut ::std::os::raw::c_void,
    pub next: *mut ::std::os::raw::c_void,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VACodedBufferSegment"][::std::mem::size_of::<_VACodedBufferSegment>() - 48usize];
    ["Alignment of _VACodedBufferSegment"]
        [::std::mem::align_of::<_VACodedBufferSegment>() - 8usize];
    ["Offset of field: _VACodedBufferSegment::size"]
        [::std::mem::offset_of!(_VACodedBufferSegment, size) - 0usize];
    ["Offset of field: _VACodedBufferSegment::bit_offset"]
        [::std::mem::offset_of!(_VACodedBufferSegment, bit_offset) - 4usize];
    ["Offset of field: _VACodedBufferSegment::status"]
        [::std::mem::offset_of!(_VACodedBufferSegment, status) - 8usize];
    ["Offset of field: _VACodedBufferSegment::reserved"]
        [::std::mem::offset_of!(_VACodedBufferSegment, reserved) - 12usize];
    ["Offset of field: _VACodedBufferSegment::buf"]
        [::std::mem::offset_of!(_VACodedBufferSegment, buf) - 16usize];
    ["Offset of field: _VACodedBufferSegment::next"]
        [::std::mem::offset_of!(_VACodedBufferSegment, next) - 24usize];
    ["Offset of field: _VACodedBufferSegment::va_reserved"]
        [::std::mem::offset_of!(_VACodedBufferSegment, va_reserved) - 32usize];
};
pub type VACodedBufferSegment = _VACodedBufferSegment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VABufferInfo {
    pub handle: usize,
    pub type_: u32,
    pub mem_type: u32,
    pub mem_size: usize,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VABufferInfo"][::std::mem::size_of::<VABufferInfo>() - 40usize];
    ["Alignment of VABufferInfo"][::std::mem::align_of::<VABufferInfo>() - 8usize];
    ["Offset of field: VABufferInfo::handle"]
        [::std::mem::offset_of!(VABufferInfo, handle) - 0usize];
    ["Offset of field: VABufferInfo::type_"][::std::mem::offset_of!(VABufferInfo, type_) - 8usize];
    ["Offset of field: VABufferInfo::mem_type"]
        [::std::mem::offset_of!(VABufferInfo, mem_type) - 12usize];
    ["Offset of field: VABufferInfo::mem_size"]
        [::std::mem::offset_of!(VABufferInfo, mem_size) - 16usize];
    ["Offset of field: VABufferInfo::va_reserved"]
        [::std::mem::offset_of!(VABufferInfo, va_reserved) - 24usize];
};
pub const VASurfaceRendering: VASurfaceStatus = 1;
pub const VASurfaceDisplaying: VASurfaceStatus = 2;
pub const VASurfaceReady: VASurfaceStatus = 4;
pub const VASurfaceSkipped: VASurfaceStatus = 8;
pub type VASurfaceStatus = ::std::os::raw::c_uint;
pub const VADecodeSliceMissing: VADecodeErrorType = 0;
pub const VADecodeMBError: VADecodeErrorType = 1;
pub const VADecodeReset: VADecodeErrorType = 2;
pub type VADecodeErrorType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASurfaceDecodeMBErrors {
    pub status: i32,
    pub start_mb: u32,
    pub end_mb: u32,
    pub decode_error_type: VADecodeErrorType,
    pub num_mb: u32,
    pub va_reserved: [u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASurfaceDecodeMBErrors"]
        [::std::mem::size_of::<_VASurfaceDecodeMBErrors>() - 32usize];
    ["Alignment of _VASurfaceDecodeMBErrors"]
        [::std::mem::align_of::<_VASurfaceDecodeMBErrors>() - 4usize];
    ["Offset of field: _VASurfaceDecodeMBErrors::status"]
        [::std::mem::offset_of!(_VASurfaceDecodeMBErrors, status) - 0usize];
    ["Offset of field: _VASurfaceDecodeMBErrors::start_mb"]
        [::std::mem::offset_of!(_VASurfaceDecodeMBErrors, start_mb) - 4usize];
    ["Offset of field: _VASurfaceDecodeMBErrors::end_mb"]
        [::std::mem::offset_of!(_VASurfaceDecodeMBErrors, end_mb) - 8usize];
    ["Offset of field: _VASurfaceDecodeMBErrors::decode_error_type"]
        [::std::mem::offset_of!(_VASurfaceDecodeMBErrors, decode_error_type) - 12usize];
    ["Offset of field: _VASurfaceDecodeMBErrors::num_mb"]
        [::std::mem::offset_of!(_VASurfaceDecodeMBErrors, num_mb) - 16usize];
    ["Offset of field: _VASurfaceDecodeMBErrors::va_reserved"]
        [::std::mem::offset_of!(_VASurfaceDecodeMBErrors, va_reserved) - 20usize];
};
pub type VASurfaceDecodeMBErrors = _VASurfaceDecodeMBErrors;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAImageFormat {
    pub fourcc: u32,
    pub byte_order: u32,
    pub bits_per_pixel: u32,
    pub depth: u32,
    pub red_mask: u32,
    pub green_mask: u32,
    pub blue_mask: u32,
    pub alpha_mask: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAImageFormat"][::std::mem::size_of::<_VAImageFormat>() - 48usize];
    ["Alignment of _VAImageFormat"][::std::mem::align_of::<_VAImageFormat>() - 4usize];
    ["Offset of field: _VAImageFormat::fourcc"]
        [::std::mem::offset_of!(_VAImageFormat, fourcc) - 0usize];
    ["Offset of field: _VAImageFormat::byte_order"]
        [::std::mem::offset_of!(_VAImageFormat, byte_order) - 4usize];
    ["Offset of field: _VAImageFormat::bits_per_pixel"]
        [::std::mem::offset_of!(_VAImageFormat, bits_per_pixel) - 8usize];
    ["Offset of field: _VAImageFormat::depth"]
        [::std::mem::offset_of!(_VAImageFormat, depth) - 12usize];
    ["Offset of field: _VAImageFormat::red_mask"]
        [::std::mem::offset_of!(_VAImageFormat, red_mask) - 16usize];
    ["Offset of field: _VAImageFormat::green_mask"]
        [::std::mem::offset_of!(_VAImageFormat, green_mask) - 20usize];
    ["Offset of field: _VAImageFormat::blue_mask"]
        [::std::mem::offset_of!(_VAImageFormat, blue_mask) - 24usize];
    ["Offset of field: _VAImageFormat::alpha_mask"]
        [::std::mem::offset_of!(_VAImageFormat, alpha_mask) - 28usize];
    ["Offset of field: _VAImageFormat::va_reserved"]
        [::std::mem::offset_of!(_VAImageFormat, va_reserved) - 32usize];
};
pub type VAImageFormat = _VAImageFormat;
pub type VAImageID = VAGenericID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAImage {
    pub image_id: VAImageID,
    pub format: VAImageFormat,
    pub buf: VABufferID,
    pub width: u16,
    pub height: u16,
    pub data_size: u32,
    pub num_planes: u32,
    pub pitches: [u32; 3usize],
    pub offsets: [u32; 3usize],
    pub num_palette_entries: i32,
    pub entry_bytes: i32,
    pub component_order: [i8; 4usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAImage"][::std::mem::size_of::<_VAImage>() - 120usize];
    ["Alignment of _VAImage"][::std::mem::align_of::<_VAImage>() - 4usize];
    ["Offset of field: _VAImage::image_id"][::std::mem::offset_of!(_VAImage, image_id) - 0usize];
    ["Offset of field: _VAImage::format"][::std::mem::offset_of!(_VAImage, format) - 4usize];
    ["Offset of field: _VAImage::buf"][::std::mem::offset_of!(_VAImage, buf) - 52usize];
    ["Offset of field: _VAImage::width"][::std::mem::offset_of!(_VAImage, width) - 56usize];
    ["Offset of field: _VAImage::height"][::std::mem::offset_of!(_VAImage, height) - 58usize];
    ["Offset of field: _VAImage::data_size"][::std::mem::offset_of!(_VAImage, data_size) - 60usize];
    ["Offset of field: _VAImage::num_planes"]
        [::std::mem::offset_of!(_VAImage, num_planes) - 64usize];
    ["Offset of field: _VAImage::pitches"][::std::mem::offset_of!(_VAImage, pitches) - 68usize];
    ["Offset of field: _VAImage::offsets"][::std::mem::offset_of!(_VAImage, offsets) - 80usize];
    ["Offset of field: _VAImage::num_palette_entries"]
        [::std::mem::offset_of!(_VAImage, num_palette_entries) - 92usize];
    ["Offset of field: _VAImage::entry_bytes"]
        [::std::mem::offset_of!(_VAImage, entry_bytes) - 96usize];
    ["Offset of field: _VAImage::component_order"]
        [::std::mem::offset_of!(_VAImage, component_order) - 100usize];
    ["Offset of field: _VAImage::va_reserved"]
        [::std::mem::offset_of!(_VAImage, va_reserved) - 104usize];
};
pub type VAImage = _VAImage;
pub type VASubpictureID = VAGenericID;
pub const VADISPLAYATTRIB_BLE_OFF: VADisplayAttribBLEMode = 0;
pub const VADISPLAYATTRIB_BLE_LOW: VADisplayAttribBLEMode = 1;
pub const VADISPLAYATTRIB_BLE_MEDIUM: VADisplayAttribBLEMode = 2;
pub const VADISPLAYATTRIB_BLE_HIGH: VADisplayAttribBLEMode = 3;
pub const VADISPLAYATTRIB_BLE_NONE: VADisplayAttribBLEMode = 4;
pub type VADisplayAttribBLEMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADisplayAttribValSubDevice {
    pub bits: _VADisplayAttribValSubDevice__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VADisplayAttribValSubDevice__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADisplayAttribValSubDevice__bindgen_ty_1"]
        [::std::mem::size_of::<_VADisplayAttribValSubDevice__bindgen_ty_1>() - 4usize];
    ["Alignment of _VADisplayAttribValSubDevice__bindgen_ty_1"]
        [::std::mem::align_of::<_VADisplayAttribValSubDevice__bindgen_ty_1>() - 4usize];
};
impl _VADisplayAttribValSubDevice__bindgen_ty_1 {
    #[inline]
    pub fn current_sub_device(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_current_sub_device(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_device_count(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_sub_device_count(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_device_mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_sub_device_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        current_sub_device: u32,
        sub_device_count: u32,
        reserved: u32,
        sub_device_mask: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let current_sub_device: u32 = unsafe { ::std::mem::transmute(current_sub_device) };
            current_sub_device as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let sub_device_count: u32 = unsafe { ::std::mem::transmute(sub_device_count) };
            sub_device_count as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let sub_device_mask: u32 = unsafe { ::std::mem::transmute(sub_device_mask) };
            sub_device_mask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADisplayAttribValSubDevice"]
        [::std::mem::size_of::<_VADisplayAttribValSubDevice>() - 4usize];
    ["Alignment of _VADisplayAttribValSubDevice"]
        [::std::mem::align_of::<_VADisplayAttribValSubDevice>() - 4usize];
    ["Offset of field: _VADisplayAttribValSubDevice::bits"]
        [::std::mem::offset_of!(_VADisplayAttribValSubDevice, bits) - 0usize];
    ["Offset of field: _VADisplayAttribValSubDevice::value"]
        [::std::mem::offset_of!(_VADisplayAttribValSubDevice, value) - 0usize];
};
pub type VADisplayAttribValSubDevice = _VADisplayAttribValSubDevice;
pub const VADisplayAttribBrightness: VADisplayAttribType = 0;
pub const VADisplayAttribContrast: VADisplayAttribType = 1;
pub const VADisplayAttribHue: VADisplayAttribType = 2;
pub const VADisplayAttribSaturation: VADisplayAttribType = 3;
pub const VADisplayAttribBackgroundColor: VADisplayAttribType = 4;
pub const VADisplayAttribDirectSurface: VADisplayAttribType = 5;
pub const VADisplayAttribRotation: VADisplayAttribType = 6;
pub const VADisplayAttribOutofLoopDeblock: VADisplayAttribType = 7;
pub const VADisplayAttribBLEBlackMode: VADisplayAttribType = 8;
pub const VADisplayAttribBLEWhiteMode: VADisplayAttribType = 9;
pub const VADisplayAttribBlueStretch: VADisplayAttribType = 10;
pub const VADisplayAttribSkinColorCorrection: VADisplayAttribType = 11;
pub const VADisplayAttribCSCMatrix: VADisplayAttribType = 12;
pub const VADisplayAttribBlendColor: VADisplayAttribType = 13;
pub const VADisplayAttribOverlayAutoPaintColorKey: VADisplayAttribType = 14;
pub const VADisplayAttribOverlayColorKey: VADisplayAttribType = 15;
pub const VADisplayAttribRenderMode: VADisplayAttribType = 16;
pub const VADisplayAttribRenderDevice: VADisplayAttribType = 17;
pub const VADisplayAttribRenderRect: VADisplayAttribType = 18;
pub const VADisplayAttribSubDevice: VADisplayAttribType = 19;
pub const VADisplayAttribCopy: VADisplayAttribType = 20;
pub const VADisplayPCIID: VADisplayAttribType = 21;
pub type VADisplayAttribType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VADisplayAttribute {
    pub type_: VADisplayAttribType,
    pub min_value: i32,
    pub max_value: i32,
    pub value: i32,
    pub flags: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADisplayAttribute"][::std::mem::size_of::<_VADisplayAttribute>() - 36usize];
    ["Alignment of _VADisplayAttribute"][::std::mem::align_of::<_VADisplayAttribute>() - 4usize];
    ["Offset of field: _VADisplayAttribute::type_"]
        [::std::mem::offset_of!(_VADisplayAttribute, type_) - 0usize];
    ["Offset of field: _VADisplayAttribute::min_value"]
        [::std::mem::offset_of!(_VADisplayAttribute, min_value) - 4usize];
    ["Offset of field: _VADisplayAttribute::max_value"]
        [::std::mem::offset_of!(_VADisplayAttribute, max_value) - 8usize];
    ["Offset of field: _VADisplayAttribute::value"]
        [::std::mem::offset_of!(_VADisplayAttribute, value) - 12usize];
    ["Offset of field: _VADisplayAttribute::flags"]
        [::std::mem::offset_of!(_VADisplayAttribute, flags) - 16usize];
    ["Offset of field: _VADisplayAttribute::va_reserved"]
        [::std::mem::offset_of!(_VADisplayAttribute, va_reserved) - 20usize];
};
pub type VADisplayAttribute = _VADisplayAttribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureHEVC {
    pub picture_id: VASurfaceID,
    pub pic_order_cnt: i32,
    pub flags: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureHEVC"][::std::mem::size_of::<_VAPictureHEVC>() - 28usize];
    ["Alignment of _VAPictureHEVC"][::std::mem::align_of::<_VAPictureHEVC>() - 4usize];
    ["Offset of field: _VAPictureHEVC::picture_id"]
        [::std::mem::offset_of!(_VAPictureHEVC, picture_id) - 0usize];
    ["Offset of field: _VAPictureHEVC::pic_order_cnt"]
        [::std::mem::offset_of!(_VAPictureHEVC, pic_order_cnt) - 4usize];
    ["Offset of field: _VAPictureHEVC::flags"]
        [::std::mem::offset_of!(_VAPictureHEVC, flags) - 8usize];
    ["Offset of field: _VAPictureHEVC::va_reserved"]
        [::std::mem::offset_of!(_VAPictureHEVC, va_reserved) - 12usize];
};
pub type VAPictureHEVC = _VAPictureHEVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureVVC {
    pub picture_id: VASurfaceID,
    pub pic_order_cnt: i32,
    pub flags: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureVVC"][::std::mem::size_of::<_VAPictureVVC>() - 28usize];
    ["Alignment of _VAPictureVVC"][::std::mem::align_of::<_VAPictureVVC>() - 4usize];
    ["Offset of field: _VAPictureVVC::picture_id"]
        [::std::mem::offset_of!(_VAPictureVVC, picture_id) - 0usize];
    ["Offset of field: _VAPictureVVC::pic_order_cnt"]
        [::std::mem::offset_of!(_VAPictureVVC, pic_order_cnt) - 4usize];
    ["Offset of field: _VAPictureVVC::flags"]
        [::std::mem::offset_of!(_VAPictureVVC, flags) - 8usize];
    ["Offset of field: _VAPictureVVC::va_reserved"]
        [::std::mem::offset_of!(_VAPictureVVC, va_reserved) - 12usize];
};
pub type VAPictureVVC = _VAPictureVVC;
pub const VACopyObjectSurface: VACopyObjectType = 0;
pub const VACopyObjectBuffer: VACopyObjectType = 1;
pub type VACopyObjectType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VACopyObject {
    pub obj_type: VACopyObjectType,
    pub object: _VACopyObject__bindgen_ty_1,
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VACopyObject__bindgen_ty_1 {
    pub surface_id: VASurfaceID,
    pub buffer_id: VABufferID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VACopyObject__bindgen_ty_1"]
        [::std::mem::size_of::<_VACopyObject__bindgen_ty_1>() - 4usize];
    ["Alignment of _VACopyObject__bindgen_ty_1"]
        [::std::mem::align_of::<_VACopyObject__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VACopyObject__bindgen_ty_1::surface_id"]
        [::std::mem::offset_of!(_VACopyObject__bindgen_ty_1, surface_id) - 0usize];
    ["Offset of field: _VACopyObject__bindgen_ty_1::buffer_id"]
        [::std::mem::offset_of!(_VACopyObject__bindgen_ty_1, buffer_id) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VACopyObject"][::std::mem::size_of::<_VACopyObject>() - 40usize];
    ["Alignment of _VACopyObject"][::std::mem::align_of::<_VACopyObject>() - 4usize];
    ["Offset of field: _VACopyObject::obj_type"]
        [::std::mem::offset_of!(_VACopyObject, obj_type) - 0usize];
    ["Offset of field: _VACopyObject::object"]
        [::std::mem::offset_of!(_VACopyObject, object) - 4usize];
    ["Offset of field: _VACopyObject::va_reserved"]
        [::std::mem::offset_of!(_VACopyObject, va_reserved) - 8usize];
};
pub type VACopyObject = _VACopyObject;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VACopyOption {
    pub bits: _VACopyOption__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VACopyOption__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VACopyOption__bindgen_ty_1"]
        [::std::mem::size_of::<_VACopyOption__bindgen_ty_1>() - 4usize];
    ["Alignment of _VACopyOption__bindgen_ty_1"]
        [::std::mem::align_of::<_VACopyOption__bindgen_ty_1>() - 4usize];
};
impl _VACopyOption__bindgen_ty_1 {
    #[inline]
    pub fn va_copy_sync(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_va_copy_sync(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn va_copy_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_va_copy_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        va_copy_sync: u32,
        va_copy_mode: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let va_copy_sync: u32 = unsafe { ::std::mem::transmute(va_copy_sync) };
            va_copy_sync as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let va_copy_mode: u32 = unsafe { ::std::mem::transmute(va_copy_mode) };
            va_copy_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VACopyOption"][::std::mem::size_of::<_VACopyOption>() - 4usize];
    ["Alignment of _VACopyOption"][::std::mem::align_of::<_VACopyOption>() - 4usize];
    ["Offset of field: _VACopyOption::bits"][::std::mem::offset_of!(_VACopyOption, bits) - 0usize];
    ["Offset of field: _VACopyOption::value"]
        [::std::mem::offset_of!(_VACopyOption, value) - 0usize];
};
pub type VACopyOption = _VACopyOption;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferHEVC {
    pub CurrPic: VAPictureHEVC,
    pub ReferenceFrames: [VAPictureHEVC; 15usize],
    pub pic_width_in_luma_samples: u16,
    pub pic_height_in_luma_samples: u16,
    pub pic_fields: _VAPictureParameterBufferHEVC__bindgen_ty_1,
    pub sps_max_dec_pic_buffering_minus1: u8,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub pcm_sample_bit_depth_luma_minus1: u8,
    pub pcm_sample_bit_depth_chroma_minus1: u8,
    pub log2_min_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_luma_coding_block_size: u8,
    pub log2_min_transform_block_size_minus2: u8,
    pub log2_diff_max_min_transform_block_size: u8,
    pub log2_min_pcm_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_pcm_luma_coding_block_size: u8,
    pub max_transform_hierarchy_depth_intra: u8,
    pub max_transform_hierarchy_depth_inter: u8,
    pub init_qp_minus26: i8,
    pub diff_cu_qp_delta_depth: u8,
    pub pps_cb_qp_offset: i8,
    pub pps_cr_qp_offset: i8,
    pub log2_parallel_merge_level_minus2: u8,
    pub num_tile_columns_minus1: u8,
    pub num_tile_rows_minus1: u8,
    pub column_width_minus1: [u16; 19usize],
    pub row_height_minus1: [u16; 21usize],
    pub slice_parsing_fields: _VAPictureParameterBufferHEVC__bindgen_ty_2,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
    pub num_short_term_ref_pic_sets: u8,
    pub num_long_term_ref_pic_sps: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub pps_beta_offset_div2: i8,
    pub pps_tc_offset_div2: i8,
    pub num_extra_slice_header_bits: u8,
    pub st_rps_bits: u32,
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferHEVC__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn chroma_format_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_format_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scaling_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scaling_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_skip_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn amp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_amp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn strong_intra_smoothing_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_strong_intra_smoothing_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_data_hiding_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_data_hiding_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cu_qp_delta_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_qp_delta_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_bipred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_bipred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transquant_bypass_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transquant_bypass_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn entropy_coding_sync_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_sync_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_filter_across_tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_across_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm_loop_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_loop_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn NoPicReorderingFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NoPicReorderingFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn NoBiPredFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NoBiPredFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ReservedBits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedBits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chroma_format_idc: u32,
        separate_colour_plane_flag: u32,
        pcm_enabled_flag: u32,
        scaling_list_enabled_flag: u32,
        transform_skip_enabled_flag: u32,
        amp_enabled_flag: u32,
        strong_intra_smoothing_enabled_flag: u32,
        sign_data_hiding_enabled_flag: u32,
        constrained_intra_pred_flag: u32,
        cu_qp_delta_enabled_flag: u32,
        weighted_pred_flag: u32,
        weighted_bipred_flag: u32,
        transquant_bypass_enabled_flag: u32,
        tiles_enabled_flag: u32,
        entropy_coding_sync_enabled_flag: u32,
        pps_loop_filter_across_slices_enabled_flag: u32,
        loop_filter_across_tiles_enabled_flag: u32,
        pcm_loop_filter_disabled_flag: u32,
        NoPicReorderingFlag: u32,
        NoBiPredFlag: u32,
        ReservedBits: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let chroma_format_idc: u32 = unsafe { ::std::mem::transmute(chroma_format_idc) };
            chroma_format_idc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::std::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pcm_enabled_flag: u32 = unsafe { ::std::mem::transmute(pcm_enabled_flag) };
            pcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let scaling_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(scaling_list_enabled_flag) };
            scaling_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let transform_skip_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_enabled_flag) };
            transform_skip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let amp_enabled_flag: u32 = unsafe { ::std::mem::transmute(amp_enabled_flag) };
            amp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let strong_intra_smoothing_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(strong_intra_smoothing_enabled_flag) };
            strong_intra_smoothing_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let sign_data_hiding_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sign_data_hiding_enabled_flag) };
            sign_data_hiding_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let cu_qp_delta_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cu_qp_delta_enabled_flag) };
            cu_qp_delta_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let weighted_bipred_flag: u32 = unsafe { ::std::mem::transmute(weighted_bipred_flag) };
            weighted_bipred_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let transquant_bypass_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transquant_bypass_enabled_flag) };
            transquant_bypass_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tiles_enabled_flag: u32 = unsafe { ::std::mem::transmute(tiles_enabled_flag) };
            tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let entropy_coding_sync_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_sync_enabled_flag) };
            entropy_coding_sync_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let pps_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_loop_filter_across_slices_enabled_flag) };
            pps_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let loop_filter_across_tiles_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(loop_filter_across_tiles_enabled_flag) };
            loop_filter_across_tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let pcm_loop_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(pcm_loop_filter_disabled_flag) };
            pcm_loop_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let NoPicReorderingFlag: u32 = unsafe { ::std::mem::transmute(NoPicReorderingFlag) };
            NoPicReorderingFlag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let NoBiPredFlag: u32 = unsafe { ::std::mem::transmute(NoBiPredFlag) };
            NoBiPredFlag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let ReservedBits: u32 = unsafe { ::std::mem::transmute(ReservedBits) };
            ReservedBits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferHEVC__bindgen_ty_2 {
    pub bits: _VAPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn lists_modification_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lists_modification_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn long_term_ref_pics_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_term_ref_pics_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cabac_init_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn output_flag_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_output_flag_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dependent_slice_segments_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segments_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_slice_chroma_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_chroma_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sample_adaptive_offset_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sample_adaptive_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deblocking_filter_override_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_override_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_disable_deblocking_filter_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_disable_deblocking_filter_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_segment_header_extension_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_segment_header_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn RapPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_RapPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IntraPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IntraPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ReservedBits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedBits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lists_modification_present_flag: u32,
        long_term_ref_pics_present_flag: u32,
        sps_temporal_mvp_enabled_flag: u32,
        cabac_init_present_flag: u32,
        output_flag_present_flag: u32,
        dependent_slice_segments_enabled_flag: u32,
        pps_slice_chroma_qp_offsets_present_flag: u32,
        sample_adaptive_offset_enabled_flag: u32,
        deblocking_filter_override_enabled_flag: u32,
        pps_disable_deblocking_filter_flag: u32,
        slice_segment_header_extension_present_flag: u32,
        RapPicFlag: u32,
        IdrPicFlag: u32,
        IntraPicFlag: u32,
        ReservedBits: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let lists_modification_present_flag: u32 =
                unsafe { ::std::mem::transmute(lists_modification_present_flag) };
            lists_modification_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let long_term_ref_pics_present_flag: u32 =
                unsafe { ::std::mem::transmute(long_term_ref_pics_present_flag) };
            long_term_ref_pics_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sps_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sps_temporal_mvp_enabled_flag) };
            sps_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cabac_init_present_flag: u32 =
                unsafe { ::std::mem::transmute(cabac_init_present_flag) };
            cabac_init_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let output_flag_present_flag: u32 =
                unsafe { ::std::mem::transmute(output_flag_present_flag) };
            output_flag_present_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dependent_slice_segments_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(dependent_slice_segments_enabled_flag) };
            dependent_slice_segments_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pps_slice_chroma_qp_offsets_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_slice_chroma_qp_offsets_present_flag) };
            pps_slice_chroma_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sample_adaptive_offset_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sample_adaptive_offset_enabled_flag) };
            sample_adaptive_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let deblocking_filter_override_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_override_enabled_flag) };
            deblocking_filter_override_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let pps_disable_deblocking_filter_flag: u32 =
                unsafe { ::std::mem::transmute(pps_disable_deblocking_filter_flag) };
            pps_disable_deblocking_filter_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let slice_segment_header_extension_present_flag: u32 =
                unsafe { ::std::mem::transmute(slice_segment_header_extension_present_flag) };
            slice_segment_header_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let RapPicFlag: u32 = unsafe { ::std::mem::transmute(RapPicFlag) };
            RapPicFlag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::std::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let IntraPicFlag: u32 = unsafe { ::std::mem::transmute(IntraPicFlag) };
            IntraPicFlag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let ReservedBits: u32 = unsafe { ::std::mem::transmute(ReservedBits) };
            ReservedBits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVC__bindgen_ty_2"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVC__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVC__bindgen_ty_2"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVC__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVC__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVC__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVC"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVC>() - 604usize];
    ["Alignment of _VAPictureParameterBufferHEVC"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVC>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::CurrPic"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, CurrPic) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::ReferenceFrames"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, ReferenceFrames) - 28usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pic_width_in_luma_samples"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        pic_width_in_luma_samples
    ) - 448usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pic_height_in_luma_samples"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        pic_height_in_luma_samples
    ) - 450usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pic_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, pic_fields) - 452usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::sps_max_dec_pic_buffering_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        sps_max_dec_pic_buffering_minus1
    )
        - 456usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::bit_depth_luma_minus8"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, bit_depth_luma_minus8) - 457usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::bit_depth_chroma_minus8"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, bit_depth_chroma_minus8) - 458usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pcm_sample_bit_depth_luma_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        pcm_sample_bit_depth_luma_minus1
    )
        - 459usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pcm_sample_bit_depth_chroma_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        pcm_sample_bit_depth_chroma_minus1
    )
        - 460usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_min_luma_coding_block_size_minus3"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        log2_min_luma_coding_block_size_minus3
    )
        - 461usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_diff_max_min_luma_coding_block_size"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        log2_diff_max_min_luma_coding_block_size
    )
        - 462usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_min_transform_block_size_minus2"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        log2_min_transform_block_size_minus2
    )
        - 463usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_diff_max_min_transform_block_size"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        log2_diff_max_min_transform_block_size
    )
        - 464usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_min_pcm_luma_coding_block_size_minus3"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferHEVC , log2_min_pcm_luma_coding_block_size_minus3) - 465usize] ;
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_diff_max_min_pcm_luma_coding_block_size"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferHEVC , log2_diff_max_min_pcm_luma_coding_block_size) - 466usize] ;
    ["Offset of field: _VAPictureParameterBufferHEVC::max_transform_hierarchy_depth_intra"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        max_transform_hierarchy_depth_intra
    )
        - 467usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::max_transform_hierarchy_depth_inter"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        max_transform_hierarchy_depth_inter
    )
        - 468usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::init_qp_minus26"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, init_qp_minus26) - 469usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::diff_cu_qp_delta_depth"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, diff_cu_qp_delta_depth) - 470usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pps_cb_qp_offset"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, pps_cb_qp_offset) - 471usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pps_cr_qp_offset"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, pps_cr_qp_offset) - 472usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_parallel_merge_level_minus2"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        log2_parallel_merge_level_minus2
    )
        - 473usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::num_tile_columns_minus1"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, num_tile_columns_minus1) - 474usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::num_tile_rows_minus1"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, num_tile_rows_minus1) - 475usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::column_width_minus1"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, column_width_minus1) - 476usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::row_height_minus1"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, row_height_minus1) - 514usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::slice_parsing_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, slice_parsing_fields) - 556usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::log2_max_pic_order_cnt_lsb_minus4"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        log2_max_pic_order_cnt_lsb_minus4
    )
        - 560usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::num_short_term_ref_pic_sets"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        num_short_term_ref_pic_sets
    ) - 561usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::num_long_term_ref_pic_sps"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        num_long_term_ref_pic_sps
    ) - 562usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::num_ref_idx_l0_default_active_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        num_ref_idx_l0_default_active_minus1
    )
        - 563usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::num_ref_idx_l1_default_active_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        num_ref_idx_l1_default_active_minus1
    )
        - 564usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pps_beta_offset_div2"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, pps_beta_offset_div2) - 565usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::pps_tc_offset_div2"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, pps_tc_offset_div2) - 566usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::num_extra_slice_header_bits"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVC,
        num_extra_slice_header_bits
    ) - 567usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::st_rps_bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, st_rps_bits) - 568usize];
    ["Offset of field: _VAPictureParameterBufferHEVC::va_reserved"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVC, va_reserved) - 572usize];
};
pub type VAPictureParameterBufferHEVC = _VAPictureParameterBufferHEVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferHEVCRext {
    pub range_extension_pic_fields: _VAPictureParameterBufferHEVCRext__bindgen_ty_1,
    pub diff_cu_chroma_qp_offset_depth: u8,
    pub chroma_qp_offset_list_len_minus1: u8,
    pub log2_sao_offset_scale_luma: u8,
    pub log2_sao_offset_scale_chroma: u8,
    pub log2_max_transform_skip_block_size_minus2: u8,
    pub cb_qp_offset_list: [i8; 6usize],
    pub cr_qp_offset_list: [i8; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferHEVCRext__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAPictureParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn transform_skip_rotation_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_rotation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_skip_context_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_context_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn implicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_implicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn explicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_explicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn extended_precision_processing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extended_precision_processing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_smoothing_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_smoothing_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn high_precision_offsets_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_high_precision_offsets_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn persistent_rice_adaptation_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_persistent_rice_adaptation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cabac_bypass_alignment_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_bypass_alignment_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cross_component_prediction_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cross_component_prediction_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_qp_offset_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_qp_offset_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        transform_skip_rotation_enabled_flag: u32,
        transform_skip_context_enabled_flag: u32,
        implicit_rdpcm_enabled_flag: u32,
        explicit_rdpcm_enabled_flag: u32,
        extended_precision_processing_flag: u32,
        intra_smoothing_disabled_flag: u32,
        high_precision_offsets_enabled_flag: u32,
        persistent_rice_adaptation_enabled_flag: u32,
        cabac_bypass_alignment_enabled_flag: u32,
        cross_component_prediction_enabled_flag: u32,
        chroma_qp_offset_list_enabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let transform_skip_rotation_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_rotation_enabled_flag) };
            transform_skip_rotation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let transform_skip_context_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_context_enabled_flag) };
            transform_skip_context_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let implicit_rdpcm_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(implicit_rdpcm_enabled_flag) };
            implicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let explicit_rdpcm_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(explicit_rdpcm_enabled_flag) };
            explicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let extended_precision_processing_flag: u32 =
                unsafe { ::std::mem::transmute(extended_precision_processing_flag) };
            extended_precision_processing_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let intra_smoothing_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(intra_smoothing_disabled_flag) };
            intra_smoothing_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let high_precision_offsets_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(high_precision_offsets_enabled_flag) };
            high_precision_offsets_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let persistent_rice_adaptation_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(persistent_rice_adaptation_enabled_flag) };
            persistent_rice_adaptation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let cabac_bypass_alignment_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cabac_bypass_alignment_enabled_flag) };
            cabac_bypass_alignment_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let cross_component_prediction_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cross_component_prediction_enabled_flag) };
            cross_component_prediction_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let chroma_qp_offset_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(chroma_qp_offset_list_enabled_flag) };
            chroma_qp_offset_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 21u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVCRext__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVCRext__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVCRext__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVCRext__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCRext__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCRext__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVCRext"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVCRext>() - 24usize];
    ["Alignment of _VAPictureParameterBufferHEVCRext"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVCRext>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext::range_extension_pic_fields"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCRext,
        range_extension_pic_fields
    ) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext::diff_cu_chroma_qp_offset_depth"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCRext,
        diff_cu_chroma_qp_offset_depth
    )
        - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext::chroma_qp_offset_list_len_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCRext,
        chroma_qp_offset_list_len_minus1
    )
        - 5usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext::log2_sao_offset_scale_luma"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCRext,
        log2_sao_offset_scale_luma
    ) - 6usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext::log2_sao_offset_scale_chroma"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCRext,
        log2_sao_offset_scale_chroma
    )
        - 7usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext::log2_max_transform_skip_block_size_minus2"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferHEVCRext , log2_max_transform_skip_block_size_minus2) - 8usize] ;
    ["Offset of field: _VAPictureParameterBufferHEVCRext::cb_qp_offset_list"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCRext, cb_qp_offset_list) - 9usize];
    ["Offset of field: _VAPictureParameterBufferHEVCRext::cr_qp_offset_list"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCRext, cr_qp_offset_list) - 15usize];
};
pub type VAPictureParameterBufferHEVCRext = _VAPictureParameterBufferHEVCRext;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferHEVCScc {
    pub screen_content_pic_fields: _VAPictureParameterBufferHEVCScc__bindgen_ty_1,
    pub palette_max_size: u8,
    pub delta_palette_max_predictor_size: u8,
    pub predictor_palette_size: u8,
    pub predictor_palette_entries: [[u16; 128usize]; 3usize],
    pub pps_act_y_qp_offset_plus5: i8,
    pub pps_act_cb_qp_offset_plus5: i8,
    pub pps_act_cr_qp_offset_plus3: i8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferHEVCScc__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferHEVCScc__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferHEVCScc__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVCScc__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferHEVCScc__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVCScc__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVCScc__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAPictureParameterBufferHEVCScc__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn pps_curr_pic_ref_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_curr_pic_ref_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn palette_mode_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_palette_mode_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn motion_vector_resolution_control_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_motion_vector_resolution_control_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_boundary_filtering_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_boundary_filtering_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn residual_adaptive_colour_transform_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_residual_adaptive_colour_transform_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_slice_act_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_act_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pps_curr_pic_ref_enabled_flag: u32,
        palette_mode_enabled_flag: u32,
        motion_vector_resolution_control_idc: u32,
        intra_boundary_filtering_disabled_flag: u32,
        residual_adaptive_colour_transform_enabled_flag: u32,
        pps_slice_act_qp_offsets_present_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pps_curr_pic_ref_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_curr_pic_ref_enabled_flag) };
            pps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let palette_mode_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(palette_mode_enabled_flag) };
            palette_mode_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let motion_vector_resolution_control_idc: u32 =
                unsafe { ::std::mem::transmute(motion_vector_resolution_control_idc) };
            motion_vector_resolution_control_idc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let intra_boundary_filtering_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(intra_boundary_filtering_disabled_flag) };
            intra_boundary_filtering_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let residual_adaptive_colour_transform_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(residual_adaptive_colour_transform_enabled_flag) };
            residual_adaptive_colour_transform_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pps_slice_act_qp_offsets_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_slice_act_qp_offsets_present_flag) };
            pps_slice_act_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVCScc__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVCScc__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferHEVCScc__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVCScc__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCScc__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCScc__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVCScc"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVCScc>() - 780usize];
    ["Alignment of _VAPictureParameterBufferHEVCScc"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVCScc>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::screen_content_pic_fields"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCScc,
        screen_content_pic_fields
    ) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::palette_max_size"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCScc, palette_max_size) - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::delta_palette_max_predictor_size"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCScc,
        delta_palette_max_predictor_size
    )
        - 5usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::predictor_palette_size"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCScc, predictor_palette_size) - 6usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::predictor_palette_entries"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCScc,
        predictor_palette_entries
    ) - 8usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::pps_act_y_qp_offset_plus5"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCScc,
        pps_act_y_qp_offset_plus5
    ) - 776usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::pps_act_cb_qp_offset_plus5"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCScc,
        pps_act_cb_qp_offset_plus5
    ) - 777usize];
    ["Offset of field: _VAPictureParameterBufferHEVCScc::pps_act_cr_qp_offset_plus3"][::std::mem::offset_of!(
        _VAPictureParameterBufferHEVCScc,
        pps_act_cr_qp_offset_plus3
    ) - 778usize];
};
pub type VAPictureParameterBufferHEVCScc = _VAPictureParameterBufferHEVCScc;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferHEVCExtension {
    pub base: VAPictureParameterBufferHEVC,
    pub rext: VAPictureParameterBufferHEVCRext,
    pub scc: VAPictureParameterBufferHEVCScc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferHEVCExtension"]
        [::std::mem::size_of::<_VAPictureParameterBufferHEVCExtension>() - 1408usize];
    ["Alignment of _VAPictureParameterBufferHEVCExtension"]
        [::std::mem::align_of::<_VAPictureParameterBufferHEVCExtension>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferHEVCExtension::base"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCExtension, base) - 0usize];
    ["Offset of field: _VAPictureParameterBufferHEVCExtension::rext"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCExtension, rext) - 604usize];
    ["Offset of field: _VAPictureParameterBufferHEVCExtension::scc"]
        [::std::mem::offset_of!(_VAPictureParameterBufferHEVCExtension, scc) - 628usize];
};
pub type VAPictureParameterBufferHEVCExtension = _VAPictureParameterBufferHEVCExtension;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASliceParameterBufferHEVC {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub slice_data_byte_offset: u32,
    pub slice_segment_address: u32,
    pub RefPicList: [[u8; 15usize]; 2usize],
    pub LongSliceFlags: _VASliceParameterBufferHEVC__bindgen_ty_1,
    pub collocated_ref_idx: u8,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub slice_qp_delta: i8,
    pub slice_cb_qp_offset: i8,
    pub slice_cr_qp_offset: i8,
    pub slice_beta_offset_div2: i8,
    pub slice_tc_offset_div2: i8,
    pub luma_log2_weight_denom: u8,
    pub delta_chroma_log2_weight_denom: i8,
    pub delta_luma_weight_l0: [i8; 15usize],
    pub luma_offset_l0: [i8; 15usize],
    pub delta_chroma_weight_l0: [[i8; 2usize]; 15usize],
    pub ChromaOffsetL0: [[i8; 2usize]; 15usize],
    pub delta_luma_weight_l1: [i8; 15usize],
    pub luma_offset_l1: [i8; 15usize],
    pub delta_chroma_weight_l1: [[i8; 2usize]; 15usize],
    pub ChromaOffsetL1: [[i8; 2usize]; 15usize],
    pub five_minus_max_num_merge_cand: u8,
    pub num_entry_point_offsets: u16,
    pub entry_offset_to_subset_array: u16,
    pub slice_data_num_emu_prevn_bytes: u16,
    pub va_reserved: [u32; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VASliceParameterBufferHEVC__bindgen_ty_1 {
    pub value: u32,
    pub fields: _VASliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VASliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VASliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VASliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn LastSliceOfPic(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LastSliceOfPic(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dependent_slice_segment_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segment_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_slice_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn color_plane_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_color_plane_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_sao_luma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_luma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_sao_chroma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_chroma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mvd_l1_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mvd_l1_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cabac_init_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn collocated_from_l0_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_collocated_from_l0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        LastSliceOfPic: u32,
        dependent_slice_segment_flag: u32,
        slice_type: u32,
        color_plane_id: u32,
        slice_sao_luma_flag: u32,
        slice_sao_chroma_flag: u32,
        mvd_l1_zero_flag: u32,
        cabac_init_flag: u32,
        slice_temporal_mvp_enabled_flag: u32,
        slice_deblocking_filter_disabled_flag: u32,
        collocated_from_l0_flag: u32,
        slice_loop_filter_across_slices_enabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let LastSliceOfPic: u32 = unsafe { ::std::mem::transmute(LastSliceOfPic) };
            LastSliceOfPic as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dependent_slice_segment_flag: u32 =
                unsafe { ::std::mem::transmute(dependent_slice_segment_flag) };
            dependent_slice_segment_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let slice_type: u32 = unsafe { ::std::mem::transmute(slice_type) };
            slice_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let color_plane_id: u32 = unsafe { ::std::mem::transmute(color_plane_id) };
            color_plane_id as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let slice_sao_luma_flag: u32 = unsafe { ::std::mem::transmute(slice_sao_luma_flag) };
            slice_sao_luma_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let slice_sao_chroma_flag: u32 =
                unsafe { ::std::mem::transmute(slice_sao_chroma_flag) };
            slice_sao_chroma_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let mvd_l1_zero_flag: u32 = unsafe { ::std::mem::transmute(mvd_l1_zero_flag) };
            mvd_l1_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let cabac_init_flag: u32 = unsafe { ::std::mem::transmute(cabac_init_flag) };
            cabac_init_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let slice_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_temporal_mvp_enabled_flag) };
            slice_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let slice_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_deblocking_filter_disabled_flag) };
            slice_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let collocated_from_l0_flag: u32 =
                unsafe { ::std::mem::transmute(collocated_from_l0_flag) };
            collocated_from_l0_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let slice_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_loop_filter_across_slices_enabled_flag) };
            slice_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VASliceParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASliceParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VASliceParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VASliceParameterBufferHEVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC__bindgen_ty_1, value) - 0usize];
    ["Offset of field: _VASliceParameterBufferHEVC__bindgen_ty_1::fields"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC__bindgen_ty_1, fields) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferHEVC"]
        [::std::mem::size_of::<_VASliceParameterBufferHEVC>() - 264usize];
    ["Alignment of _VASliceParameterBufferHEVC"]
        [::std::mem::align_of::<_VASliceParameterBufferHEVC>() - 4usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_data_byte_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_data_byte_offset) - 12usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_segment_address"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_segment_address) - 16usize];
    ["Offset of field: _VASliceParameterBufferHEVC::RefPicList"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, RefPicList) - 20usize];
    ["Offset of field: _VASliceParameterBufferHEVC::LongSliceFlags"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, LongSliceFlags) - 52usize];
    ["Offset of field: _VASliceParameterBufferHEVC::collocated_ref_idx"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, collocated_ref_idx) - 56usize];
    ["Offset of field: _VASliceParameterBufferHEVC::num_ref_idx_l0_active_minus1"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVC,
        num_ref_idx_l0_active_minus1
    ) - 57usize];
    ["Offset of field: _VASliceParameterBufferHEVC::num_ref_idx_l1_active_minus1"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVC,
        num_ref_idx_l1_active_minus1
    ) - 58usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_qp_delta"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_qp_delta) - 59usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_cb_qp_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_cb_qp_offset) - 60usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_cr_qp_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_cr_qp_offset) - 61usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_beta_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_beta_offset_div2) - 62usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_tc_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, slice_tc_offset_div2) - 63usize];
    ["Offset of field: _VASliceParameterBufferHEVC::luma_log2_weight_denom"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, luma_log2_weight_denom) - 64usize];
    ["Offset of field: _VASliceParameterBufferHEVC::delta_chroma_log2_weight_denom"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVC,
        delta_chroma_log2_weight_denom
    ) - 65usize];
    ["Offset of field: _VASliceParameterBufferHEVC::delta_luma_weight_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, delta_luma_weight_l0) - 66usize];
    ["Offset of field: _VASliceParameterBufferHEVC::luma_offset_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, luma_offset_l0) - 81usize];
    ["Offset of field: _VASliceParameterBufferHEVC::delta_chroma_weight_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, delta_chroma_weight_l0) - 96usize];
    ["Offset of field: _VASliceParameterBufferHEVC::ChromaOffsetL0"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, ChromaOffsetL0) - 126usize];
    ["Offset of field: _VASliceParameterBufferHEVC::delta_luma_weight_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, delta_luma_weight_l1) - 156usize];
    ["Offset of field: _VASliceParameterBufferHEVC::luma_offset_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, luma_offset_l1) - 171usize];
    ["Offset of field: _VASliceParameterBufferHEVC::delta_chroma_weight_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, delta_chroma_weight_l1) - 186usize];
    ["Offset of field: _VASliceParameterBufferHEVC::ChromaOffsetL1"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, ChromaOffsetL1) - 216usize];
    ["Offset of field: _VASliceParameterBufferHEVC::five_minus_max_num_merge_cand"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVC,
        five_minus_max_num_merge_cand
    ) - 246usize];
    ["Offset of field: _VASliceParameterBufferHEVC::num_entry_point_offsets"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, num_entry_point_offsets) - 248usize];
    ["Offset of field: _VASliceParameterBufferHEVC::entry_offset_to_subset_array"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVC,
        entry_offset_to_subset_array
    ) - 250usize];
    ["Offset of field: _VASliceParameterBufferHEVC::slice_data_num_emu_prevn_bytes"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVC,
        slice_data_num_emu_prevn_bytes
    ) - 252usize];
    ["Offset of field: _VASliceParameterBufferHEVC::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVC, va_reserved) - 256usize];
};
pub type VASliceParameterBufferHEVC = _VASliceParameterBufferHEVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASliceParameterBufferHEVCRext {
    pub luma_offset_l0: [i16; 15usize],
    pub ChromaOffsetL0: [[i16; 2usize]; 15usize],
    pub luma_offset_l1: [i16; 15usize],
    pub ChromaOffsetL1: [[i16; 2usize]; 15usize],
    pub slice_ext_flags: _VASliceParameterBufferHEVCRext__bindgen_ty_1,
    pub slice_act_y_qp_offset: i8,
    pub slice_act_cb_qp_offset: i8,
    pub slice_act_cr_qp_offset: i8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VASliceParameterBufferHEVCRext__bindgen_ty_1 {
    pub bits: _VASliceParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VASliceParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VASliceParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VASliceParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VASliceParameterBufferHEVCRext__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn cu_chroma_qp_offset_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_chroma_qp_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_integer_mv_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_integer_mv_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cu_chroma_qp_offset_enabled_flag: u32,
        use_integer_mv_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cu_chroma_qp_offset_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cu_chroma_qp_offset_enabled_flag) };
            cu_chroma_qp_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let use_integer_mv_flag: u32 = unsafe { ::std::mem::transmute(use_integer_mv_flag) };
            use_integer_mv_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferHEVCRext__bindgen_ty_1"]
        [::std::mem::size_of::<_VASliceParameterBufferHEVCRext__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASliceParameterBufferHEVCRext__bindgen_ty_1"]
        [::std::mem::align_of::<_VASliceParameterBufferHEVCRext__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferHEVCRext"]
        [::std::mem::size_of::<_VASliceParameterBufferHEVCRext>() - 188usize];
    ["Alignment of _VASliceParameterBufferHEVCRext"]
        [::std::mem::align_of::<_VASliceParameterBufferHEVCRext>() - 4usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::luma_offset_l0"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext, luma_offset_l0) - 0usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::ChromaOffsetL0"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext, ChromaOffsetL0) - 30usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::luma_offset_l1"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext, luma_offset_l1) - 90usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::ChromaOffsetL1"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext, ChromaOffsetL1) - 120usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::slice_ext_flags"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext, slice_ext_flags) - 180usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::slice_act_y_qp_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCRext, slice_act_y_qp_offset) - 184usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::slice_act_cb_qp_offset"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVCRext,
        slice_act_cb_qp_offset
    ) - 185usize];
    ["Offset of field: _VASliceParameterBufferHEVCRext::slice_act_cr_qp_offset"][::std::mem::offset_of!(
        _VASliceParameterBufferHEVCRext,
        slice_act_cr_qp_offset
    ) - 186usize];
};
pub type VASliceParameterBufferHEVCRext = _VASliceParameterBufferHEVCRext;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASliceParameterBufferHEVCExtension {
    pub base: VASliceParameterBufferHEVC,
    pub rext: VASliceParameterBufferHEVCRext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferHEVCExtension"]
        [::std::mem::size_of::<_VASliceParameterBufferHEVCExtension>() - 452usize];
    ["Alignment of _VASliceParameterBufferHEVCExtension"]
        [::std::mem::align_of::<_VASliceParameterBufferHEVCExtension>() - 4usize];
    ["Offset of field: _VASliceParameterBufferHEVCExtension::base"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCExtension, base) - 0usize];
    ["Offset of field: _VASliceParameterBufferHEVCExtension::rext"]
        [::std::mem::offset_of!(_VASliceParameterBufferHEVCExtension, rext) - 264usize];
};
pub type VASliceParameterBufferHEVCExtension = _VASliceParameterBufferHEVCExtension;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAIQMatrixBufferHEVC {
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 6usize],
    pub ScalingList16x16: [[u8; 64usize]; 6usize],
    pub ScalingList32x32: [[u8; 64usize]; 2usize],
    pub ScalingListDC16x16: [u8; 6usize],
    pub ScalingListDC32x32: [u8; 2usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAIQMatrixBufferHEVC"][::std::mem::size_of::<_VAIQMatrixBufferHEVC>() - 1016usize];
    ["Alignment of _VAIQMatrixBufferHEVC"]
        [::std::mem::align_of::<_VAIQMatrixBufferHEVC>() - 4usize];
    ["Offset of field: _VAIQMatrixBufferHEVC::ScalingList4x4"]
        [::std::mem::offset_of!(_VAIQMatrixBufferHEVC, ScalingList4x4) - 0usize];
    ["Offset of field: _VAIQMatrixBufferHEVC::ScalingList8x8"]
        [::std::mem::offset_of!(_VAIQMatrixBufferHEVC, ScalingList8x8) - 96usize];
    ["Offset of field: _VAIQMatrixBufferHEVC::ScalingList16x16"]
        [::std::mem::offset_of!(_VAIQMatrixBufferHEVC, ScalingList16x16) - 480usize];
    ["Offset of field: _VAIQMatrixBufferHEVC::ScalingList32x32"]
        [::std::mem::offset_of!(_VAIQMatrixBufferHEVC, ScalingList32x32) - 864usize];
    ["Offset of field: _VAIQMatrixBufferHEVC::ScalingListDC16x16"]
        [::std::mem::offset_of!(_VAIQMatrixBufferHEVC, ScalingListDC16x16) - 992usize];
    ["Offset of field: _VAIQMatrixBufferHEVC::ScalingListDC32x32"]
        [::std::mem::offset_of!(_VAIQMatrixBufferHEVC, ScalingListDC32x32) - 998usize];
    ["Offset of field: _VAIQMatrixBufferHEVC::va_reserved"]
        [::std::mem::offset_of!(_VAIQMatrixBufferHEVC, va_reserved) - 1000usize];
};
pub type VAIQMatrixBufferHEVC = _VAIQMatrixBufferHEVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferJPEGBaseline {
    pub picture_width: u16,
    pub picture_height: u16,
    pub components: [_VAPictureParameterBufferJPEGBaseline__bindgen_ty_1; 255usize],
    pub num_components: u8,
    pub color_space: u8,
    pub rotation: u32,
    pub crop_rectangle: VARectangle,
    pub va_reserved: [u32; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1 {
    pub component_id: u8,
    pub h_sampling_factor: u8,
    pub v_sampling_factor: u8,
    pub quantiser_table_selector: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferJPEGBaseline__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferJPEGBaseline__bindgen_ty_1>() - 1usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1::component_id"][::std::mem::offset_of!(
        _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1,
        component_id
    )
        - 0usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1::h_sampling_factor"][::std::mem::offset_of!(
        _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1,
        h_sampling_factor
    )
        - 1usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1::v_sampling_factor"][::std::mem::offset_of!(
        _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1,
        v_sampling_factor
    )
        - 2usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline__bindgen_ty_1::quantiser_table_selector"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferJPEGBaseline__bindgen_ty_1 , quantiser_table_selector) - 3usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferJPEGBaseline"]
        [::std::mem::size_of::<_VAPictureParameterBufferJPEGBaseline>() - 1060usize];
    ["Alignment of _VAPictureParameterBufferJPEGBaseline"]
        [::std::mem::align_of::<_VAPictureParameterBufferJPEGBaseline>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::picture_width"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, picture_width) - 0usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::picture_height"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, picture_height) - 2usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::components"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, components) - 4usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::num_components"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, num_components) - 1024usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::color_space"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, color_space) - 1025usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::rotation"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, rotation) - 1028usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::crop_rectangle"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, crop_rectangle) - 1032usize];
    ["Offset of field: _VAPictureParameterBufferJPEGBaseline::va_reserved"]
        [::std::mem::offset_of!(_VAPictureParameterBufferJPEGBaseline, va_reserved) - 1040usize];
};
pub type VAPictureParameterBufferJPEGBaseline = _VAPictureParameterBufferJPEGBaseline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAIQMatrixBufferJPEGBaseline {
    pub load_quantiser_table: [u8; 4usize],
    pub quantiser_table: [[u8; 64usize]; 4usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAIQMatrixBufferJPEGBaseline"]
        [::std::mem::size_of::<_VAIQMatrixBufferJPEGBaseline>() - 276usize];
    ["Alignment of _VAIQMatrixBufferJPEGBaseline"]
        [::std::mem::align_of::<_VAIQMatrixBufferJPEGBaseline>() - 4usize];
    ["Offset of field: _VAIQMatrixBufferJPEGBaseline::load_quantiser_table"]
        [::std::mem::offset_of!(_VAIQMatrixBufferJPEGBaseline, load_quantiser_table) - 0usize];
    ["Offset of field: _VAIQMatrixBufferJPEGBaseline::quantiser_table"]
        [::std::mem::offset_of!(_VAIQMatrixBufferJPEGBaseline, quantiser_table) - 4usize];
    ["Offset of field: _VAIQMatrixBufferJPEGBaseline::va_reserved"]
        [::std::mem::offset_of!(_VAIQMatrixBufferJPEGBaseline, va_reserved) - 260usize];
};
pub type VAIQMatrixBufferJPEGBaseline = _VAIQMatrixBufferJPEGBaseline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferJPEGBaseline {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub slice_horizontal_position: u32,
    pub slice_vertical_position: u32,
    pub components: [_VASliceParameterBufferJPEGBaseline__bindgen_ty_1; 4usize],
    pub num_components: u8,
    pub restart_interval: u16,
    pub num_mcus: u32,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferJPEGBaseline__bindgen_ty_1 {
    pub component_selector: u8,
    pub dc_table_selector: u8,
    pub ac_table_selector: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferJPEGBaseline__bindgen_ty_1"]
        [::std::mem::size_of::<_VASliceParameterBufferJPEGBaseline__bindgen_ty_1>() - 3usize];
    ["Alignment of _VASliceParameterBufferJPEGBaseline__bindgen_ty_1"]
        [::std::mem::align_of::<_VASliceParameterBufferJPEGBaseline__bindgen_ty_1>() - 1usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline__bindgen_ty_1::component_selector"][::std::mem::offset_of!(
        _VASliceParameterBufferJPEGBaseline__bindgen_ty_1,
        component_selector
    )
        - 0usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline__bindgen_ty_1::dc_table_selector"][::std::mem::offset_of!(
        _VASliceParameterBufferJPEGBaseline__bindgen_ty_1,
        dc_table_selector
    )
        - 1usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline__bindgen_ty_1::ac_table_selector"][::std::mem::offset_of!(
        _VASliceParameterBufferJPEGBaseline__bindgen_ty_1,
        ac_table_selector
    )
        - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferJPEGBaseline"]
        [::std::mem::size_of::<_VASliceParameterBufferJPEGBaseline>() - 56usize];
    ["Alignment of _VASliceParameterBufferJPEGBaseline"]
        [::std::mem::align_of::<_VASliceParameterBufferJPEGBaseline>() - 4usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::slice_horizontal_position"][::std::mem::offset_of!(
        _VASliceParameterBufferJPEGBaseline,
        slice_horizontal_position
    )
        - 12usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::slice_vertical_position"][::std::mem::offset_of!(
        _VASliceParameterBufferJPEGBaseline,
        slice_vertical_position
    ) - 16usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::components"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, components) - 20usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::num_components"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, num_components) - 32usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::restart_interval"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, restart_interval) - 34usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::num_mcus"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, num_mcus) - 36usize];
    ["Offset of field: _VASliceParameterBufferJPEGBaseline::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferJPEGBaseline, va_reserved) - 40usize];
};
pub type VASliceParameterBufferJPEGBaseline = _VASliceParameterBufferJPEGBaseline;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VABoolCoderContextVPX {
    pub range: u8,
    pub value: u8,
    pub count: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VABoolCoderContextVPX"][::std::mem::size_of::<_VABoolCoderContextVPX>() - 3usize];
    ["Alignment of _VABoolCoderContextVPX"]
        [::std::mem::align_of::<_VABoolCoderContextVPX>() - 1usize];
    ["Offset of field: _VABoolCoderContextVPX::range"]
        [::std::mem::offset_of!(_VABoolCoderContextVPX, range) - 0usize];
    ["Offset of field: _VABoolCoderContextVPX::value"]
        [::std::mem::offset_of!(_VABoolCoderContextVPX, value) - 1usize];
    ["Offset of field: _VABoolCoderContextVPX::count"]
        [::std::mem::offset_of!(_VABoolCoderContextVPX, count) - 2usize];
};
pub type VABoolCoderContextVPX = _VABoolCoderContextVPX;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferVP8 {
    pub frame_width: u32,
    pub frame_height: u32,
    pub last_ref_frame: VASurfaceID,
    pub golden_ref_frame: VASurfaceID,
    pub alt_ref_frame: VASurfaceID,
    pub out_of_loop_frame: VASurfaceID,
    pub pic_fields: _VAPictureParameterBufferVP8__bindgen_ty_1,
    pub mb_segment_tree_probs: [u8; 3usize],
    pub loop_filter_level: [u8; 4usize],
    pub loop_filter_deltas_ref_frame: [i8; 4usize],
    pub loop_filter_deltas_mode: [i8; 4usize],
    pub prob_skip_false: u8,
    pub prob_intra: u8,
    pub prob_last: u8,
    pub prob_gf: u8,
    pub y_mode_probs: [u8; 4usize],
    pub uv_mode_probs: [u8; 3usize],
    pub mv_probs: [[u8; 19usize]; 2usize],
    pub bool_coder_ctx: VABoolCoderContextVPX,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVP8__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn key_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_key_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update_mb_segmentation_map(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_mb_segmentation_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update_segment_feature_data(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_segment_feature_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filter_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_filter_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sharpness_level(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_sharpness_level(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_filter_adj_enable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_adj_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mode_ref_lf_delta_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mode_ref_lf_delta_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_bias_golden(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_bias_golden(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_bias_alternate(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_bias_alternate(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_no_coeff_skip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_no_coeff_skip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_filter_disable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_disable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        key_frame: u32,
        version: u32,
        segmentation_enabled: u32,
        update_mb_segmentation_map: u32,
        update_segment_feature_data: u32,
        filter_type: u32,
        sharpness_level: u32,
        loop_filter_adj_enable: u32,
        mode_ref_lf_delta_update: u32,
        sign_bias_golden: u32,
        sign_bias_alternate: u32,
        mb_no_coeff_skip: u32,
        loop_filter_disable: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let key_frame: u32 = unsafe { ::std::mem::transmute(key_frame) };
            key_frame as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let update_mb_segmentation_map: u32 =
                unsafe { ::std::mem::transmute(update_mb_segmentation_map) };
            update_mb_segmentation_map as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let update_segment_feature_data: u32 =
                unsafe { ::std::mem::transmute(update_segment_feature_data) };
            update_segment_feature_data as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let filter_type: u32 = unsafe { ::std::mem::transmute(filter_type) };
            filter_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let sharpness_level: u32 = unsafe { ::std::mem::transmute(sharpness_level) };
            sharpness_level as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let loop_filter_adj_enable: u32 =
                unsafe { ::std::mem::transmute(loop_filter_adj_enable) };
            loop_filter_adj_enable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let mode_ref_lf_delta_update: u32 =
                unsafe { ::std::mem::transmute(mode_ref_lf_delta_update) };
            mode_ref_lf_delta_update as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let sign_bias_golden: u32 = unsafe { ::std::mem::transmute(sign_bias_golden) };
            sign_bias_golden as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let sign_bias_alternate: u32 = unsafe { ::std::mem::transmute(sign_bias_alternate) };
            sign_bias_alternate as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let mb_no_coeff_skip: u32 = unsafe { ::std::mem::transmute(mb_no_coeff_skip) };
            mb_no_coeff_skip as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let loop_filter_disable: u32 = unsafe { ::std::mem::transmute(loop_filter_disable) };
            loop_filter_disable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVP8__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferVP8__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVP8__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferVP8__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVP8__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVP8__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVP8"]
        [::std::mem::size_of::<_VAPictureParameterBufferVP8>() - 112usize];
    ["Alignment of _VAPictureParameterBufferVP8"]
        [::std::mem::align_of::<_VAPictureParameterBufferVP8>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVP8::frame_width"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, frame_width) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVP8::frame_height"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, frame_height) - 4usize];
    ["Offset of field: _VAPictureParameterBufferVP8::last_ref_frame"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, last_ref_frame) - 8usize];
    ["Offset of field: _VAPictureParameterBufferVP8::golden_ref_frame"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, golden_ref_frame) - 12usize];
    ["Offset of field: _VAPictureParameterBufferVP8::alt_ref_frame"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, alt_ref_frame) - 16usize];
    ["Offset of field: _VAPictureParameterBufferVP8::out_of_loop_frame"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, out_of_loop_frame) - 20usize];
    ["Offset of field: _VAPictureParameterBufferVP8::pic_fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, pic_fields) - 24usize];
    ["Offset of field: _VAPictureParameterBufferVP8::mb_segment_tree_probs"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, mb_segment_tree_probs) - 28usize];
    ["Offset of field: _VAPictureParameterBufferVP8::loop_filter_level"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, loop_filter_level) - 31usize];
    ["Offset of field: _VAPictureParameterBufferVP8::loop_filter_deltas_ref_frame"][::std::mem::offset_of!(
        _VAPictureParameterBufferVP8,
        loop_filter_deltas_ref_frame
    ) - 35usize];
    ["Offset of field: _VAPictureParameterBufferVP8::loop_filter_deltas_mode"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, loop_filter_deltas_mode) - 39usize];
    ["Offset of field: _VAPictureParameterBufferVP8::prob_skip_false"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, prob_skip_false) - 43usize];
    ["Offset of field: _VAPictureParameterBufferVP8::prob_intra"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, prob_intra) - 44usize];
    ["Offset of field: _VAPictureParameterBufferVP8::prob_last"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, prob_last) - 45usize];
    ["Offset of field: _VAPictureParameterBufferVP8::prob_gf"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, prob_gf) - 46usize];
    ["Offset of field: _VAPictureParameterBufferVP8::y_mode_probs"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, y_mode_probs) - 47usize];
    ["Offset of field: _VAPictureParameterBufferVP8::uv_mode_probs"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, uv_mode_probs) - 51usize];
    ["Offset of field: _VAPictureParameterBufferVP8::mv_probs"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, mv_probs) - 54usize];
    ["Offset of field: _VAPictureParameterBufferVP8::bool_coder_ctx"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, bool_coder_ctx) - 92usize];
    ["Offset of field: _VAPictureParameterBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVP8, va_reserved) - 96usize];
};
pub type VAPictureParameterBufferVP8 = _VAPictureParameterBufferVP8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferVP8 {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub macroblock_offset: u32,
    pub num_of_partitions: u8,
    pub partition_size: [u32; 9usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferVP8"]
        [::std::mem::size_of::<_VASliceParameterBufferVP8>() - 72usize];
    ["Alignment of _VASliceParameterBufferVP8"]
        [::std::mem::align_of::<_VASliceParameterBufferVP8>() - 4usize];
    ["Offset of field: _VASliceParameterBufferVP8::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP8, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferVP8::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP8, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferVP8::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP8, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferVP8::macroblock_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP8, macroblock_offset) - 12usize];
    ["Offset of field: _VASliceParameterBufferVP8::num_of_partitions"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP8, num_of_partitions) - 16usize];
    ["Offset of field: _VASliceParameterBufferVP8::partition_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP8, partition_size) - 20usize];
    ["Offset of field: _VASliceParameterBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP8, va_reserved) - 56usize];
};
pub type VASliceParameterBufferVP8 = _VASliceParameterBufferVP8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProbabilityDataBufferVP8 {
    pub dct_coeff_probs: [[[[u8; 11usize]; 3usize]; 8usize]; 4usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProbabilityDataBufferVP8"]
        [::std::mem::size_of::<_VAProbabilityDataBufferVP8>() - 1072usize];
    ["Alignment of _VAProbabilityDataBufferVP8"]
        [::std::mem::align_of::<_VAProbabilityDataBufferVP8>() - 4usize];
    ["Offset of field: _VAProbabilityDataBufferVP8::dct_coeff_probs"]
        [::std::mem::offset_of!(_VAProbabilityDataBufferVP8, dct_coeff_probs) - 0usize];
    ["Offset of field: _VAProbabilityDataBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VAProbabilityDataBufferVP8, va_reserved) - 1056usize];
};
pub type VAProbabilityDataBufferVP8 = _VAProbabilityDataBufferVP8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAIQMatrixBufferVP8 {
    pub quantization_index: [[u16; 6usize]; 4usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAIQMatrixBufferVP8"][::std::mem::size_of::<_VAIQMatrixBufferVP8>() - 64usize];
    ["Alignment of _VAIQMatrixBufferVP8"][::std::mem::align_of::<_VAIQMatrixBufferVP8>() - 4usize];
    ["Offset of field: _VAIQMatrixBufferVP8::quantization_index"]
        [::std::mem::offset_of!(_VAIQMatrixBufferVP8, quantization_index) - 0usize];
    ["Offset of field: _VAIQMatrixBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VAIQMatrixBufferVP8, va_reserved) - 48usize];
};
pub type VAIQMatrixBufferVP8 = _VAIQMatrixBufferVP8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VADecPictureParameterBufferVP9 {
    pub frame_width: u16,
    pub frame_height: u16,
    pub reference_frames: [VASurfaceID; 8usize],
    pub pic_fields: _VADecPictureParameterBufferVP9__bindgen_ty_1,
    pub filter_level: u8,
    pub sharpness_level: u8,
    pub log2_tile_rows: u8,
    pub log2_tile_columns: u8,
    pub frame_header_length_in_bytes: u8,
    pub first_partition_size: u16,
    pub mb_segment_tree_probs: [u8; 7usize],
    pub segment_pred_probs: [u8; 3usize],
    pub profile: u8,
    pub bit_depth: u8,
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADecPictureParameterBufferVP9__bindgen_ty_1 {
    pub bits: _VADecPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VADecPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VADecPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VADecPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VADecPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn subsampling_x(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_x(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn subsampling_y(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_y(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn show_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_only(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_only(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mcomp_filter_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mcomp_filter_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_parallel_decoding_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_parallel_decoding_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reset_frame_context(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reset_frame_context(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn refresh_frame_context(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_refresh_frame_context(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_context_idx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_context_idx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn last_ref_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_last_ref_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn last_ref_frame_sign_bias(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_ref_frame_sign_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn golden_ref_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_golden_ref_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn golden_ref_frame_sign_bias(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_golden_ref_frame_sign_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alt_ref_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_alt_ref_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn alt_ref_frame_sign_bias(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alt_ref_frame_sign_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lossless_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lossless_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        subsampling_x: u32,
        subsampling_y: u32,
        frame_type: u32,
        show_frame: u32,
        error_resilient_mode: u32,
        intra_only: u32,
        allow_high_precision_mv: u32,
        mcomp_filter_type: u32,
        frame_parallel_decoding_mode: u32,
        reset_frame_context: u32,
        refresh_frame_context: u32,
        frame_context_idx: u32,
        segmentation_enabled: u32,
        segmentation_temporal_update: u32,
        segmentation_update_map: u32,
        last_ref_frame: u32,
        last_ref_frame_sign_bias: u32,
        golden_ref_frame: u32,
        golden_ref_frame_sign_bias: u32,
        alt_ref_frame: u32,
        alt_ref_frame_sign_bias: u32,
        lossless_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let subsampling_x: u32 = unsafe { ::std::mem::transmute(subsampling_x) };
            subsampling_x as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let subsampling_y: u32 = unsafe { ::std::mem::transmute(subsampling_y) };
            subsampling_y as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let frame_type: u32 = unsafe { ::std::mem::transmute(frame_type) };
            frame_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let show_frame: u32 = unsafe { ::std::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::std::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let intra_only: u32 = unsafe { ::std::mem::transmute(intra_only) };
            intra_only as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::std::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 3u8, {
            let mcomp_filter_type: u32 = unsafe { ::std::mem::transmute(mcomp_filter_type) };
            mcomp_filter_type as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let frame_parallel_decoding_mode: u32 =
                unsafe { ::std::mem::transmute(frame_parallel_decoding_mode) };
            frame_parallel_decoding_mode as u64
        });
        __bindgen_bitfield_unit.set(11usize, 2u8, {
            let reset_frame_context: u32 = unsafe { ::std::mem::transmute(reset_frame_context) };
            reset_frame_context as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let refresh_frame_context: u32 =
                unsafe { ::std::mem::transmute(refresh_frame_context) };
            refresh_frame_context as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let frame_context_idx: u32 = unsafe { ::std::mem::transmute(frame_context_idx) };
            frame_context_idx as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let segmentation_temporal_update: u32 =
                unsafe { ::std::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let segmentation_update_map: u32 =
                unsafe { ::std::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(19usize, 3u8, {
            let last_ref_frame: u32 = unsafe { ::std::mem::transmute(last_ref_frame) };
            last_ref_frame as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let last_ref_frame_sign_bias: u32 =
                unsafe { ::std::mem::transmute(last_ref_frame_sign_bias) };
            last_ref_frame_sign_bias as u64
        });
        __bindgen_bitfield_unit.set(23usize, 3u8, {
            let golden_ref_frame: u32 = unsafe { ::std::mem::transmute(golden_ref_frame) };
            golden_ref_frame as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let golden_ref_frame_sign_bias: u32 =
                unsafe { ::std::mem::transmute(golden_ref_frame_sign_bias) };
            golden_ref_frame_sign_bias as u64
        });
        __bindgen_bitfield_unit.set(27usize, 3u8, {
            let alt_ref_frame: u32 = unsafe { ::std::mem::transmute(alt_ref_frame) };
            alt_ref_frame as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let alt_ref_frame_sign_bias: u32 =
                unsafe { ::std::mem::transmute(alt_ref_frame_sign_bias) };
            alt_ref_frame_sign_bias as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let lossless_flag: u32 = unsafe { ::std::mem::transmute(lossless_flag) };
            lossless_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferVP9__bindgen_ty_1"]
        [::std::mem::size_of::<_VADecPictureParameterBufferVP9__bindgen_ty_1>() - 4usize];
    ["Alignment of _VADecPictureParameterBufferVP9__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferVP9__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VADecPictureParameterBufferVP9__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferVP9__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferVP9"]
        [::std::mem::size_of::<_VADecPictureParameterBufferVP9>() - 92usize];
    ["Alignment of _VADecPictureParameterBufferVP9"]
        [::std::mem::align_of::<_VADecPictureParameterBufferVP9>() - 4usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::frame_width"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, frame_width) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::frame_height"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, frame_height) - 2usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::reference_frames"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, reference_frames) - 4usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::pic_fields"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, pic_fields) - 36usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::filter_level"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, filter_level) - 40usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::sharpness_level"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, sharpness_level) - 41usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::log2_tile_rows"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, log2_tile_rows) - 42usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::log2_tile_columns"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, log2_tile_columns) - 43usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::frame_header_length_in_bytes"][::std::mem::offset_of!(
        _VADecPictureParameterBufferVP9,
        frame_header_length_in_bytes
    ) - 44usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::first_partition_size"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, first_partition_size) - 46usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::mb_segment_tree_probs"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, mb_segment_tree_probs) - 48usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::segment_pred_probs"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, segment_pred_probs) - 55usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::profile"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, profile) - 58usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::bit_depth"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, bit_depth) - 59usize];
    ["Offset of field: _VADecPictureParameterBufferVP9::va_reserved"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferVP9, va_reserved) - 60usize];
};
pub type VADecPictureParameterBufferVP9 = _VADecPictureParameterBufferVP9;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASegmentParameterVP9 {
    pub segment_flags: _VASegmentParameterVP9__bindgen_ty_1,
    pub filter_level: [[u8; 2usize]; 4usize],
    pub luma_ac_quant_scale: i16,
    pub luma_dc_quant_scale: i16,
    pub chroma_ac_quant_scale: i16,
    pub chroma_dc_quant_scale: i16,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VASegmentParameterVP9__bindgen_ty_1 {
    pub fields: _VASegmentParameterVP9__bindgen_ty_1__bindgen_ty_1,
    pub value: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct _VASegmentParameterVP9__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASegmentParameterVP9__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VASegmentParameterVP9__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of _VASegmentParameterVP9__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VASegmentParameterVP9__bindgen_ty_1__bindgen_ty_1>() - 2usize];
};
impl _VASegmentParameterVP9__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn segment_reference_enabled(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_segment_reference_enabled(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segment_reference(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_segment_reference(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn segment_reference_skipped(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_segment_reference_skipped(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        segment_reference_enabled: u16,
        segment_reference: u16,
        segment_reference_skipped: u16,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let segment_reference_enabled: u16 =
                unsafe { ::std::mem::transmute(segment_reference_enabled) };
            segment_reference_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let segment_reference: u16 = unsafe { ::std::mem::transmute(segment_reference) };
            segment_reference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let segment_reference_skipped: u16 =
                unsafe { ::std::mem::transmute(segment_reference_skipped) };
            segment_reference_skipped as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASegmentParameterVP9__bindgen_ty_1"]
        [::std::mem::size_of::<_VASegmentParameterVP9__bindgen_ty_1>() - 2usize];
    ["Alignment of _VASegmentParameterVP9__bindgen_ty_1"]
        [::std::mem::align_of::<_VASegmentParameterVP9__bindgen_ty_1>() - 2usize];
    ["Offset of field: _VASegmentParameterVP9__bindgen_ty_1::fields"]
        [::std::mem::offset_of!(_VASegmentParameterVP9__bindgen_ty_1, fields) - 0usize];
    ["Offset of field: _VASegmentParameterVP9__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VASegmentParameterVP9__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASegmentParameterVP9"][::std::mem::size_of::<_VASegmentParameterVP9>() - 36usize];
    ["Alignment of _VASegmentParameterVP9"]
        [::std::mem::align_of::<_VASegmentParameterVP9>() - 4usize];
    ["Offset of field: _VASegmentParameterVP9::segment_flags"]
        [::std::mem::offset_of!(_VASegmentParameterVP9, segment_flags) - 0usize];
    ["Offset of field: _VASegmentParameterVP9::filter_level"]
        [::std::mem::offset_of!(_VASegmentParameterVP9, filter_level) - 2usize];
    ["Offset of field: _VASegmentParameterVP9::luma_ac_quant_scale"]
        [::std::mem::offset_of!(_VASegmentParameterVP9, luma_ac_quant_scale) - 10usize];
    ["Offset of field: _VASegmentParameterVP9::luma_dc_quant_scale"]
        [::std::mem::offset_of!(_VASegmentParameterVP9, luma_dc_quant_scale) - 12usize];
    ["Offset of field: _VASegmentParameterVP9::chroma_ac_quant_scale"]
        [::std::mem::offset_of!(_VASegmentParameterVP9, chroma_ac_quant_scale) - 14usize];
    ["Offset of field: _VASegmentParameterVP9::chroma_dc_quant_scale"]
        [::std::mem::offset_of!(_VASegmentParameterVP9, chroma_dc_quant_scale) - 16usize];
    ["Offset of field: _VASegmentParameterVP9::va_reserved"]
        [::std::mem::offset_of!(_VASegmentParameterVP9, va_reserved) - 20usize];
};
pub type VASegmentParameterVP9 = _VASegmentParameterVP9;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASliceParameterBufferVP9 {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub seg_param: [VASegmentParameterVP9; 8usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferVP9"]
        [::std::mem::size_of::<_VASliceParameterBufferVP9>() - 316usize];
    ["Alignment of _VASliceParameterBufferVP9"]
        [::std::mem::align_of::<_VASliceParameterBufferVP9>() - 4usize];
    ["Offset of field: _VASliceParameterBufferVP9::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP9, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferVP9::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP9, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferVP9::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP9, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferVP9::seg_param"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP9, seg_param) - 12usize];
    ["Offset of field: _VASliceParameterBufferVP9::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferVP9, va_reserved) - 300usize];
};
pub type VASliceParameterBufferVP9 = _VASliceParameterBufferVP9;
#[repr(C)]
#[derive(Copy, Clone)]
pub union VAConfigAttribValDecAV1Features {
    pub bits: VAConfigAttribValDecAV1Features__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VAConfigAttribValDecAV1Features__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VAConfigAttribValDecAV1Features__bindgen_ty_1"]
        [::std::mem::size_of::<VAConfigAttribValDecAV1Features__bindgen_ty_1>() - 4usize];
    ["Alignment of VAConfigAttribValDecAV1Features__bindgen_ty_1"]
        [::std::mem::align_of::<VAConfigAttribValDecAV1Features__bindgen_ty_1>() - 4usize];
};
impl VAConfigAttribValDecAV1Features__bindgen_ty_1 {
    #[inline]
    pub fn lst_support(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lst_support(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(lst_support: u32, reserved: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let lst_support: u32 = unsafe { ::std::mem::transmute(lst_support) };
            lst_support as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VAConfigAttribValDecAV1Features"]
        [::std::mem::size_of::<VAConfigAttribValDecAV1Features>() - 4usize];
    ["Alignment of VAConfigAttribValDecAV1Features"]
        [::std::mem::align_of::<VAConfigAttribValDecAV1Features>() - 4usize];
    ["Offset of field: VAConfigAttribValDecAV1Features::bits"]
        [::std::mem::offset_of!(VAConfigAttribValDecAV1Features, bits) - 0usize];
    ["Offset of field: VAConfigAttribValDecAV1Features::value"]
        [::std::mem::offset_of!(VAConfigAttribValDecAV1Features, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASegmentationStructAV1 {
    pub segment_info_fields: _VASegmentationStructAV1__bindgen_ty_1,
    pub feature_data: [[i16; 8usize]; 8usize],
    pub feature_mask: [u8; 8usize],
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VASegmentationStructAV1__bindgen_ty_1 {
    pub bits: _VASegmentationStructAV1__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASegmentationStructAV1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASegmentationStructAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VASegmentationStructAV1__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASegmentationStructAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VASegmentationStructAV1__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _VASegmentationStructAV1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update_map(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn temporal_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_temporal_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update_data(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enabled: u32,
        update_map: u32,
        temporal_update: u32,
        update_data: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enabled: u32 = unsafe { ::std::mem::transmute(enabled) };
            enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let update_map: u32 = unsafe { ::std::mem::transmute(update_map) };
            update_map as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let temporal_update: u32 = unsafe { ::std::mem::transmute(temporal_update) };
            temporal_update as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let update_data: u32 = unsafe { ::std::mem::transmute(update_data) };
            update_data as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASegmentationStructAV1__bindgen_ty_1"]
        [::std::mem::size_of::<_VASegmentationStructAV1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASegmentationStructAV1__bindgen_ty_1"]
        [::std::mem::align_of::<_VASegmentationStructAV1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VASegmentationStructAV1__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VASegmentationStructAV1__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VASegmentationStructAV1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VASegmentationStructAV1__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASegmentationStructAV1"]
        [::std::mem::size_of::<_VASegmentationStructAV1>() - 156usize];
    ["Alignment of _VASegmentationStructAV1"]
        [::std::mem::align_of::<_VASegmentationStructAV1>() - 4usize];
    ["Offset of field: _VASegmentationStructAV1::segment_info_fields"]
        [::std::mem::offset_of!(_VASegmentationStructAV1, segment_info_fields) - 0usize];
    ["Offset of field: _VASegmentationStructAV1::feature_data"]
        [::std::mem::offset_of!(_VASegmentationStructAV1, feature_data) - 4usize];
    ["Offset of field: _VASegmentationStructAV1::feature_mask"]
        [::std::mem::offset_of!(_VASegmentationStructAV1, feature_mask) - 132usize];
    ["Offset of field: _VASegmentationStructAV1::va_reserved"]
        [::std::mem::offset_of!(_VASegmentationStructAV1, va_reserved) - 140usize];
};
pub type VASegmentationStructAV1 = _VASegmentationStructAV1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAFilmGrainStructAV1 {
    pub film_grain_info_fields: _VAFilmGrainStructAV1__bindgen_ty_1,
    pub grain_seed: u16,
    pub num_y_points: u8,
    pub point_y_value: [u8; 14usize],
    pub point_y_scaling: [u8; 14usize],
    pub num_cb_points: u8,
    pub point_cb_value: [u8; 10usize],
    pub point_cb_scaling: [u8; 10usize],
    pub num_cr_points: u8,
    pub point_cr_value: [u8; 10usize],
    pub point_cr_scaling: [u8; 10usize],
    pub ar_coeffs_y: [i8; 24usize],
    pub ar_coeffs_cb: [i8; 25usize],
    pub ar_coeffs_cr: [i8; 25usize],
    pub cb_mult: u8,
    pub cb_luma_mult: u8,
    pub cb_offset: u16,
    pub cr_mult: u8,
    pub cr_luma_mult: u8,
    pub cr_offset: u16,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAFilmGrainStructAV1__bindgen_ty_1 {
    pub bits: _VAFilmGrainStructAV1__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAFilmGrainStructAV1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAFilmGrainStructAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAFilmGrainStructAV1__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAFilmGrainStructAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAFilmGrainStructAV1__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _VAFilmGrainStructAV1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn apply_grain(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_apply_grain(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_scaling_from_luma(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_scaling_from_luma(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn grain_scaling_minus_8(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_grain_scaling_minus_8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ar_coeff_lag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ar_coeff_lag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ar_coeff_shift_minus_6(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ar_coeff_shift_minus_6(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn grain_scale_shift(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_grain_scale_shift(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn overlap_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overlap_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn clip_to_restricted_range(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clip_to_restricted_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        apply_grain: u32,
        chroma_scaling_from_luma: u32,
        grain_scaling_minus_8: u32,
        ar_coeff_lag: u32,
        ar_coeff_shift_minus_6: u32,
        grain_scale_shift: u32,
        overlap_flag: u32,
        clip_to_restricted_range: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let apply_grain: u32 = unsafe { ::std::mem::transmute(apply_grain) };
            apply_grain as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let chroma_scaling_from_luma: u32 =
                unsafe { ::std::mem::transmute(chroma_scaling_from_luma) };
            chroma_scaling_from_luma as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let grain_scaling_minus_8: u32 =
                unsafe { ::std::mem::transmute(grain_scaling_minus_8) };
            grain_scaling_minus_8 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let ar_coeff_lag: u32 = unsafe { ::std::mem::transmute(ar_coeff_lag) };
            ar_coeff_lag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let ar_coeff_shift_minus_6: u32 =
                unsafe { ::std::mem::transmute(ar_coeff_shift_minus_6) };
            ar_coeff_shift_minus_6 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let grain_scale_shift: u32 = unsafe { ::std::mem::transmute(grain_scale_shift) };
            grain_scale_shift as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let overlap_flag: u32 = unsafe { ::std::mem::transmute(overlap_flag) };
            overlap_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let clip_to_restricted_range: u32 =
                unsafe { ::std::mem::transmute(clip_to_restricted_range) };
            clip_to_restricted_range as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAFilmGrainStructAV1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAFilmGrainStructAV1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAFilmGrainStructAV1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAFilmGrainStructAV1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAFilmGrainStructAV1__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAFilmGrainStructAV1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAFilmGrainStructAV1"][::std::mem::size_of::<_VAFilmGrainStructAV1>() - 176usize];
    ["Alignment of _VAFilmGrainStructAV1"]
        [::std::mem::align_of::<_VAFilmGrainStructAV1>() - 4usize];
    ["Offset of field: _VAFilmGrainStructAV1::film_grain_info_fields"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, film_grain_info_fields) - 0usize];
    ["Offset of field: _VAFilmGrainStructAV1::grain_seed"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, grain_seed) - 4usize];
    ["Offset of field: _VAFilmGrainStructAV1::num_y_points"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, num_y_points) - 6usize];
    ["Offset of field: _VAFilmGrainStructAV1::point_y_value"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, point_y_value) - 7usize];
    ["Offset of field: _VAFilmGrainStructAV1::point_y_scaling"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, point_y_scaling) - 21usize];
    ["Offset of field: _VAFilmGrainStructAV1::num_cb_points"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, num_cb_points) - 35usize];
    ["Offset of field: _VAFilmGrainStructAV1::point_cb_value"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, point_cb_value) - 36usize];
    ["Offset of field: _VAFilmGrainStructAV1::point_cb_scaling"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, point_cb_scaling) - 46usize];
    ["Offset of field: _VAFilmGrainStructAV1::num_cr_points"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, num_cr_points) - 56usize];
    ["Offset of field: _VAFilmGrainStructAV1::point_cr_value"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, point_cr_value) - 57usize];
    ["Offset of field: _VAFilmGrainStructAV1::point_cr_scaling"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, point_cr_scaling) - 67usize];
    ["Offset of field: _VAFilmGrainStructAV1::ar_coeffs_y"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, ar_coeffs_y) - 77usize];
    ["Offset of field: _VAFilmGrainStructAV1::ar_coeffs_cb"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, ar_coeffs_cb) - 101usize];
    ["Offset of field: _VAFilmGrainStructAV1::ar_coeffs_cr"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, ar_coeffs_cr) - 126usize];
    ["Offset of field: _VAFilmGrainStructAV1::cb_mult"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, cb_mult) - 151usize];
    ["Offset of field: _VAFilmGrainStructAV1::cb_luma_mult"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, cb_luma_mult) - 152usize];
    ["Offset of field: _VAFilmGrainStructAV1::cb_offset"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, cb_offset) - 154usize];
    ["Offset of field: _VAFilmGrainStructAV1::cr_mult"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, cr_mult) - 156usize];
    ["Offset of field: _VAFilmGrainStructAV1::cr_luma_mult"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, cr_luma_mult) - 157usize];
    ["Offset of field: _VAFilmGrainStructAV1::cr_offset"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, cr_offset) - 158usize];
    ["Offset of field: _VAFilmGrainStructAV1::va_reserved"]
        [::std::mem::offset_of!(_VAFilmGrainStructAV1, va_reserved) - 160usize];
};
pub type VAFilmGrainStructAV1 = _VAFilmGrainStructAV1;
pub const VAAV1TransformationIdentity: VAAV1TransformationType = 0;
pub const VAAV1TransformationTranslation: VAAV1TransformationType = 1;
pub const VAAV1TransformationRotzoom: VAAV1TransformationType = 2;
pub const VAAV1TransformationAffine: VAAV1TransformationType = 3;
pub const VAAV1TransformationCount: VAAV1TransformationType = 4;
pub type VAAV1TransformationType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAWarpedMotionParamsAV1 {
    pub wmtype: VAAV1TransformationType,
    pub wmmat: [i32; 8usize],
    pub invalid: u8,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAWarpedMotionParamsAV1"]
        [::std::mem::size_of::<_VAWarpedMotionParamsAV1>() - 56usize];
    ["Alignment of _VAWarpedMotionParamsAV1"]
        [::std::mem::align_of::<_VAWarpedMotionParamsAV1>() - 4usize];
    ["Offset of field: _VAWarpedMotionParamsAV1::wmtype"]
        [::std::mem::offset_of!(_VAWarpedMotionParamsAV1, wmtype) - 0usize];
    ["Offset of field: _VAWarpedMotionParamsAV1::wmmat"]
        [::std::mem::offset_of!(_VAWarpedMotionParamsAV1, wmmat) - 4usize];
    ["Offset of field: _VAWarpedMotionParamsAV1::invalid"]
        [::std::mem::offset_of!(_VAWarpedMotionParamsAV1, invalid) - 36usize];
    ["Offset of field: _VAWarpedMotionParamsAV1::va_reserved"]
        [::std::mem::offset_of!(_VAWarpedMotionParamsAV1, va_reserved) - 40usize];
};
pub type VAWarpedMotionParamsAV1 = _VAWarpedMotionParamsAV1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VADecPictureParameterBufferAV1 {
    pub profile: u8,
    pub order_hint_bits_minus_1: u8,
    pub bit_depth_idx: u8,
    pub matrix_coefficients: u8,
    pub seq_info_fields: _VADecPictureParameterBufferAV1__bindgen_ty_1,
    pub current_frame: VASurfaceID,
    pub current_display_picture: VASurfaceID,
    pub anchor_frames_num: u8,
    pub anchor_frames_list: *mut VASurfaceID,
    pub frame_width_minus1: u16,
    pub frame_height_minus1: u16,
    pub output_frame_width_in_tiles_minus_1: u16,
    pub output_frame_height_in_tiles_minus_1: u16,
    pub ref_frame_map: [VASurfaceID; 8usize],
    pub ref_frame_idx: [u8; 7usize],
    pub primary_ref_frame: u8,
    pub order_hint: u8,
    pub seg_info: VASegmentationStructAV1,
    pub film_grain_info: VAFilmGrainStructAV1,
    pub tile_cols: u8,
    pub tile_rows: u8,
    pub width_in_sbs_minus_1: [u16; 63usize],
    pub height_in_sbs_minus_1: [u16; 63usize],
    pub tile_count_minus_1: u16,
    pub context_update_tile_id: u16,
    pub pic_info_fields: _VADecPictureParameterBufferAV1__bindgen_ty_2,
    pub superres_scale_denominator: u8,
    pub interp_filter: u8,
    pub filter_level: [u8; 2usize],
    pub filter_level_u: u8,
    pub filter_level_v: u8,
    pub loop_filter_info_fields: _VADecPictureParameterBufferAV1__bindgen_ty_3,
    pub ref_deltas: [i8; 8usize],
    pub mode_deltas: [i8; 2usize],
    pub base_qindex: u8,
    pub y_dc_delta_q: i8,
    pub u_dc_delta_q: i8,
    pub u_ac_delta_q: i8,
    pub v_dc_delta_q: i8,
    pub v_ac_delta_q: i8,
    pub qmatrix_fields: _VADecPictureParameterBufferAV1__bindgen_ty_4,
    pub mode_control_fields: _VADecPictureParameterBufferAV1__bindgen_ty_5,
    pub cdef_damping_minus_3: u8,
    pub cdef_bits: u8,
    pub cdef_y_strengths: [u8; 8usize],
    pub cdef_uv_strengths: [u8; 8usize],
    pub loop_restoration_fields: _VADecPictureParameterBufferAV1__bindgen_ty_6,
    pub wm: [VAWarpedMotionParamsAV1; 7usize],
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADecPictureParameterBufferAV1__bindgen_ty_1 {
    pub fields: _VADecPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VADecPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VADecPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VADecPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn still_picture(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_still_picture(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_128x128_superblock(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_128x128_superblock(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_filter_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_filter_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_intra_edge_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_intra_edge_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_interintra_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_interintra_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_masked_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_masked_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_dual_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_dual_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_order_hint(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_order_hint(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_jnt_comp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_jnt_comp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_cdef(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_cdef(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mono_chrome(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mono_chrome(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn color_range(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn subsampling_x(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_x(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn subsampling_y(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_y(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_sample_position(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_sample_position(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn film_grain_params_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_film_grain_params_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        still_picture: u32,
        use_128x128_superblock: u32,
        enable_filter_intra: u32,
        enable_intra_edge_filter: u32,
        enable_interintra_compound: u32,
        enable_masked_compound: u32,
        enable_dual_filter: u32,
        enable_order_hint: u32,
        enable_jnt_comp: u32,
        enable_cdef: u32,
        mono_chrome: u32,
        color_range: u32,
        subsampling_x: u32,
        subsampling_y: u32,
        chroma_sample_position: u32,
        film_grain_params_present: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let still_picture: u32 = unsafe { ::std::mem::transmute(still_picture) };
            still_picture as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let use_128x128_superblock: u32 =
                unsafe { ::std::mem::transmute(use_128x128_superblock) };
            use_128x128_superblock as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let enable_filter_intra: u32 = unsafe { ::std::mem::transmute(enable_filter_intra) };
            enable_filter_intra as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enable_intra_edge_filter: u32 =
                unsafe { ::std::mem::transmute(enable_intra_edge_filter) };
            enable_intra_edge_filter as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let enable_interintra_compound: u32 =
                unsafe { ::std::mem::transmute(enable_interintra_compound) };
            enable_interintra_compound as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let enable_masked_compound: u32 =
                unsafe { ::std::mem::transmute(enable_masked_compound) };
            enable_masked_compound as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let enable_dual_filter: u32 = unsafe { ::std::mem::transmute(enable_dual_filter) };
            enable_dual_filter as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let enable_order_hint: u32 = unsafe { ::std::mem::transmute(enable_order_hint) };
            enable_order_hint as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let enable_jnt_comp: u32 = unsafe { ::std::mem::transmute(enable_jnt_comp) };
            enable_jnt_comp as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let enable_cdef: u32 = unsafe { ::std::mem::transmute(enable_cdef) };
            enable_cdef as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let mono_chrome: u32 = unsafe { ::std::mem::transmute(mono_chrome) };
            mono_chrome as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let color_range: u32 = unsafe { ::std::mem::transmute(color_range) };
            color_range as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let subsampling_x: u32 = unsafe { ::std::mem::transmute(subsampling_x) };
            subsampling_x as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let subsampling_y: u32 = unsafe { ::std::mem::transmute(subsampling_y) };
            subsampling_y as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let chroma_sample_position: u32 =
                unsafe { ::std::mem::transmute(chroma_sample_position) };
            chroma_sample_position as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let film_grain_params_present: u32 =
                unsafe { ::std::mem::transmute(film_grain_params_present) };
            film_grain_params_present as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_1"]
        [::std::mem::size_of::<_VADecPictureParameterBufferAV1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_1::fields"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_1, fields) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADecPictureParameterBufferAV1__bindgen_ty_2 {
    pub bits: _VADecPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VADecPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VADecPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _VADecPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn frame_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn show_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn showable_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_showable_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_cdf_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_cdf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_screen_content_tools(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_screen_content_tools(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_integer_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_integer_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_intrabc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_intrabc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_superres(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_motion_mode_switchable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_motion_mode_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_ref_frame_mvs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uniform_tile_spacing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uniform_tile_spacing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_warped_motion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn large_scale_tile(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_large_scale_tile(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frame_type: u32,
        show_frame: u32,
        showable_frame: u32,
        error_resilient_mode: u32,
        disable_cdf_update: u32,
        allow_screen_content_tools: u32,
        force_integer_mv: u32,
        allow_intrabc: u32,
        use_superres: u32,
        allow_high_precision_mv: u32,
        is_motion_mode_switchable: u32,
        use_ref_frame_mvs: u32,
        disable_frame_end_update_cdf: u32,
        uniform_tile_spacing_flag: u32,
        allow_warped_motion: u32,
        large_scale_tile: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let frame_type: u32 = unsafe { ::std::mem::transmute(frame_type) };
            frame_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let show_frame: u32 = unsafe { ::std::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let showable_frame: u32 = unsafe { ::std::mem::transmute(showable_frame) };
            showable_frame as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::std::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let disable_cdf_update: u32 = unsafe { ::std::mem::transmute(disable_cdf_update) };
            disable_cdf_update as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let allow_screen_content_tools: u32 =
                unsafe { ::std::mem::transmute(allow_screen_content_tools) };
            allow_screen_content_tools as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let force_integer_mv: u32 = unsafe { ::std::mem::transmute(force_integer_mv) };
            force_integer_mv as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let allow_intrabc: u32 = unsafe { ::std::mem::transmute(allow_intrabc) };
            allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let use_superres: u32 = unsafe { ::std::mem::transmute(use_superres) };
            use_superres as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::std::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let is_motion_mode_switchable: u32 =
                unsafe { ::std::mem::transmute(is_motion_mode_switchable) };
            is_motion_mode_switchable as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let use_ref_frame_mvs: u32 = unsafe { ::std::mem::transmute(use_ref_frame_mvs) };
            use_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::std::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let uniform_tile_spacing_flag: u32 =
                unsafe { ::std::mem::transmute(uniform_tile_spacing_flag) };
            uniform_tile_spacing_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let allow_warped_motion: u32 = unsafe { ::std::mem::transmute(allow_warped_motion) };
            allow_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let large_scale_tile: u32 = unsafe { ::std::mem::transmute(large_scale_tile) };
            large_scale_tile as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_2"]
        [::std::mem::size_of::<_VADecPictureParameterBufferAV1__bindgen_ty_2>() - 4usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_2"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_2, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADecPictureParameterBufferAV1__bindgen_ty_3 {
    pub bits: _VADecPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1,
    pub value: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VADecPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1"][::std::mem::size_of::<
        _VADecPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1,
    >() - 1usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1>()
            - 1usize];
};
impl _VADecPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn sharpness_level(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_sharpness_level(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mode_ref_delta_enabled(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mode_ref_delta_enabled(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mode_ref_delta_update(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mode_ref_delta_update(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sharpness_level: u8,
        mode_ref_delta_enabled: u8,
        mode_ref_delta_update: u8,
        reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let sharpness_level: u8 = unsafe { ::std::mem::transmute(sharpness_level) };
            sharpness_level as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mode_ref_delta_enabled: u8 =
                unsafe { ::std::mem::transmute(mode_ref_delta_enabled) };
            mode_ref_delta_enabled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mode_ref_delta_update: u8 = unsafe { ::std::mem::transmute(mode_ref_delta_update) };
            mode_ref_delta_update as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_3"]
        [::std::mem::size_of::<_VADecPictureParameterBufferAV1__bindgen_ty_3>() - 1usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_3"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_3>() - 1usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_3::bits"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_3, bits) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_3::value"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_3, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADecPictureParameterBufferAV1__bindgen_ty_4 {
    pub bits: _VADecPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1,
    pub value: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct _VADecPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1"][::std::mem::size_of::<
        _VADecPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1,
    >() - 2usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1>()
            - 2usize];
};
impl _VADecPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn using_qmatrix(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_using_qmatrix(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn qm_y(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_qm_y(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn qm_u(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_qm_u(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn qm_v(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_qm_v(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        using_qmatrix: u16,
        qm_y: u16,
        qm_u: u16,
        qm_v: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let using_qmatrix: u16 = unsafe { ::std::mem::transmute(using_qmatrix) };
            using_qmatrix as u64
        });
        __bindgen_bitfield_unit.set(1usize, 4u8, {
            let qm_y: u16 = unsafe { ::std::mem::transmute(qm_y) };
            qm_y as u64
        });
        __bindgen_bitfield_unit.set(5usize, 4u8, {
            let qm_u: u16 = unsafe { ::std::mem::transmute(qm_u) };
            qm_u as u64
        });
        __bindgen_bitfield_unit.set(9usize, 4u8, {
            let qm_v: u16 = unsafe { ::std::mem::transmute(qm_v) };
            qm_v as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_4"]
        [::std::mem::size_of::<_VADecPictureParameterBufferAV1__bindgen_ty_4>() - 2usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_4"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_4>() - 2usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_4::bits"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_4, bits) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_4::value"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_4, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADecPictureParameterBufferAV1__bindgen_ty_5 {
    pub bits: _VADecPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VADecPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1"][::std::mem::size_of::<
        _VADecPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1>()
            - 4usize];
};
impl _VADecPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn delta_q_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_delta_q_res(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_delta_q_res(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_lf_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_delta_lf_res(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_delta_lf_res(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_lf_multi(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_multi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reference_select(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_select(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reduced_tx_set_used(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_tx_set_used(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_mode_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mode_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        delta_q_present_flag: u32,
        log2_delta_q_res: u32,
        delta_lf_present_flag: u32,
        log2_delta_lf_res: u32,
        delta_lf_multi: u32,
        tx_mode: u32,
        reference_select: u32,
        reduced_tx_set_used: u32,
        skip_mode_present: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let delta_q_present_flag: u32 = unsafe { ::std::mem::transmute(delta_q_present_flag) };
            delta_q_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let log2_delta_q_res: u32 = unsafe { ::std::mem::transmute(log2_delta_q_res) };
            log2_delta_q_res as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let delta_lf_present_flag: u32 =
                unsafe { ::std::mem::transmute(delta_lf_present_flag) };
            delta_lf_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let log2_delta_lf_res: u32 = unsafe { ::std::mem::transmute(log2_delta_lf_res) };
            log2_delta_lf_res as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let delta_lf_multi: u32 = unsafe { ::std::mem::transmute(delta_lf_multi) };
            delta_lf_multi as u64
        });
        __bindgen_bitfield_unit.set(7usize, 2u8, {
            let tx_mode: u32 = unsafe { ::std::mem::transmute(tx_mode) };
            tx_mode as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let reference_select: u32 = unsafe { ::std::mem::transmute(reference_select) };
            reference_select as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let reduced_tx_set_used: u32 = unsafe { ::std::mem::transmute(reduced_tx_set_used) };
            reduced_tx_set_used as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let skip_mode_present: u32 = unsafe { ::std::mem::transmute(skip_mode_present) };
            skip_mode_present as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_5"]
        [::std::mem::size_of::<_VADecPictureParameterBufferAV1__bindgen_ty_5>() - 4usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_5"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_5>() - 4usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_5::bits"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_5, bits) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_5::value"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_5, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VADecPictureParameterBufferAV1__bindgen_ty_6 {
    pub bits: _VADecPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1,
    pub value: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct _VADecPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1"][::std::mem::size_of::<
        _VADecPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1,
    >() - 2usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1>()
            - 2usize];
};
impl _VADecPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn yframe_restoration_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_yframe_restoration_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cbframe_restoration_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_cbframe_restoration_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn crframe_restoration_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_crframe_restoration_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lr_unit_shift(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_lr_unit_shift(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lr_uv_shift(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lr_uv_shift(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        yframe_restoration_type: u16,
        cbframe_restoration_type: u16,
        crframe_restoration_type: u16,
        lr_unit_shift: u16,
        lr_uv_shift: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let yframe_restoration_type: u16 =
                unsafe { ::std::mem::transmute(yframe_restoration_type) };
            yframe_restoration_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let cbframe_restoration_type: u16 =
                unsafe { ::std::mem::transmute(cbframe_restoration_type) };
            cbframe_restoration_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let crframe_restoration_type: u16 =
                unsafe { ::std::mem::transmute(crframe_restoration_type) };
            crframe_restoration_type as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let lr_unit_shift: u16 = unsafe { ::std::mem::transmute(lr_unit_shift) };
            lr_unit_shift as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let lr_uv_shift: u16 = unsafe { ::std::mem::transmute(lr_uv_shift) };
            lr_uv_shift as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1__bindgen_ty_6"]
        [::std::mem::size_of::<_VADecPictureParameterBufferAV1__bindgen_ty_6>() - 2usize];
    ["Alignment of _VADecPictureParameterBufferAV1__bindgen_ty_6"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1__bindgen_ty_6>() - 2usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_6::bits"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_6, bits) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferAV1__bindgen_ty_6::value"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1__bindgen_ty_6, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VADecPictureParameterBufferAV1"]
        [::std::mem::size_of::<_VADecPictureParameterBufferAV1>() - 1160usize];
    ["Alignment of _VADecPictureParameterBufferAV1"]
        [::std::mem::align_of::<_VADecPictureParameterBufferAV1>() - 8usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::profile"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, profile) - 0usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::order_hint_bits_minus_1"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, order_hint_bits_minus_1) - 1usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::bit_depth_idx"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, bit_depth_idx) - 2usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::matrix_coefficients"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, matrix_coefficients) - 3usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::seq_info_fields"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, seq_info_fields) - 4usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::current_frame"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, current_frame) - 8usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::current_display_picture"][::std::mem::offset_of!(
        _VADecPictureParameterBufferAV1,
        current_display_picture
    ) - 12usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::anchor_frames_num"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, anchor_frames_num) - 16usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::anchor_frames_list"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, anchor_frames_list) - 24usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::frame_width_minus1"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, frame_width_minus1) - 32usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::frame_height_minus1"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, frame_height_minus1) - 34usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::output_frame_width_in_tiles_minus_1"][::std::mem::offset_of!(
        _VADecPictureParameterBufferAV1,
        output_frame_width_in_tiles_minus_1
    )
        - 36usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::output_frame_height_in_tiles_minus_1"][::std::mem::offset_of!(
        _VADecPictureParameterBufferAV1,
        output_frame_height_in_tiles_minus_1
    )
        - 38usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::ref_frame_map"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, ref_frame_map) - 40usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::ref_frame_idx"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, ref_frame_idx) - 72usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::primary_ref_frame"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, primary_ref_frame) - 79usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::order_hint"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, order_hint) - 80usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::seg_info"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, seg_info) - 84usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::film_grain_info"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, film_grain_info) - 240usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::tile_cols"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, tile_cols) - 416usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::tile_rows"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, tile_rows) - 417usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::width_in_sbs_minus_1"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, width_in_sbs_minus_1) - 418usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::height_in_sbs_minus_1"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, height_in_sbs_minus_1) - 544usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::tile_count_minus_1"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, tile_count_minus_1) - 670usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::context_update_tile_id"][::std::mem::offset_of!(
        _VADecPictureParameterBufferAV1,
        context_update_tile_id
    ) - 672usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::pic_info_fields"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, pic_info_fields) - 676usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::superres_scale_denominator"][::std::mem::offset_of!(
        _VADecPictureParameterBufferAV1,
        superres_scale_denominator
    ) - 680usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::interp_filter"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, interp_filter) - 681usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::filter_level"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, filter_level) - 682usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::filter_level_u"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, filter_level_u) - 684usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::filter_level_v"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, filter_level_v) - 685usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::loop_filter_info_fields"][::std::mem::offset_of!(
        _VADecPictureParameterBufferAV1,
        loop_filter_info_fields
    ) - 686usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::ref_deltas"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, ref_deltas) - 687usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::mode_deltas"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, mode_deltas) - 695usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::base_qindex"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, base_qindex) - 697usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::y_dc_delta_q"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, y_dc_delta_q) - 698usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::u_dc_delta_q"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, u_dc_delta_q) - 699usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::u_ac_delta_q"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, u_ac_delta_q) - 700usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::v_dc_delta_q"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, v_dc_delta_q) - 701usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::v_ac_delta_q"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, v_ac_delta_q) - 702usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::qmatrix_fields"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, qmatrix_fields) - 704usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::mode_control_fields"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, mode_control_fields) - 708usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::cdef_damping_minus_3"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, cdef_damping_minus_3) - 712usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::cdef_bits"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, cdef_bits) - 713usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::cdef_y_strengths"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, cdef_y_strengths) - 714usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::cdef_uv_strengths"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, cdef_uv_strengths) - 722usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::loop_restoration_fields"][::std::mem::offset_of!(
        _VADecPictureParameterBufferAV1,
        loop_restoration_fields
    ) - 730usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::wm"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, wm) - 732usize];
    ["Offset of field: _VADecPictureParameterBufferAV1::va_reserved"]
        [::std::mem::offset_of!(_VADecPictureParameterBufferAV1, va_reserved) - 1124usize];
};
pub type VADecPictureParameterBufferAV1 = _VADecPictureParameterBufferAV1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferAV1 {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub tile_row: u16,
    pub tile_column: u16,
    pub tg_start: u16,
    pub tg_end: u16,
    pub anchor_frame_idx: u8,
    pub tile_idx_in_tile_list: u16,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferAV1"]
        [::std::mem::size_of::<_VASliceParameterBufferAV1>() - 40usize];
    ["Alignment of _VASliceParameterBufferAV1"]
        [::std::mem::align_of::<_VASliceParameterBufferAV1>() - 4usize];
    ["Offset of field: _VASliceParameterBufferAV1::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferAV1::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferAV1::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferAV1::tile_row"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, tile_row) - 12usize];
    ["Offset of field: _VASliceParameterBufferAV1::tile_column"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, tile_column) - 14usize];
    ["Offset of field: _VASliceParameterBufferAV1::tg_start"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, tg_start) - 16usize];
    ["Offset of field: _VASliceParameterBufferAV1::tg_end"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, tg_end) - 18usize];
    ["Offset of field: _VASliceParameterBufferAV1::anchor_frame_idx"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, anchor_frame_idx) - 20usize];
    ["Offset of field: _VASliceParameterBufferAV1::tile_idx_in_tile_list"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, tile_idx_in_tile_list) - 22usize];
    ["Offset of field: _VASliceParameterBufferAV1::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferAV1, va_reserved) - 24usize];
};
pub type VASliceParameterBufferAV1 = _VASliceParameterBufferAV1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAWeightedPredInfo {
    pub luma_log2_weight_denom: u8,
    pub delta_chroma_log2_weight_denom: i8,
    pub num_l0_weights: u8,
    pub luma_weight_l0_flag: [u8; 15usize],
    pub chroma_weight_l0_flag: [u8; 15usize],
    pub delta_luma_weight_l0: [i8; 15usize],
    pub luma_offset_l0: [i8; 15usize],
    pub delta_chroma_weight_l0: [[i8; 2usize]; 15usize],
    pub delta_chroma_offset_l0: [[i16; 2usize]; 15usize],
    pub num_l1_weights: u8,
    pub luma_weight_l1_flag: [u8; 15usize],
    pub chroma_weight_l1_flag: [u8; 15usize],
    pub delta_luma_weight_l1: [i8; 15usize],
    pub luma_offset_l1: [i8; 15usize],
    pub delta_chroma_weight_l1: [[i8; 2usize]; 15usize],
    pub delta_chroma_offset_l1: [[i16; 2usize]; 15usize],
    pub reserved16b: u16,
    pub reserved32b: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAWeightedPredInfo"][::std::mem::size_of::<_VAWeightedPredInfo>() - 312usize];
    ["Alignment of _VAWeightedPredInfo"][::std::mem::align_of::<_VAWeightedPredInfo>() - 4usize];
    ["Offset of field: _VAWeightedPredInfo::luma_log2_weight_denom"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, luma_log2_weight_denom) - 0usize];
    ["Offset of field: _VAWeightedPredInfo::delta_chroma_log2_weight_denom"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, delta_chroma_log2_weight_denom) - 1usize];
    ["Offset of field: _VAWeightedPredInfo::num_l0_weights"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, num_l0_weights) - 2usize];
    ["Offset of field: _VAWeightedPredInfo::luma_weight_l0_flag"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, luma_weight_l0_flag) - 3usize];
    ["Offset of field: _VAWeightedPredInfo::chroma_weight_l0_flag"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, chroma_weight_l0_flag) - 18usize];
    ["Offset of field: _VAWeightedPredInfo::delta_luma_weight_l0"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, delta_luma_weight_l0) - 33usize];
    ["Offset of field: _VAWeightedPredInfo::luma_offset_l0"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, luma_offset_l0) - 48usize];
    ["Offset of field: _VAWeightedPredInfo::delta_chroma_weight_l0"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, delta_chroma_weight_l0) - 63usize];
    ["Offset of field: _VAWeightedPredInfo::delta_chroma_offset_l0"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, delta_chroma_offset_l0) - 94usize];
    ["Offset of field: _VAWeightedPredInfo::num_l1_weights"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, num_l1_weights) - 154usize];
    ["Offset of field: _VAWeightedPredInfo::luma_weight_l1_flag"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, luma_weight_l1_flag) - 155usize];
    ["Offset of field: _VAWeightedPredInfo::chroma_weight_l1_flag"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, chroma_weight_l1_flag) - 170usize];
    ["Offset of field: _VAWeightedPredInfo::delta_luma_weight_l1"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, delta_luma_weight_l1) - 185usize];
    ["Offset of field: _VAWeightedPredInfo::luma_offset_l1"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, luma_offset_l1) - 200usize];
    ["Offset of field: _VAWeightedPredInfo::delta_chroma_weight_l1"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, delta_chroma_weight_l1) - 215usize];
    ["Offset of field: _VAWeightedPredInfo::delta_chroma_offset_l1"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, delta_chroma_offset_l1) - 246usize];
    ["Offset of field: _VAWeightedPredInfo::reserved16b"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, reserved16b) - 306usize];
    ["Offset of field: _VAWeightedPredInfo::reserved32b"]
        [::std::mem::offset_of!(_VAWeightedPredInfo, reserved32b) - 308usize];
};
pub type VAWeightedPredInfo = _VAWeightedPredInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAPictureParameterBufferVVC {
    pub CurrPic: VAPictureVVC,
    pub ReferenceFrames: [VAPictureVVC; 15usize],
    pub pps_pic_width_in_luma_samples: u16,
    pub pps_pic_height_in_luma_samples: u16,
    pub sps_num_subpics_minus1: u16,
    pub sps_chroma_format_idc: u8,
    pub sps_bitdepth_minus8: u8,
    pub sps_log2_ctu_size_minus5: u8,
    pub sps_log2_min_luma_coding_block_size_minus2: u8,
    pub sps_log2_transform_skip_max_size_minus2: u8,
    pub ChromaQpTable: [[i8; 111usize]; 3usize],
    pub sps_six_minus_max_num_merge_cand: u8,
    pub sps_five_minus_max_num_subblock_merge_cand: u8,
    pub sps_max_num_merge_cand_minus_max_num_gpm_cand: u8,
    pub sps_log2_parallel_merge_level_minus2: u8,
    pub sps_min_qp_prime_ts: u8,
    pub sps_six_minus_max_num_ibc_merge_cand: u8,
    pub sps_num_ladf_intervals_minus2: u8,
    pub sps_ladf_lowest_interval_qp_offset: i8,
    pub sps_ladf_qp_offset: [i8; 4usize],
    pub sps_ladf_delta_threshold_minus1: [u16; 4usize],
    pub reserved32b01: [u32; 2usize],
    pub sps_flags: _VAPictureParameterBufferVVC__bindgen_ty_1,
    pub NumVerVirtualBoundaries: u8,
    pub NumHorVirtualBoundaries: u8,
    pub VirtualBoundaryPosX: [u16; 3usize],
    pub VirtualBoundaryPosY: [u16; 3usize],
    pub pps_scaling_win_left_offset: i32,
    pub pps_scaling_win_right_offset: i32,
    pub pps_scaling_win_top_offset: i32,
    pub pps_scaling_win_bottom_offset: i32,
    pub pps_num_exp_tile_columns_minus1: i8,
    pub pps_num_exp_tile_rows_minus1: u16,
    pub pps_num_slices_in_pic_minus1: u16,
    pub pps_pic_width_minus_wraparound_offset: u16,
    pub pps_cb_qp_offset: i8,
    pub pps_cr_qp_offset: i8,
    pub pps_joint_cbcr_qp_offset_value: i8,
    pub pps_chroma_qp_offset_list_len_minus1: u8,
    pub pps_cb_qp_offset_list: [i8; 6usize],
    pub pps_cr_qp_offset_list: [i8; 6usize],
    pub pps_joint_cbcr_qp_offset_list: [i8; 6usize],
    pub reserved16b01: u16,
    pub reserved32b02: [u32; 2usize],
    pub pps_flags: _VAPictureParameterBufferVVC__bindgen_ty_2,
    pub ph_lmcs_aps_id: u8,
    pub ph_scaling_list_aps_id: u8,
    pub ph_log2_diff_min_qt_min_cb_intra_slice_luma: u8,
    pub ph_max_mtt_hierarchy_depth_intra_slice_luma: u8,
    pub ph_log2_diff_max_bt_min_qt_intra_slice_luma: u8,
    pub ph_log2_diff_max_tt_min_qt_intra_slice_luma: u8,
    pub ph_log2_diff_min_qt_min_cb_intra_slice_chroma: u8,
    pub ph_max_mtt_hierarchy_depth_intra_slice_chroma: u8,
    pub ph_log2_diff_max_bt_min_qt_intra_slice_chroma: u8,
    pub ph_log2_diff_max_tt_min_qt_intra_slice_chroma: u8,
    pub ph_cu_qp_delta_subdiv_intra_slice: u8,
    pub ph_cu_chroma_qp_offset_subdiv_intra_slice: u8,
    pub ph_log2_diff_min_qt_min_cb_inter_slice: u8,
    pub ph_max_mtt_hierarchy_depth_inter_slice: u8,
    pub ph_log2_diff_max_bt_min_qt_inter_slice: u8,
    pub ph_log2_diff_max_tt_min_qt_inter_slice: u8,
    pub ph_cu_qp_delta_subdiv_inter_slice: u8,
    pub ph_cu_chroma_qp_offset_subdiv_inter_slice: u8,
    pub reserved16b02: u16,
    pub reserved32b03: [u32; 2usize],
    pub ph_flags: _VAPictureParameterBufferVVC__bindgen_ty_3,
    pub reserved32b04: u32,
    pub PicMiscFlags: _VAPictureParameterBufferVVC__bindgen_ty_4,
    pub reserved32b: [u32; 17usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVVC__bindgen_ty_1 {
    pub bits: _VAPictureParameterBufferVVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
};
impl _VAPictureParameterBufferVVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn sps_subpic_info_present_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_subpic_info_present_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_independent_subpics_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_independent_subpics_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_subpic_same_size_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_subpic_same_size_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_entropy_coding_sync_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_entropy_coding_sync_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_qtbtt_dual_tree_intra_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_qtbtt_dual_tree_intra_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_max_luma_transform_size_64_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_max_luma_transform_size_64_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_transform_skip_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_transform_skip_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_bdpcm_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_bdpcm_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_mts_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_mts_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_explicit_mts_intra_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_explicit_mts_intra_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_explicit_mts_inter_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_explicit_mts_inter_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_lfnst_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_lfnst_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_joint_cbcr_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_joint_cbcr_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_same_qp_table_for_chroma_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_same_qp_table_for_chroma_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_sao_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_sao_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_alf_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_alf_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_ccalf_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_ccalf_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_lmcs_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_lmcs_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_sbtmvp_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_sbtmvp_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_amvr_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_amvr_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_smvd_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_smvd_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_mmvd_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_mmvd_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_sbt_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_sbt_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_affine_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_affine_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_6param_affine_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_6param_affine_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_affine_amvr_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_affine_amvr_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_affine_prof_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_affine_prof_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_bcw_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_bcw_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_ciip_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_ciip_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_gpm_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_gpm_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_isp_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_isp_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_mrl_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_mrl_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_mip_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_mip_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_cclm_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_cclm_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_chroma_horizontal_collocated_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_chroma_horizontal_collocated_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_chroma_vertical_collocated_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_chroma_vertical_collocated_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_palette_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_palette_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_act_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_act_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_ibc_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_ibc_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_ladf_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_ladf_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_explicit_scaling_list_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_explicit_scaling_list_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_scaling_matrix_for_lfnst_disabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_scaling_matrix_for_lfnst_disabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_scaling_matrix_for_alternative_colour_space_disabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_scaling_matrix_for_alternative_colour_space_disabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_scaling_matrix_designated_colour_space_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_scaling_matrix_designated_colour_space_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_virtual_boundaries_enabled_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(44usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_virtual_boundaries_enabled_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_virtual_boundaries_present_flag(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(45usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_sps_virtual_boundaries_present_flag(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(45usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(46usize, 18u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(46usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sps_subpic_info_present_flag: u64,
        sps_independent_subpics_flag: u64,
        sps_subpic_same_size_flag: u64,
        sps_entropy_coding_sync_enabled_flag: u64,
        sps_qtbtt_dual_tree_intra_flag: u64,
        sps_max_luma_transform_size_64_flag: u64,
        sps_transform_skip_enabled_flag: u64,
        sps_bdpcm_enabled_flag: u64,
        sps_mts_enabled_flag: u64,
        sps_explicit_mts_intra_enabled_flag: u64,
        sps_explicit_mts_inter_enabled_flag: u64,
        sps_lfnst_enabled_flag: u64,
        sps_joint_cbcr_enabled_flag: u64,
        sps_same_qp_table_for_chroma_flag: u64,
        sps_sao_enabled_flag: u64,
        sps_alf_enabled_flag: u64,
        sps_ccalf_enabled_flag: u64,
        sps_lmcs_enabled_flag: u64,
        sps_sbtmvp_enabled_flag: u64,
        sps_amvr_enabled_flag: u64,
        sps_smvd_enabled_flag: u64,
        sps_mmvd_enabled_flag: u64,
        sps_sbt_enabled_flag: u64,
        sps_affine_enabled_flag: u64,
        sps_6param_affine_enabled_flag: u64,
        sps_affine_amvr_enabled_flag: u64,
        sps_affine_prof_enabled_flag: u64,
        sps_bcw_enabled_flag: u64,
        sps_ciip_enabled_flag: u64,
        sps_gpm_enabled_flag: u64,
        sps_isp_enabled_flag: u64,
        sps_mrl_enabled_flag: u64,
        sps_mip_enabled_flag: u64,
        sps_cclm_enabled_flag: u64,
        sps_chroma_horizontal_collocated_flag: u64,
        sps_chroma_vertical_collocated_flag: u64,
        sps_palette_enabled_flag: u64,
        sps_act_enabled_flag: u64,
        sps_ibc_enabled_flag: u64,
        sps_ladf_enabled_flag: u64,
        sps_explicit_scaling_list_enabled_flag: u64,
        sps_scaling_matrix_for_lfnst_disabled_flag: u64,
        sps_scaling_matrix_for_alternative_colour_space_disabled_flag: u64,
        sps_scaling_matrix_designated_colour_space_flag: u64,
        sps_virtual_boundaries_enabled_flag: u64,
        sps_virtual_boundaries_present_flag: u64,
        reserved: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sps_subpic_info_present_flag: u64 =
                unsafe { ::std::mem::transmute(sps_subpic_info_present_flag) };
            sps_subpic_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sps_independent_subpics_flag: u64 =
                unsafe { ::std::mem::transmute(sps_independent_subpics_flag) };
            sps_independent_subpics_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sps_subpic_same_size_flag: u64 =
                unsafe { ::std::mem::transmute(sps_subpic_same_size_flag) };
            sps_subpic_same_size_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sps_entropy_coding_sync_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_entropy_coding_sync_enabled_flag) };
            sps_entropy_coding_sync_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let sps_qtbtt_dual_tree_intra_flag: u64 =
                unsafe { ::std::mem::transmute(sps_qtbtt_dual_tree_intra_flag) };
            sps_qtbtt_dual_tree_intra_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sps_max_luma_transform_size_64_flag: u64 =
                unsafe { ::std::mem::transmute(sps_max_luma_transform_size_64_flag) };
            sps_max_luma_transform_size_64_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sps_transform_skip_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_transform_skip_enabled_flag) };
            sps_transform_skip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sps_bdpcm_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_bdpcm_enabled_flag) };
            sps_bdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let sps_mts_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_mts_enabled_flag) };
            sps_mts_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let sps_explicit_mts_intra_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_explicit_mts_intra_enabled_flag) };
            sps_explicit_mts_intra_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let sps_explicit_mts_inter_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_explicit_mts_inter_enabled_flag) };
            sps_explicit_mts_inter_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let sps_lfnst_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_lfnst_enabled_flag) };
            sps_lfnst_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let sps_joint_cbcr_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_joint_cbcr_enabled_flag) };
            sps_joint_cbcr_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let sps_same_qp_table_for_chroma_flag: u64 =
                unsafe { ::std::mem::transmute(sps_same_qp_table_for_chroma_flag) };
            sps_same_qp_table_for_chroma_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let sps_sao_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_sao_enabled_flag) };
            sps_sao_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sps_alf_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_alf_enabled_flag) };
            sps_alf_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let sps_ccalf_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_ccalf_enabled_flag) };
            sps_ccalf_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let sps_lmcs_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_lmcs_enabled_flag) };
            sps_lmcs_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let sps_sbtmvp_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_sbtmvp_enabled_flag) };
            sps_sbtmvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let sps_amvr_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_amvr_enabled_flag) };
            sps_amvr_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let sps_smvd_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_smvd_enabled_flag) };
            sps_smvd_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let sps_mmvd_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_mmvd_enabled_flag) };
            sps_mmvd_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let sps_sbt_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_sbt_enabled_flag) };
            sps_sbt_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let sps_affine_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_affine_enabled_flag) };
            sps_affine_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let sps_6param_affine_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_6param_affine_enabled_flag) };
            sps_6param_affine_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let sps_affine_amvr_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_affine_amvr_enabled_flag) };
            sps_affine_amvr_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let sps_affine_prof_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_affine_prof_enabled_flag) };
            sps_affine_prof_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let sps_bcw_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_bcw_enabled_flag) };
            sps_bcw_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let sps_ciip_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_ciip_enabled_flag) };
            sps_ciip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let sps_gpm_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_gpm_enabled_flag) };
            sps_gpm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let sps_isp_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_isp_enabled_flag) };
            sps_isp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let sps_mrl_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_mrl_enabled_flag) };
            sps_mrl_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let sps_mip_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_mip_enabled_flag) };
            sps_mip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let sps_cclm_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_cclm_enabled_flag) };
            sps_cclm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let sps_chroma_horizontal_collocated_flag: u64 =
                unsafe { ::std::mem::transmute(sps_chroma_horizontal_collocated_flag) };
            sps_chroma_horizontal_collocated_flag as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let sps_chroma_vertical_collocated_flag: u64 =
                unsafe { ::std::mem::transmute(sps_chroma_vertical_collocated_flag) };
            sps_chroma_vertical_collocated_flag as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let sps_palette_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_palette_enabled_flag) };
            sps_palette_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let sps_act_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_act_enabled_flag) };
            sps_act_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let sps_ibc_enabled_flag: u64 = unsafe { ::std::mem::transmute(sps_ibc_enabled_flag) };
            sps_ibc_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let sps_ladf_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_ladf_enabled_flag) };
            sps_ladf_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let sps_explicit_scaling_list_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_explicit_scaling_list_enabled_flag) };
            sps_explicit_scaling_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let sps_scaling_matrix_for_lfnst_disabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_scaling_matrix_for_lfnst_disabled_flag) };
            sps_scaling_matrix_for_lfnst_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let sps_scaling_matrix_for_alternative_colour_space_disabled_flag: u64 = unsafe {
                ::std::mem::transmute(sps_scaling_matrix_for_alternative_colour_space_disabled_flag)
            };
            sps_scaling_matrix_for_alternative_colour_space_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let sps_scaling_matrix_designated_colour_space_flag: u64 =
                unsafe { ::std::mem::transmute(sps_scaling_matrix_designated_colour_space_flag) };
            sps_scaling_matrix_designated_colour_space_flag as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let sps_virtual_boundaries_enabled_flag: u64 =
                unsafe { ::std::mem::transmute(sps_virtual_boundaries_enabled_flag) };
            sps_virtual_boundaries_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(45usize, 1u8, {
            let sps_virtual_boundaries_present_flag: u64 =
                unsafe { ::std::mem::transmute(sps_virtual_boundaries_present_flag) };
            sps_virtual_boundaries_present_flag as u64
        });
        __bindgen_bitfield_unit.set(46usize, 18u8, {
            let reserved: u64 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VAPictureParameterBufferVVC__bindgen_ty_1>() - 8usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VAPictureParameterBufferVVC__bindgen_ty_1>() - 8usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVVC__bindgen_ty_2 {
    pub bits: _VAPictureParameterBufferVVC__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVVC__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_2__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVVC__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn pps_loop_filter_across_tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_loop_filter_across_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_rect_slice_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_rect_slice_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_single_slice_per_subpic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_single_slice_per_subpic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_weighted_bipred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_weighted_bipred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_ref_wraparound_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_ref_wraparound_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_cu_qp_delta_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_cu_qp_delta_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_cu_chroma_qp_offset_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_cu_chroma_qp_offset_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_deblocking_filter_override_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_deblocking_filter_override_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_dbf_info_in_ph_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_dbf_info_in_ph_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_sao_info_in_ph_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_sao_info_in_ph_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_alf_info_in_ph_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_alf_info_in_ph_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pps_loop_filter_across_tiles_enabled_flag: u32,
        pps_rect_slice_flag: u32,
        pps_single_slice_per_subpic_flag: u32,
        pps_loop_filter_across_slices_enabled_flag: u32,
        pps_weighted_pred_flag: u32,
        pps_weighted_bipred_flag: u32,
        pps_ref_wraparound_enabled_flag: u32,
        pps_cu_qp_delta_enabled_flag: u32,
        pps_cu_chroma_qp_offset_list_enabled_flag: u32,
        pps_deblocking_filter_override_enabled_flag: u32,
        pps_deblocking_filter_disabled_flag: u32,
        pps_dbf_info_in_ph_flag: u32,
        pps_sao_info_in_ph_flag: u32,
        pps_alf_info_in_ph_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pps_loop_filter_across_tiles_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_loop_filter_across_tiles_enabled_flag) };
            pps_loop_filter_across_tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let pps_rect_slice_flag: u32 = unsafe { ::std::mem::transmute(pps_rect_slice_flag) };
            pps_rect_slice_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let pps_single_slice_per_subpic_flag: u32 =
                unsafe { ::std::mem::transmute(pps_single_slice_per_subpic_flag) };
            pps_single_slice_per_subpic_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let pps_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_loop_filter_across_slices_enabled_flag) };
            pps_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let pps_weighted_pred_flag: u32 =
                unsafe { ::std::mem::transmute(pps_weighted_pred_flag) };
            pps_weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pps_weighted_bipred_flag: u32 =
                unsafe { ::std::mem::transmute(pps_weighted_bipred_flag) };
            pps_weighted_bipred_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let pps_ref_wraparound_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_ref_wraparound_enabled_flag) };
            pps_ref_wraparound_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pps_cu_qp_delta_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_cu_qp_delta_enabled_flag) };
            pps_cu_qp_delta_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let pps_cu_chroma_qp_offset_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_cu_chroma_qp_offset_list_enabled_flag) };
            pps_cu_chroma_qp_offset_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let pps_deblocking_filter_override_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_deblocking_filter_override_enabled_flag) };
            pps_deblocking_filter_override_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let pps_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_deblocking_filter_disabled_flag) };
            pps_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let pps_dbf_info_in_ph_flag: u32 =
                unsafe { ::std::mem::transmute(pps_dbf_info_in_ph_flag) };
            pps_dbf_info_in_ph_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let pps_sao_info_in_ph_flag: u32 =
                unsafe { ::std::mem::transmute(pps_sao_info_in_ph_flag) };
            pps_sao_info_in_ph_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let pps_alf_info_in_ph_flag: u32 =
                unsafe { ::std::mem::transmute(pps_alf_info_in_ph_flag) };
            pps_alf_info_in_ph_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_2"]
        [::std::mem::size_of::<_VAPictureParameterBufferVVC__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_2"]
        [::std::mem::align_of::<_VAPictureParameterBufferVVC__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_2, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVVC__bindgen_ty_3 {
    pub bits: _VAPictureParameterBufferVVC__bindgen_ty_3__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVVC__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_3__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_3__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_3__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_3__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVVC__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn ph_non_ref_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_non_ref_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_alf_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_alf_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_alf_cb_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_alf_cb_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_alf_cr_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_alf_cr_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_alf_cc_cb_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_alf_cc_cb_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_alf_cc_cr_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_alf_cc_cr_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_lmcs_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_lmcs_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_chroma_residual_scale_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_chroma_residual_scale_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_explicit_scaling_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_explicit_scaling_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_virtual_boundaries_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_virtual_boundaries_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_mmvd_fullpel_only_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_mmvd_fullpel_only_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_mvd_l1_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_mvd_l1_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_bdof_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_bdof_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_dmvr_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_dmvr_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_prof_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_prof_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_joint_cbcr_sign_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_joint_cbcr_sign_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_sao_luma_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_sao_luma_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_sao_chroma_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_sao_chroma_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ph_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ph_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ph_non_ref_pic_flag: u32,
        ph_alf_enabled_flag: u32,
        ph_alf_cb_enabled_flag: u32,
        ph_alf_cr_enabled_flag: u32,
        ph_alf_cc_cb_enabled_flag: u32,
        ph_alf_cc_cr_enabled_flag: u32,
        ph_lmcs_enabled_flag: u32,
        ph_chroma_residual_scale_flag: u32,
        ph_explicit_scaling_list_enabled_flag: u32,
        ph_virtual_boundaries_present_flag: u32,
        ph_temporal_mvp_enabled_flag: u32,
        ph_mmvd_fullpel_only_flag: u32,
        ph_mvd_l1_zero_flag: u32,
        ph_bdof_disabled_flag: u32,
        ph_dmvr_disabled_flag: u32,
        ph_prof_disabled_flag: u32,
        ph_joint_cbcr_sign_flag: u32,
        ph_sao_luma_enabled_flag: u32,
        ph_sao_chroma_enabled_flag: u32,
        ph_deblocking_filter_disabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ph_non_ref_pic_flag: u32 = unsafe { ::std::mem::transmute(ph_non_ref_pic_flag) };
            ph_non_ref_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ph_alf_enabled_flag: u32 = unsafe { ::std::mem::transmute(ph_alf_enabled_flag) };
            ph_alf_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ph_alf_cb_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_alf_cb_enabled_flag) };
            ph_alf_cb_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ph_alf_cr_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_alf_cr_enabled_flag) };
            ph_alf_cr_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ph_alf_cc_cb_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_alf_cc_cb_enabled_flag) };
            ph_alf_cc_cb_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ph_alf_cc_cr_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_alf_cc_cr_enabled_flag) };
            ph_alf_cc_cr_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ph_lmcs_enabled_flag: u32 = unsafe { ::std::mem::transmute(ph_lmcs_enabled_flag) };
            ph_lmcs_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ph_chroma_residual_scale_flag: u32 =
                unsafe { ::std::mem::transmute(ph_chroma_residual_scale_flag) };
            ph_chroma_residual_scale_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ph_explicit_scaling_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_explicit_scaling_list_enabled_flag) };
            ph_explicit_scaling_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ph_virtual_boundaries_present_flag: u32 =
                unsafe { ::std::mem::transmute(ph_virtual_boundaries_present_flag) };
            ph_virtual_boundaries_present_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ph_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_temporal_mvp_enabled_flag) };
            ph_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let ph_mmvd_fullpel_only_flag: u32 =
                unsafe { ::std::mem::transmute(ph_mmvd_fullpel_only_flag) };
            ph_mmvd_fullpel_only_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ph_mvd_l1_zero_flag: u32 = unsafe { ::std::mem::transmute(ph_mvd_l1_zero_flag) };
            ph_mvd_l1_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let ph_bdof_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_bdof_disabled_flag) };
            ph_bdof_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let ph_dmvr_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_dmvr_disabled_flag) };
            ph_dmvr_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let ph_prof_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_prof_disabled_flag) };
            ph_prof_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let ph_joint_cbcr_sign_flag: u32 =
                unsafe { ::std::mem::transmute(ph_joint_cbcr_sign_flag) };
            ph_joint_cbcr_sign_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let ph_sao_luma_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_sao_luma_enabled_flag) };
            ph_sao_luma_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let ph_sao_chroma_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_sao_chroma_enabled_flag) };
            ph_sao_chroma_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let ph_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(ph_deblocking_filter_disabled_flag) };
            ph_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_3"]
        [::std::mem::size_of::<_VAPictureParameterBufferVVC__bindgen_ty_3>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_3"]
        [::std::mem::align_of::<_VAPictureParameterBufferVVC__bindgen_ty_3>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_3::bits"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_3, bits) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_3::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_3, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAPictureParameterBufferVVC__bindgen_ty_4 {
    pub fields: _VAPictureParameterBufferVVC__bindgen_ty_4__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureParameterBufferVVC__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_4__bindgen_ty_1"][::std::mem::size_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_4__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_4__bindgen_ty_1"][::std::mem::align_of::<
        _VAPictureParameterBufferVVC__bindgen_ty_4__bindgen_ty_1,
    >() - 4usize];
};
impl _VAPictureParameterBufferVVC__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn IntraPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IntraPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(IntraPicFlag: u32, reserved: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let IntraPicFlag: u32 = unsafe { ::std::mem::transmute(IntraPicFlag) };
            IntraPicFlag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC__bindgen_ty_4"]
        [::std::mem::size_of::<_VAPictureParameterBufferVVC__bindgen_ty_4>() - 4usize];
    ["Alignment of _VAPictureParameterBufferVVC__bindgen_ty_4"]
        [::std::mem::align_of::<_VAPictureParameterBufferVVC__bindgen_ty_4>() - 4usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_4::fields"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_4, fields) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVVC__bindgen_ty_4::value"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC__bindgen_ty_4, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureParameterBufferVVC"]
        [::std::mem::size_of::<_VAPictureParameterBufferVVC>() - 1016usize];
    ["Alignment of _VAPictureParameterBufferVVC"]
        [::std::mem::align_of::<_VAPictureParameterBufferVVC>() - 8usize];
    ["Offset of field: _VAPictureParameterBufferVVC::CurrPic"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, CurrPic) - 0usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ReferenceFrames"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, ReferenceFrames) - 28usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_pic_width_in_luma_samples"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_pic_width_in_luma_samples
    ) - 448usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_pic_height_in_luma_samples"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_pic_height_in_luma_samples
    ) - 450usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_num_subpics_minus1"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, sps_num_subpics_minus1) - 452usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_chroma_format_idc"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, sps_chroma_format_idc) - 454usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_bitdepth_minus8"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, sps_bitdepth_minus8) - 455usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_log2_ctu_size_minus5"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, sps_log2_ctu_size_minus5) - 456usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_log2_min_luma_coding_block_size_minus2"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_log2_min_luma_coding_block_size_minus2
    )
        - 457usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_log2_transform_skip_max_size_minus2"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_log2_transform_skip_max_size_minus2
    )
        - 458usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ChromaQpTable"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, ChromaQpTable) - 459usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_six_minus_max_num_merge_cand"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_six_minus_max_num_merge_cand
    )
        - 792usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_five_minus_max_num_subblock_merge_cand"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_five_minus_max_num_subblock_merge_cand
    )
        - 793usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_max_num_merge_cand_minus_max_num_gpm_cand"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , sps_max_num_merge_cand_minus_max_num_gpm_cand) - 794usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::sps_log2_parallel_merge_level_minus2"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_log2_parallel_merge_level_minus2
    )
        - 795usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_min_qp_prime_ts"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, sps_min_qp_prime_ts) - 796usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_six_minus_max_num_ibc_merge_cand"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_six_minus_max_num_ibc_merge_cand
    )
        - 797usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_num_ladf_intervals_minus2"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_num_ladf_intervals_minus2
    ) - 798usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_ladf_lowest_interval_qp_offset"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_ladf_lowest_interval_qp_offset
    )
        - 799usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_ladf_qp_offset"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, sps_ladf_qp_offset) - 800usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_ladf_delta_threshold_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        sps_ladf_delta_threshold_minus1
    )
        - 804usize];
    ["Offset of field: _VAPictureParameterBufferVVC::reserved32b01"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, reserved32b01) - 812usize];
    ["Offset of field: _VAPictureParameterBufferVVC::sps_flags"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, sps_flags) - 824usize];
    ["Offset of field: _VAPictureParameterBufferVVC::NumVerVirtualBoundaries"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, NumVerVirtualBoundaries) - 832usize];
    ["Offset of field: _VAPictureParameterBufferVVC::NumHorVirtualBoundaries"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, NumHorVirtualBoundaries) - 833usize];
    ["Offset of field: _VAPictureParameterBufferVVC::VirtualBoundaryPosX"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, VirtualBoundaryPosX) - 834usize];
    ["Offset of field: _VAPictureParameterBufferVVC::VirtualBoundaryPosY"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, VirtualBoundaryPosY) - 840usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_scaling_win_left_offset"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_scaling_win_left_offset
    ) - 848usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_scaling_win_right_offset"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_scaling_win_right_offset
    ) - 852usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_scaling_win_top_offset"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_scaling_win_top_offset
    ) - 856usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_scaling_win_bottom_offset"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_scaling_win_bottom_offset
    ) - 860usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_num_exp_tile_columns_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_num_exp_tile_columns_minus1
    )
        - 864usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_num_exp_tile_rows_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_num_exp_tile_rows_minus1
    ) - 866usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_num_slices_in_pic_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_num_slices_in_pic_minus1
    ) - 868usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_pic_width_minus_wraparound_offset"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_pic_width_minus_wraparound_offset
    )
        - 870usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_cb_qp_offset"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, pps_cb_qp_offset) - 872usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_cr_qp_offset"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, pps_cr_qp_offset) - 873usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_joint_cbcr_qp_offset_value"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_joint_cbcr_qp_offset_value
    ) - 874usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_chroma_qp_offset_list_len_minus1"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_chroma_qp_offset_list_len_minus1
    )
        - 875usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_cb_qp_offset_list"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, pps_cb_qp_offset_list) - 876usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_cr_qp_offset_list"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, pps_cr_qp_offset_list) - 882usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_joint_cbcr_qp_offset_list"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        pps_joint_cbcr_qp_offset_list
    ) - 888usize];
    ["Offset of field: _VAPictureParameterBufferVVC::reserved16b01"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, reserved16b01) - 894usize];
    ["Offset of field: _VAPictureParameterBufferVVC::reserved32b02"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, reserved32b02) - 896usize];
    ["Offset of field: _VAPictureParameterBufferVVC::pps_flags"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, pps_flags) - 904usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_lmcs_aps_id"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, ph_lmcs_aps_id) - 908usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_scaling_list_aps_id"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, ph_scaling_list_aps_id) - 909usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_min_qt_min_cb_intra_slice_luma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_log2_diff_min_qt_min_cb_intra_slice_luma) - 910usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_max_mtt_hierarchy_depth_intra_slice_luma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_max_mtt_hierarchy_depth_intra_slice_luma) - 911usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_max_bt_min_qt_intra_slice_luma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_log2_diff_max_bt_min_qt_intra_slice_luma) - 912usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_max_tt_min_qt_intra_slice_luma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_log2_diff_max_tt_min_qt_intra_slice_luma) - 913usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_min_qt_min_cb_intra_slice_chroma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_log2_diff_min_qt_min_cb_intra_slice_chroma) - 914usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_max_mtt_hierarchy_depth_intra_slice_chroma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_max_mtt_hierarchy_depth_intra_slice_chroma) - 915usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_max_bt_min_qt_intra_slice_chroma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_log2_diff_max_bt_min_qt_intra_slice_chroma) - 916usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_max_tt_min_qt_intra_slice_chroma"] [:: std :: mem :: offset_of ! (_VAPictureParameterBufferVVC , ph_log2_diff_max_tt_min_qt_intra_slice_chroma) - 917usize] ;
    ["Offset of field: _VAPictureParameterBufferVVC::ph_cu_qp_delta_subdiv_intra_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_cu_qp_delta_subdiv_intra_slice
    )
        - 918usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_cu_chroma_qp_offset_subdiv_intra_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_cu_chroma_qp_offset_subdiv_intra_slice
    )
        - 919usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_min_qt_min_cb_inter_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_log2_diff_min_qt_min_cb_inter_slice
    )
        - 920usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_max_mtt_hierarchy_depth_inter_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_max_mtt_hierarchy_depth_inter_slice
    )
        - 921usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_max_bt_min_qt_inter_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_log2_diff_max_bt_min_qt_inter_slice
    )
        - 922usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_log2_diff_max_tt_min_qt_inter_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_log2_diff_max_tt_min_qt_inter_slice
    )
        - 923usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_cu_qp_delta_subdiv_inter_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_cu_qp_delta_subdiv_inter_slice
    )
        - 924usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_cu_chroma_qp_offset_subdiv_inter_slice"][::std::mem::offset_of!(
        _VAPictureParameterBufferVVC,
        ph_cu_chroma_qp_offset_subdiv_inter_slice
    )
        - 925usize];
    ["Offset of field: _VAPictureParameterBufferVVC::reserved16b02"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, reserved16b02) - 926usize];
    ["Offset of field: _VAPictureParameterBufferVVC::reserved32b03"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, reserved32b03) - 928usize];
    ["Offset of field: _VAPictureParameterBufferVVC::ph_flags"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, ph_flags) - 936usize];
    ["Offset of field: _VAPictureParameterBufferVVC::reserved32b04"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, reserved32b04) - 940usize];
    ["Offset of field: _VAPictureParameterBufferVVC::PicMiscFlags"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, PicMiscFlags) - 944usize];
    ["Offset of field: _VAPictureParameterBufferVVC::reserved32b"]
        [::std::mem::offset_of!(_VAPictureParameterBufferVVC, reserved32b) - 948usize];
};
pub type VAPictureParameterBufferVVC = _VAPictureParameterBufferVVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASliceParameterBufferVVC {
    pub slice_data_size: u32,
    pub slice_data_offset: u32,
    pub slice_data_flag: u32,
    pub slice_data_byte_offset: u32,
    pub RefPicList: [[u8; 15usize]; 2usize],
    pub sh_subpic_id: u16,
    pub sh_slice_address: u16,
    pub sh_num_tiles_in_slice_minus1: u16,
    pub sh_slice_type: u8,
    pub sh_num_alf_aps_ids_luma: u8,
    pub sh_alf_aps_id_luma: [u8; 7usize],
    pub sh_alf_aps_id_chroma: u8,
    pub sh_alf_cc_cb_aps_id: u8,
    pub sh_alf_cc_cr_aps_id: u8,
    pub NumRefIdxActive: [u8; 2usize],
    pub sh_collocated_ref_idx: u8,
    pub SliceQpY: i8,
    pub sh_cb_qp_offset: i8,
    pub sh_cr_qp_offset: i8,
    pub sh_joint_cbcr_qp_offset: i8,
    pub sh_luma_beta_offset_div2: i8,
    pub sh_luma_tc_offset_div2: i8,
    pub sh_cb_beta_offset_div2: i8,
    pub sh_cb_tc_offset_div2: i8,
    pub sh_cr_beta_offset_div2: i8,
    pub sh_cr_tc_offset_div2: i8,
    pub reserved8b: [u8; 3usize],
    pub reserved32b: u32,
    pub WPInfo: VAWeightedPredInfo,
    pub sh_flags: _VASliceParameterBufferVVC__bindgen_ty_1,
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VASliceParameterBufferVVC__bindgen_ty_1 {
    pub bits: _VASliceParameterBufferVVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceParameterBufferVVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferVVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VASliceParameterBufferVVC__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASliceParameterBufferVVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VASliceParameterBufferVVC__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _VASliceParameterBufferVVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn sh_alf_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_alf_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_alf_cb_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_alf_cb_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_alf_cr_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_alf_cr_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_alf_cc_cb_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_alf_cc_cb_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_alf_cc_cr_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_alf_cc_cr_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_lmcs_used_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_lmcs_used_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_explicit_scaling_list_used_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_explicit_scaling_list_used_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_cabac_init_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_cabac_init_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_collocated_from_l0_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_collocated_from_l0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_cu_chroma_qp_offset_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_cu_chroma_qp_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_sao_luma_used_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_sao_luma_used_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_sao_chroma_used_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_sao_chroma_used_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_dep_quant_used_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_dep_quant_used_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_sign_data_hiding_used_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_sign_data_hiding_used_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sh_ts_residual_coding_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sh_ts_residual_coding_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sh_alf_enabled_flag: u32,
        sh_alf_cb_enabled_flag: u32,
        sh_alf_cr_enabled_flag: u32,
        sh_alf_cc_cb_enabled_flag: u32,
        sh_alf_cc_cr_enabled_flag: u32,
        sh_lmcs_used_flag: u32,
        sh_explicit_scaling_list_used_flag: u32,
        sh_cabac_init_flag: u32,
        sh_collocated_from_l0_flag: u32,
        sh_cu_chroma_qp_offset_enabled_flag: u32,
        sh_sao_luma_used_flag: u32,
        sh_sao_chroma_used_flag: u32,
        sh_deblocking_filter_disabled_flag: u32,
        sh_dep_quant_used_flag: u32,
        sh_sign_data_hiding_used_flag: u32,
        sh_ts_residual_coding_disabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sh_alf_enabled_flag: u32 = unsafe { ::std::mem::transmute(sh_alf_enabled_flag) };
            sh_alf_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sh_alf_cb_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sh_alf_cb_enabled_flag) };
            sh_alf_cb_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sh_alf_cr_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sh_alf_cr_enabled_flag) };
            sh_alf_cr_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sh_alf_cc_cb_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sh_alf_cc_cb_enabled_flag) };
            sh_alf_cc_cb_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let sh_alf_cc_cr_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sh_alf_cc_cr_enabled_flag) };
            sh_alf_cc_cr_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sh_lmcs_used_flag: u32 = unsafe { ::std::mem::transmute(sh_lmcs_used_flag) };
            sh_lmcs_used_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sh_explicit_scaling_list_used_flag: u32 =
                unsafe { ::std::mem::transmute(sh_explicit_scaling_list_used_flag) };
            sh_explicit_scaling_list_used_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sh_cabac_init_flag: u32 = unsafe { ::std::mem::transmute(sh_cabac_init_flag) };
            sh_cabac_init_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let sh_collocated_from_l0_flag: u32 =
                unsafe { ::std::mem::transmute(sh_collocated_from_l0_flag) };
            sh_collocated_from_l0_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let sh_cu_chroma_qp_offset_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sh_cu_chroma_qp_offset_enabled_flag) };
            sh_cu_chroma_qp_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let sh_sao_luma_used_flag: u32 =
                unsafe { ::std::mem::transmute(sh_sao_luma_used_flag) };
            sh_sao_luma_used_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let sh_sao_chroma_used_flag: u32 =
                unsafe { ::std::mem::transmute(sh_sao_chroma_used_flag) };
            sh_sao_chroma_used_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let sh_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(sh_deblocking_filter_disabled_flag) };
            sh_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let sh_dep_quant_used_flag: u32 =
                unsafe { ::std::mem::transmute(sh_dep_quant_used_flag) };
            sh_dep_quant_used_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let sh_sign_data_hiding_used_flag: u32 =
                unsafe { ::std::mem::transmute(sh_sign_data_hiding_used_flag) };
            sh_sign_data_hiding_used_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sh_ts_residual_coding_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(sh_ts_residual_coding_disabled_flag) };
            sh_ts_residual_coding_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferVVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VASliceParameterBufferVVC__bindgen_ty_1>() - 4usize];
    ["Alignment of _VASliceParameterBufferVVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VASliceParameterBufferVVC__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VASliceParameterBufferVVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VASliceParameterBufferVVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceParameterBufferVVC"]
        [::std::mem::size_of::<_VASliceParameterBufferVVC>() - 432usize];
    ["Alignment of _VASliceParameterBufferVVC"]
        [::std::mem::align_of::<_VASliceParameterBufferVVC>() - 4usize];
    ["Offset of field: _VASliceParameterBufferVVC::slice_data_size"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, slice_data_size) - 0usize];
    ["Offset of field: _VASliceParameterBufferVVC::slice_data_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, slice_data_offset) - 4usize];
    ["Offset of field: _VASliceParameterBufferVVC::slice_data_flag"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, slice_data_flag) - 8usize];
    ["Offset of field: _VASliceParameterBufferVVC::slice_data_byte_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, slice_data_byte_offset) - 12usize];
    ["Offset of field: _VASliceParameterBufferVVC::RefPicList"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, RefPicList) - 16usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_subpic_id"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_subpic_id) - 46usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_slice_address"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_slice_address) - 48usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_num_tiles_in_slice_minus1"][::std::mem::offset_of!(
        _VASliceParameterBufferVVC,
        sh_num_tiles_in_slice_minus1
    ) - 50usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_slice_type"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_slice_type) - 52usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_num_alf_aps_ids_luma"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_num_alf_aps_ids_luma) - 53usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_alf_aps_id_luma"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_alf_aps_id_luma) - 54usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_alf_aps_id_chroma"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_alf_aps_id_chroma) - 61usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_alf_cc_cb_aps_id"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_alf_cc_cb_aps_id) - 62usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_alf_cc_cr_aps_id"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_alf_cc_cr_aps_id) - 63usize];
    ["Offset of field: _VASliceParameterBufferVVC::NumRefIdxActive"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, NumRefIdxActive) - 64usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_collocated_ref_idx"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_collocated_ref_idx) - 66usize];
    ["Offset of field: _VASliceParameterBufferVVC::SliceQpY"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, SliceQpY) - 67usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_cb_qp_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_cb_qp_offset) - 68usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_cr_qp_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_cr_qp_offset) - 69usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_joint_cbcr_qp_offset"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_joint_cbcr_qp_offset) - 70usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_luma_beta_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_luma_beta_offset_div2) - 71usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_luma_tc_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_luma_tc_offset_div2) - 72usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_cb_beta_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_cb_beta_offset_div2) - 73usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_cb_tc_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_cb_tc_offset_div2) - 74usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_cr_beta_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_cr_beta_offset_div2) - 75usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_cr_tc_offset_div2"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_cr_tc_offset_div2) - 76usize];
    ["Offset of field: _VASliceParameterBufferVVC::reserved8b"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, reserved8b) - 77usize];
    ["Offset of field: _VASliceParameterBufferVVC::reserved32b"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, reserved32b) - 80usize];
    ["Offset of field: _VASliceParameterBufferVVC::WPInfo"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, WPInfo) - 84usize];
    ["Offset of field: _VASliceParameterBufferVVC::sh_flags"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, sh_flags) - 396usize];
    ["Offset of field: _VASliceParameterBufferVVC::va_reserved"]
        [::std::mem::offset_of!(_VASliceParameterBufferVVC, va_reserved) - 400usize];
};
pub type VASliceParameterBufferVVC = _VASliceParameterBufferVVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAScalingListVVC {
    pub aps_adaptation_parameter_set_id: u8,
    pub reserved8b: u8,
    pub ScalingMatrixDCRec: [u8; 14usize],
    pub ScalingMatrixRec2x2: [[[u8; 2usize]; 2usize]; 2usize],
    pub ScalingMatrixRec4x4: [[[u8; 4usize]; 4usize]; 6usize],
    pub ScalingMatrixRec8x8: [[[u8; 8usize]; 8usize]; 20usize],
    pub va_reserved: [u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAScalingListVVC"][::std::mem::size_of::<_VAScalingListVVC>() - 1432usize];
    ["Alignment of _VAScalingListVVC"][::std::mem::align_of::<_VAScalingListVVC>() - 4usize];
    ["Offset of field: _VAScalingListVVC::aps_adaptation_parameter_set_id"]
        [::std::mem::offset_of!(_VAScalingListVVC, aps_adaptation_parameter_set_id) - 0usize];
    ["Offset of field: _VAScalingListVVC::reserved8b"]
        [::std::mem::offset_of!(_VAScalingListVVC, reserved8b) - 1usize];
    ["Offset of field: _VAScalingListVVC::ScalingMatrixDCRec"]
        [::std::mem::offset_of!(_VAScalingListVVC, ScalingMatrixDCRec) - 2usize];
    ["Offset of field: _VAScalingListVVC::ScalingMatrixRec2x2"]
        [::std::mem::offset_of!(_VAScalingListVVC, ScalingMatrixRec2x2) - 16usize];
    ["Offset of field: _VAScalingListVVC::ScalingMatrixRec4x4"]
        [::std::mem::offset_of!(_VAScalingListVVC, ScalingMatrixRec4x4) - 24usize];
    ["Offset of field: _VAScalingListVVC::ScalingMatrixRec8x8"]
        [::std::mem::offset_of!(_VAScalingListVVC, ScalingMatrixRec8x8) - 120usize];
    ["Offset of field: _VAScalingListVVC::va_reserved"]
        [::std::mem::offset_of!(_VAScalingListVVC, va_reserved) - 1400usize];
};
pub type VAScalingListVVC = _VAScalingListVVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAAlfDataVVC {
    pub aps_adaptation_parameter_set_id: u8,
    pub alf_luma_num_filters_signalled_minus1: u8,
    pub alf_luma_coeff_delta_idx: [u8; 25usize],
    pub filtCoeff: [[i8; 12usize]; 25usize],
    pub alf_luma_clip_idx: [[u8; 12usize]; 25usize],
    pub alf_chroma_num_alt_filters_minus1: u8,
    pub AlfCoeffC: [[i8; 6usize]; 8usize],
    pub alf_chroma_clip_idx: [[u8; 6usize]; 8usize],
    pub alf_cc_cb_filters_signalled_minus1: u8,
    pub CcAlfApsCoeffCb: [[i8; 7usize]; 4usize],
    pub alf_cc_cr_filters_signalled_minus1: u8,
    pub CcAlfApsCoeffCr: [[i8; 7usize]; 4usize],
    pub reserved16b: u16,
    pub reserved32b: u32,
    pub alf_flags: _VAAlfDataVVC__bindgen_ty_1,
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAAlfDataVVC__bindgen_ty_1 {
    pub bits: _VAAlfDataVVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAAlfDataVVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAAlfDataVVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAAlfDataVVC__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAAlfDataVVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAAlfDataVVC__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _VAAlfDataVVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn alf_luma_filter_signal_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alf_luma_filter_signal_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alf_chroma_filter_signal_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alf_chroma_filter_signal_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alf_cc_cb_filter_signal_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alf_cc_cb_filter_signal_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alf_cc_cr_filter_signal_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alf_cc_cr_filter_signal_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alf_luma_clip_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alf_luma_clip_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alf_chroma_clip_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alf_chroma_clip_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        alf_luma_filter_signal_flag: u32,
        alf_chroma_filter_signal_flag: u32,
        alf_cc_cb_filter_signal_flag: u32,
        alf_cc_cr_filter_signal_flag: u32,
        alf_luma_clip_flag: u32,
        alf_chroma_clip_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let alf_luma_filter_signal_flag: u32 =
                unsafe { ::std::mem::transmute(alf_luma_filter_signal_flag) };
            alf_luma_filter_signal_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let alf_chroma_filter_signal_flag: u32 =
                unsafe { ::std::mem::transmute(alf_chroma_filter_signal_flag) };
            alf_chroma_filter_signal_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let alf_cc_cb_filter_signal_flag: u32 =
                unsafe { ::std::mem::transmute(alf_cc_cb_filter_signal_flag) };
            alf_cc_cb_filter_signal_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let alf_cc_cr_filter_signal_flag: u32 =
                unsafe { ::std::mem::transmute(alf_cc_cr_filter_signal_flag) };
            alf_cc_cr_filter_signal_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let alf_luma_clip_flag: u32 = unsafe { ::std::mem::transmute(alf_luma_clip_flag) };
            alf_luma_clip_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let alf_chroma_clip_flag: u32 = unsafe { ::std::mem::transmute(alf_chroma_clip_flag) };
            alf_chroma_clip_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAAlfDataVVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VAAlfDataVVC__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAAlfDataVVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VAAlfDataVVC__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAAlfDataVVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAAlfDataVVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAAlfDataVVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAAlfDataVVC__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAAlfDataVVC"][::std::mem::size_of::<_VAAlfDataVVC>() - 824usize];
    ["Alignment of _VAAlfDataVVC"][::std::mem::align_of::<_VAAlfDataVVC>() - 4usize];
    ["Offset of field: _VAAlfDataVVC::aps_adaptation_parameter_set_id"]
        [::std::mem::offset_of!(_VAAlfDataVVC, aps_adaptation_parameter_set_id) - 0usize];
    ["Offset of field: _VAAlfDataVVC::alf_luma_num_filters_signalled_minus1"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_luma_num_filters_signalled_minus1) - 1usize];
    ["Offset of field: _VAAlfDataVVC::alf_luma_coeff_delta_idx"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_luma_coeff_delta_idx) - 2usize];
    ["Offset of field: _VAAlfDataVVC::filtCoeff"]
        [::std::mem::offset_of!(_VAAlfDataVVC, filtCoeff) - 27usize];
    ["Offset of field: _VAAlfDataVVC::alf_luma_clip_idx"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_luma_clip_idx) - 327usize];
    ["Offset of field: _VAAlfDataVVC::alf_chroma_num_alt_filters_minus1"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_chroma_num_alt_filters_minus1) - 627usize];
    ["Offset of field: _VAAlfDataVVC::AlfCoeffC"]
        [::std::mem::offset_of!(_VAAlfDataVVC, AlfCoeffC) - 628usize];
    ["Offset of field: _VAAlfDataVVC::alf_chroma_clip_idx"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_chroma_clip_idx) - 676usize];
    ["Offset of field: _VAAlfDataVVC::alf_cc_cb_filters_signalled_minus1"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_cc_cb_filters_signalled_minus1) - 724usize];
    ["Offset of field: _VAAlfDataVVC::CcAlfApsCoeffCb"]
        [::std::mem::offset_of!(_VAAlfDataVVC, CcAlfApsCoeffCb) - 725usize];
    ["Offset of field: _VAAlfDataVVC::alf_cc_cr_filters_signalled_minus1"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_cc_cr_filters_signalled_minus1) - 753usize];
    ["Offset of field: _VAAlfDataVVC::CcAlfApsCoeffCr"]
        [::std::mem::offset_of!(_VAAlfDataVVC, CcAlfApsCoeffCr) - 754usize];
    ["Offset of field: _VAAlfDataVVC::reserved16b"]
        [::std::mem::offset_of!(_VAAlfDataVVC, reserved16b) - 782usize];
    ["Offset of field: _VAAlfDataVVC::reserved32b"]
        [::std::mem::offset_of!(_VAAlfDataVVC, reserved32b) - 784usize];
    ["Offset of field: _VAAlfDataVVC::alf_flags"]
        [::std::mem::offset_of!(_VAAlfDataVVC, alf_flags) - 788usize];
    ["Offset of field: _VAAlfDataVVC::va_reserved"]
        [::std::mem::offset_of!(_VAAlfDataVVC, va_reserved) - 792usize];
};
pub type VAAlfDataVVC = _VAAlfDataVVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VALmcsDataVVC {
    pub aps_adaptation_parameter_set_id: u8,
    pub lmcs_min_bin_idx: u8,
    pub lmcs_delta_max_bin_idx: u8,
    pub lmcsDeltaCW: [i16; 16usize],
    pub lmcsDeltaCrs: i8,
    pub reserved8b: [u8; 3usize],
    pub va_reserved: [u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VALmcsDataVVC"][::std::mem::size_of::<_VALmcsDataVVC>() - 72usize];
    ["Alignment of _VALmcsDataVVC"][::std::mem::align_of::<_VALmcsDataVVC>() - 4usize];
    ["Offset of field: _VALmcsDataVVC::aps_adaptation_parameter_set_id"]
        [::std::mem::offset_of!(_VALmcsDataVVC, aps_adaptation_parameter_set_id) - 0usize];
    ["Offset of field: _VALmcsDataVVC::lmcs_min_bin_idx"]
        [::std::mem::offset_of!(_VALmcsDataVVC, lmcs_min_bin_idx) - 1usize];
    ["Offset of field: _VALmcsDataVVC::lmcs_delta_max_bin_idx"]
        [::std::mem::offset_of!(_VALmcsDataVVC, lmcs_delta_max_bin_idx) - 2usize];
    ["Offset of field: _VALmcsDataVVC::lmcsDeltaCW"]
        [::std::mem::offset_of!(_VALmcsDataVVC, lmcsDeltaCW) - 4usize];
    ["Offset of field: _VALmcsDataVVC::lmcsDeltaCrs"]
        [::std::mem::offset_of!(_VALmcsDataVVC, lmcsDeltaCrs) - 36usize];
    ["Offset of field: _VALmcsDataVVC::reserved8b"]
        [::std::mem::offset_of!(_VALmcsDataVVC, reserved8b) - 37usize];
    ["Offset of field: _VALmcsDataVVC::va_reserved"]
        [::std::mem::offset_of!(_VALmcsDataVVC, va_reserved) - 40usize];
};
pub type VALmcsDataVVC = _VALmcsDataVVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VASubPicVVC {
    pub sps_subpic_ctu_top_left_x: u16,
    pub sps_subpic_ctu_top_left_y: u16,
    pub sps_subpic_width_minus1: u16,
    pub sps_subpic_height_minus1: u16,
    pub SubpicIdVal: u16,
    pub subpic_flags: _VASubPicVVC__bindgen_ty_1,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VASubPicVVC__bindgen_ty_1 {
    pub bits: _VASubPicVVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASubPicVVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASubPicVVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VASubPicVVC__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of _VASubPicVVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VASubPicVVC__bindgen_ty_1__bindgen_ty_1>() - 2usize];
};
impl _VASubPicVVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn sps_subpic_treated_as_pic_flag(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_sps_subpic_treated_as_pic_flag(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_loop_filter_across_subpic_enabled_flag(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_sps_loop_filter_across_subpic_enabled_flag(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sps_subpic_treated_as_pic_flag: u16,
        sps_loop_filter_across_subpic_enabled_flag: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sps_subpic_treated_as_pic_flag: u16 =
                unsafe { ::std::mem::transmute(sps_subpic_treated_as_pic_flag) };
            sps_subpic_treated_as_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let sps_loop_filter_across_subpic_enabled_flag: u16 =
                unsafe { ::std::mem::transmute(sps_loop_filter_across_subpic_enabled_flag) };
            sps_loop_filter_across_subpic_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 14u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASubPicVVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VASubPicVVC__bindgen_ty_1>() - 2usize];
    ["Alignment of _VASubPicVVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VASubPicVVC__bindgen_ty_1>() - 2usize];
    ["Offset of field: _VASubPicVVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VASubPicVVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VASubPicVVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VASubPicVVC__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASubPicVVC"][::std::mem::size_of::<_VASubPicVVC>() - 28usize];
    ["Alignment of _VASubPicVVC"][::std::mem::align_of::<_VASubPicVVC>() - 4usize];
    ["Offset of field: _VASubPicVVC::sps_subpic_ctu_top_left_x"]
        [::std::mem::offset_of!(_VASubPicVVC, sps_subpic_ctu_top_left_x) - 0usize];
    ["Offset of field: _VASubPicVVC::sps_subpic_ctu_top_left_y"]
        [::std::mem::offset_of!(_VASubPicVVC, sps_subpic_ctu_top_left_y) - 2usize];
    ["Offset of field: _VASubPicVVC::sps_subpic_width_minus1"]
        [::std::mem::offset_of!(_VASubPicVVC, sps_subpic_width_minus1) - 4usize];
    ["Offset of field: _VASubPicVVC::sps_subpic_height_minus1"]
        [::std::mem::offset_of!(_VASubPicVVC, sps_subpic_height_minus1) - 6usize];
    ["Offset of field: _VASubPicVVC::SubpicIdVal"]
        [::std::mem::offset_of!(_VASubPicVVC, SubpicIdVal) - 8usize];
    ["Offset of field: _VASubPicVVC::subpic_flags"]
        [::std::mem::offset_of!(_VASubPicVVC, subpic_flags) - 10usize];
    ["Offset of field: _VASubPicVVC::va_reserved"]
        [::std::mem::offset_of!(_VASubPicVVC, va_reserved) - 12usize];
};
pub type VASubPicVVC = _VASubPicVVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VASliceStructVVC {
    pub SliceTopLeftTileIdx: u16,
    pub pps_slice_width_in_tiles_minus1: u16,
    pub pps_slice_height_in_tiles_minus1: u16,
    pub pps_exp_slice_height_in_ctus_minus1: u16,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VASliceStructVVC"][::std::mem::size_of::<_VASliceStructVVC>() - 24usize];
    ["Alignment of _VASliceStructVVC"][::std::mem::align_of::<_VASliceStructVVC>() - 4usize];
    ["Offset of field: _VASliceStructVVC::SliceTopLeftTileIdx"]
        [::std::mem::offset_of!(_VASliceStructVVC, SliceTopLeftTileIdx) - 0usize];
    ["Offset of field: _VASliceStructVVC::pps_slice_width_in_tiles_minus1"]
        [::std::mem::offset_of!(_VASliceStructVVC, pps_slice_width_in_tiles_minus1) - 2usize];
    ["Offset of field: _VASliceStructVVC::pps_slice_height_in_tiles_minus1"]
        [::std::mem::offset_of!(_VASliceStructVVC, pps_slice_height_in_tiles_minus1) - 4usize];
    ["Offset of field: _VASliceStructVVC::pps_exp_slice_height_in_ctus_minus1"]
        [::std::mem::offset_of!(_VASliceStructVVC, pps_exp_slice_height_in_ctus_minus1) - 6usize];
    ["Offset of field: _VASliceStructVVC::va_reserved"]
        [::std::mem::offset_of!(_VASliceStructVVC, va_reserved) - 8usize];
};
pub type VASliceStructVVC = _VASliceStructVVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub union VAConfigAttribValEncHEVCFeatures {
    pub bits: VAConfigAttribValEncHEVCFeatures__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct VAConfigAttribValEncHEVCFeatures__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VAConfigAttribValEncHEVCFeatures__bindgen_ty_1"]
        [::std::mem::size_of::<VAConfigAttribValEncHEVCFeatures__bindgen_ty_1>() - 4usize];
    ["Alignment of VAConfigAttribValEncHEVCFeatures__bindgen_ty_1"]
        [::std::mem::align_of::<VAConfigAttribValEncHEVCFeatures__bindgen_ty_1>() - 4usize];
};
impl VAConfigAttribValEncHEVCFeatures__bindgen_ty_1 {
    #[inline]
    pub fn separate_colour_planes(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_planes(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn scaling_lists(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_scaling_lists(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn amp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_amp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sao(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sao(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_pcm(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn temporal_mvp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_temporal_mvp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn strong_intra_smoothing(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_strong_intra_smoothing(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn dependent_slices(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slices(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_data_hiding(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sign_data_hiding(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn constrained_intra_pred(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_skip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cu_qp_delta(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_cu_qp_delta(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_prediction(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_prediction(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn transquant_bypass(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_transquant_bypass(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn deblocking_filter_disable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_disable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        separate_colour_planes: u32,
        scaling_lists: u32,
        amp: u32,
        sao: u32,
        pcm: u32,
        temporal_mvp: u32,
        strong_intra_smoothing: u32,
        dependent_slices: u32,
        sign_data_hiding: u32,
        constrained_intra_pred: u32,
        transform_skip: u32,
        cu_qp_delta: u32,
        weighted_prediction: u32,
        transquant_bypass: u32,
        deblocking_filter_disable: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let separate_colour_planes: u32 =
                unsafe { ::std::mem::transmute(separate_colour_planes) };
            separate_colour_planes as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let scaling_lists: u32 = unsafe { ::std::mem::transmute(scaling_lists) };
            scaling_lists as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let amp: u32 = unsafe { ::std::mem::transmute(amp) };
            amp as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let sao: u32 = unsafe { ::std::mem::transmute(sao) };
            sao as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let pcm: u32 = unsafe { ::std::mem::transmute(pcm) };
            pcm as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let temporal_mvp: u32 = unsafe { ::std::mem::transmute(temporal_mvp) };
            temporal_mvp as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let strong_intra_smoothing: u32 =
                unsafe { ::std::mem::transmute(strong_intra_smoothing) };
            strong_intra_smoothing as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let dependent_slices: u32 = unsafe { ::std::mem::transmute(dependent_slices) };
            dependent_slices as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let sign_data_hiding: u32 = unsafe { ::std::mem::transmute(sign_data_hiding) };
            sign_data_hiding as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let constrained_intra_pred: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred) };
            constrained_intra_pred as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let transform_skip: u32 = unsafe { ::std::mem::transmute(transform_skip) };
            transform_skip as u64
        });
        __bindgen_bitfield_unit.set(22usize, 2u8, {
            let cu_qp_delta: u32 = unsafe { ::std::mem::transmute(cu_qp_delta) };
            cu_qp_delta as u64
        });
        __bindgen_bitfield_unit.set(24usize, 2u8, {
            let weighted_prediction: u32 = unsafe { ::std::mem::transmute(weighted_prediction) };
            weighted_prediction as u64
        });
        __bindgen_bitfield_unit.set(26usize, 2u8, {
            let transquant_bypass: u32 = unsafe { ::std::mem::transmute(transquant_bypass) };
            transquant_bypass as u64
        });
        __bindgen_bitfield_unit.set(28usize, 2u8, {
            let deblocking_filter_disable: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_disable) };
            deblocking_filter_disable as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VAConfigAttribValEncHEVCFeatures"]
        [::std::mem::size_of::<VAConfigAttribValEncHEVCFeatures>() - 4usize];
    ["Alignment of VAConfigAttribValEncHEVCFeatures"]
        [::std::mem::align_of::<VAConfigAttribValEncHEVCFeatures>() - 4usize];
    ["Offset of field: VAConfigAttribValEncHEVCFeatures::bits"]
        [::std::mem::offset_of!(VAConfigAttribValEncHEVCFeatures, bits) - 0usize];
    ["Offset of field: VAConfigAttribValEncHEVCFeatures::value"]
        [::std::mem::offset_of!(VAConfigAttribValEncHEVCFeatures, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union VAConfigAttribValEncHEVCBlockSizes {
    pub bits: VAConfigAttribValEncHEVCBlockSizes__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct VAConfigAttribValEncHEVCBlockSizes__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VAConfigAttribValEncHEVCBlockSizes__bindgen_ty_1"]
        [::std::mem::size_of::<VAConfigAttribValEncHEVCBlockSizes__bindgen_ty_1>() - 4usize];
    ["Alignment of VAConfigAttribValEncHEVCBlockSizes__bindgen_ty_1"]
        [::std::mem::align_of::<VAConfigAttribValEncHEVCBlockSizes__bindgen_ty_1>() - 4usize];
};
impl VAConfigAttribValEncHEVCBlockSizes__bindgen_ty_1 {
    #[inline]
    pub fn log2_max_coding_tree_block_size_minus3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_coding_tree_block_size_minus3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_min_coding_tree_block_size_minus3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_min_coding_tree_block_size_minus3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_min_luma_coding_block_size_minus3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_min_luma_coding_block_size_minus3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_luma_transform_block_size_minus2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_luma_transform_block_size_minus2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_min_luma_transform_block_size_minus2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_min_luma_transform_block_size_minus2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn max_max_transform_hierarchy_depth_inter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_max_max_transform_hierarchy_depth_inter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn min_max_transform_hierarchy_depth_inter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_min_max_transform_hierarchy_depth_inter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn max_max_transform_hierarchy_depth_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_max_max_transform_hierarchy_depth_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn min_max_transform_hierarchy_depth_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_min_max_transform_hierarchy_depth_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_pcm_coding_block_size_minus3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_pcm_coding_block_size_minus3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_min_pcm_coding_block_size_minus3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_log2_min_pcm_coding_block_size_minus3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        log2_max_coding_tree_block_size_minus3: u32,
        log2_min_coding_tree_block_size_minus3: u32,
        log2_min_luma_coding_block_size_minus3: u32,
        log2_max_luma_transform_block_size_minus2: u32,
        log2_min_luma_transform_block_size_minus2: u32,
        max_max_transform_hierarchy_depth_inter: u32,
        min_max_transform_hierarchy_depth_inter: u32,
        max_max_transform_hierarchy_depth_intra: u32,
        min_max_transform_hierarchy_depth_intra: u32,
        log2_max_pcm_coding_block_size_minus3: u32,
        log2_min_pcm_coding_block_size_minus3: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let log2_max_coding_tree_block_size_minus3: u32 =
                unsafe { ::std::mem::transmute(log2_max_coding_tree_block_size_minus3) };
            log2_max_coding_tree_block_size_minus3 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let log2_min_coding_tree_block_size_minus3: u32 =
                unsafe { ::std::mem::transmute(log2_min_coding_tree_block_size_minus3) };
            log2_min_coding_tree_block_size_minus3 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let log2_min_luma_coding_block_size_minus3: u32 =
                unsafe { ::std::mem::transmute(log2_min_luma_coding_block_size_minus3) };
            log2_min_luma_coding_block_size_minus3 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let log2_max_luma_transform_block_size_minus2: u32 =
                unsafe { ::std::mem::transmute(log2_max_luma_transform_block_size_minus2) };
            log2_max_luma_transform_block_size_minus2 as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let log2_min_luma_transform_block_size_minus2: u32 =
                unsafe { ::std::mem::transmute(log2_min_luma_transform_block_size_minus2) };
            log2_min_luma_transform_block_size_minus2 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let max_max_transform_hierarchy_depth_inter: u32 =
                unsafe { ::std::mem::transmute(max_max_transform_hierarchy_depth_inter) };
            max_max_transform_hierarchy_depth_inter as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let min_max_transform_hierarchy_depth_inter: u32 =
                unsafe { ::std::mem::transmute(min_max_transform_hierarchy_depth_inter) };
            min_max_transform_hierarchy_depth_inter as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let max_max_transform_hierarchy_depth_intra: u32 =
                unsafe { ::std::mem::transmute(max_max_transform_hierarchy_depth_intra) };
            max_max_transform_hierarchy_depth_intra as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let min_max_transform_hierarchy_depth_intra: u32 =
                unsafe { ::std::mem::transmute(min_max_transform_hierarchy_depth_intra) };
            min_max_transform_hierarchy_depth_intra as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let log2_max_pcm_coding_block_size_minus3: u32 =
                unsafe { ::std::mem::transmute(log2_max_pcm_coding_block_size_minus3) };
            log2_max_pcm_coding_block_size_minus3 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let log2_min_pcm_coding_block_size_minus3: u32 =
                unsafe { ::std::mem::transmute(log2_min_pcm_coding_block_size_minus3) };
            log2_min_pcm_coding_block_size_minus3 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VAConfigAttribValEncHEVCBlockSizes"]
        [::std::mem::size_of::<VAConfigAttribValEncHEVCBlockSizes>() - 4usize];
    ["Alignment of VAConfigAttribValEncHEVCBlockSizes"]
        [::std::mem::align_of::<VAConfigAttribValEncHEVCBlockSizes>() - 4usize];
    ["Offset of field: VAConfigAttribValEncHEVCBlockSizes::bits"]
        [::std::mem::offset_of!(VAConfigAttribValEncHEVCBlockSizes, bits) - 0usize];
    ["Offset of field: VAConfigAttribValEncHEVCBlockSizes::value"]
        [::std::mem::offset_of!(VAConfigAttribValEncHEVCBlockSizes, value) - 0usize];
};
pub const VAEncPackedHeaderHEVC_VPS: VAEncPackedHeaderTypeHEVC = 1;
pub const VAEncPackedHeaderHEVC_SPS: VAEncPackedHeaderTypeHEVC = 1;
pub const VAEncPackedHeaderHEVC_PPS: VAEncPackedHeaderTypeHEVC = 2;
pub const VAEncPackedHeaderHEVC_Slice: VAEncPackedHeaderTypeHEVC = 3;
pub const VAEncPackedHeaderHEVC_SEI: VAEncPackedHeaderTypeHEVC = 2147483649;
pub type VAEncPackedHeaderTypeHEVC = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSequenceParameterBufferHEVC {
    pub general_profile_idc: u8,
    pub general_level_idc: u8,
    pub general_tier_flag: u8,
    pub intra_period: u32,
    pub intra_idr_period: u32,
    pub ip_period: u32,
    pub bits_per_second: u32,
    pub pic_width_in_luma_samples: u16,
    pub pic_height_in_luma_samples: u16,
    pub seq_fields: _VAEncSequenceParameterBufferHEVC__bindgen_ty_1,
    pub log2_min_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_luma_coding_block_size: u8,
    pub log2_min_transform_block_size_minus2: u8,
    pub log2_diff_max_min_transform_block_size: u8,
    pub max_transform_hierarchy_depth_inter: u8,
    pub max_transform_hierarchy_depth_intra: u8,
    pub pcm_sample_bit_depth_luma_minus1: u32,
    pub pcm_sample_bit_depth_chroma_minus1: u32,
    pub log2_min_pcm_luma_coding_block_size_minus3: u32,
    pub log2_max_pcm_luma_coding_block_size_minus3: u32,
    pub vui_parameters_present_flag: u8,
    pub vui_fields: _VAEncSequenceParameterBufferHEVC__bindgen_ty_2,
    pub aspect_ratio_idc: u8,
    pub sar_width: u32,
    pub sar_height: u32,
    pub vui_num_units_in_tick: u32,
    pub vui_time_scale: u32,
    pub min_spatial_segmentation_idc: u16,
    pub max_bytes_per_pic_denom: u8,
    pub max_bits_per_min_cu_denom: u8,
    pub scc_fields: _VAEncSequenceParameterBufferHEVC__bindgen_ty_3,
    pub va_reserved: [u32; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferHEVC__bindgen_ty_1 {
    pub bits: _VAEncSequenceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn chroma_format_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_format_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit_depth_luma_minus8(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_bit_depth_luma_minus8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn bit_depth_chroma_minus8(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_bit_depth_chroma_minus8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn scaling_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scaling_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn strong_intra_smoothing_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_strong_intra_smoothing_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn amp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_amp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sample_adaptive_offset_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sample_adaptive_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm_loop_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_loop_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn low_delay_seq(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay_seq(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hierachical_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hierachical_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 14u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chroma_format_idc: u32,
        separate_colour_plane_flag: u32,
        bit_depth_luma_minus8: u32,
        bit_depth_chroma_minus8: u32,
        scaling_list_enabled_flag: u32,
        strong_intra_smoothing_enabled_flag: u32,
        amp_enabled_flag: u32,
        sample_adaptive_offset_enabled_flag: u32,
        pcm_enabled_flag: u32,
        pcm_loop_filter_disabled_flag: u32,
        sps_temporal_mvp_enabled_flag: u32,
        low_delay_seq: u32,
        hierachical_flag: u32,
        reserved_bits: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let chroma_format_idc: u32 = unsafe { ::std::mem::transmute(chroma_format_idc) };
            chroma_format_idc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::std::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let bit_depth_luma_minus8: u32 =
                unsafe { ::std::mem::transmute(bit_depth_luma_minus8) };
            bit_depth_luma_minus8 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let bit_depth_chroma_minus8: u32 =
                unsafe { ::std::mem::transmute(bit_depth_chroma_minus8) };
            bit_depth_chroma_minus8 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let scaling_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(scaling_list_enabled_flag) };
            scaling_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let strong_intra_smoothing_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(strong_intra_smoothing_enabled_flag) };
            strong_intra_smoothing_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let amp_enabled_flag: u32 = unsafe { ::std::mem::transmute(amp_enabled_flag) };
            amp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let sample_adaptive_offset_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sample_adaptive_offset_enabled_flag) };
            sample_adaptive_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let pcm_enabled_flag: u32 = unsafe { ::std::mem::transmute(pcm_enabled_flag) };
            pcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let pcm_loop_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(pcm_loop_filter_disabled_flag) };
            pcm_loop_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sps_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sps_temporal_mvp_enabled_flag) };
            sps_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let low_delay_seq: u32 = unsafe { ::std::mem::transmute(low_delay_seq) };
            low_delay_seq as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let hierachical_flag: u32 = unsafe { ::std::mem::transmute(hierachical_flag) };
            hierachical_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 14u8, {
            let reserved_bits: u32 = unsafe { ::std::mem::transmute(reserved_bits) };
            reserved_bits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferHEVC__bindgen_ty_2 {
    pub bits: _VAEncSequenceParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn neutral_chroma_indication_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_neutral_chroma_indication_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn field_seq_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_seq_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vui_timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tiles_fixed_structure_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_fixed_structure_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn motion_vectors_over_pic_boundaries_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_motion_vectors_over_pic_boundaries_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restricted_ref_pic_lists_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restricted_ref_pic_lists_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_mv_length_horizontal(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_mv_length_horizontal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_mv_length_vertical(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_mv_length_vertical(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        neutral_chroma_indication_flag: u32,
        field_seq_flag: u32,
        vui_timing_info_present_flag: u32,
        bitstream_restriction_flag: u32,
        tiles_fixed_structure_flag: u32,
        motion_vectors_over_pic_boundaries_flag: u32,
        restricted_ref_pic_lists_flag: u32,
        log2_max_mv_length_horizontal: u32,
        log2_max_mv_length_vertical: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let neutral_chroma_indication_flag: u32 =
                unsafe { ::std::mem::transmute(neutral_chroma_indication_flag) };
            neutral_chroma_indication_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let field_seq_flag: u32 = unsafe { ::std::mem::transmute(field_seq_flag) };
            field_seq_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let vui_timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_timing_info_present_flag) };
            vui_timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::std::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tiles_fixed_structure_flag: u32 =
                unsafe { ::std::mem::transmute(tiles_fixed_structure_flag) };
            tiles_fixed_structure_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let motion_vectors_over_pic_boundaries_flag: u32 =
                unsafe { ::std::mem::transmute(motion_vectors_over_pic_boundaries_flag) };
            motion_vectors_over_pic_boundaries_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let restricted_ref_pic_lists_flag: u32 =
                unsafe { ::std::mem::transmute(restricted_ref_pic_lists_flag) };
            restricted_ref_pic_lists_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let log2_max_mv_length_horizontal: u32 =
                unsafe { ::std::mem::transmute(log2_max_mv_length_horizontal) };
            log2_max_mv_length_horizontal as u64
        });
        __bindgen_bitfield_unit.set(13usize, 5u8, {
            let log2_max_mv_length_vertical: u32 =
                unsafe { ::std::mem::transmute(log2_max_mv_length_vertical) };
            log2_max_mv_length_vertical as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferHEVC__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferHEVC__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC__bindgen_ty_2, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferHEVC__bindgen_ty_3 {
    pub bits: _VAEncSequenceParameterBufferHEVC__bindgen_ty_3__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferHEVC__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferHEVC__bindgen_ty_3__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferHEVC__bindgen_ty_3__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferHEVC__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_3__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferHEVC__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn palette_mode_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_palette_mode_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        palette_mode_enabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let palette_mode_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(palette_mode_enabled_flag) };
            palette_mode_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferHEVC__bindgen_ty_3"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_3>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferHEVC__bindgen_ty_3"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferHEVC__bindgen_ty_3>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC__bindgen_ty_3::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC__bindgen_ty_3, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC__bindgen_ty_3::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC__bindgen_ty_3, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferHEVC"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferHEVC>() - 116usize];
    ["Alignment of _VAEncSequenceParameterBufferHEVC"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferHEVC>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::general_profile_idc"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, general_profile_idc) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::general_level_idc"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, general_level_idc) - 1usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::general_tier_flag"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, general_tier_flag) - 2usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, intra_period) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::intra_idr_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, intra_idr_period) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::ip_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, ip_period) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, bits_per_second) - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::pic_width_in_luma_samples"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        pic_width_in_luma_samples
    ) - 20usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::pic_height_in_luma_samples"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        pic_height_in_luma_samples
    ) - 22usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::seq_fields"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, seq_fields) - 24usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::log2_min_luma_coding_block_size_minus3"] [:: std :: mem :: offset_of ! (_VAEncSequenceParameterBufferHEVC , log2_min_luma_coding_block_size_minus3) - 28usize] ;
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::log2_diff_max_min_luma_coding_block_size"] [:: std :: mem :: offset_of ! (_VAEncSequenceParameterBufferHEVC , log2_diff_max_min_luma_coding_block_size) - 29usize] ;
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::log2_min_transform_block_size_minus2"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        log2_min_transform_block_size_minus2
    )
        - 30usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::log2_diff_max_min_transform_block_size"] [:: std :: mem :: offset_of ! (_VAEncSequenceParameterBufferHEVC , log2_diff_max_min_transform_block_size) - 31usize] ;
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::max_transform_hierarchy_depth_inter"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        max_transform_hierarchy_depth_inter
    )
        - 32usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::max_transform_hierarchy_depth_intra"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        max_transform_hierarchy_depth_intra
    )
        - 33usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::pcm_sample_bit_depth_luma_minus1"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        pcm_sample_bit_depth_luma_minus1
    )
        - 36usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::pcm_sample_bit_depth_chroma_minus1"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        pcm_sample_bit_depth_chroma_minus1
    )
        - 40usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::log2_min_pcm_luma_coding_block_size_minus3"] [:: std :: mem :: offset_of ! (_VAEncSequenceParameterBufferHEVC , log2_min_pcm_luma_coding_block_size_minus3) - 44usize] ;
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::log2_max_pcm_luma_coding_block_size_minus3"] [:: std :: mem :: offset_of ! (_VAEncSequenceParameterBufferHEVC , log2_max_pcm_luma_coding_block_size_minus3) - 48usize] ;
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::vui_parameters_present_flag"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        vui_parameters_present_flag
    )
        - 52usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::vui_fields"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, vui_fields) - 56usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::aspect_ratio_idc"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, aspect_ratio_idc) - 60usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::sar_width"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, sar_width) - 64usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::sar_height"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, sar_height) - 68usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::vui_num_units_in_tick"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        vui_num_units_in_tick
    ) - 72usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::vui_time_scale"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, vui_time_scale) - 76usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::min_spatial_segmentation_idc"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        min_spatial_segmentation_idc
    )
        - 80usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::max_bytes_per_pic_denom"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        max_bytes_per_pic_denom
    ) - 82usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::max_bits_per_min_cu_denom"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferHEVC,
        max_bits_per_min_cu_denom
    ) - 83usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::scc_fields"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, scc_fields) - 84usize];
    ["Offset of field: _VAEncSequenceParameterBufferHEVC::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferHEVC, va_reserved) - 88usize];
};
pub type VAEncSequenceParameterBufferHEVC = _VAEncSequenceParameterBufferHEVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncPictureParameterBufferHEVC {
    pub decoded_curr_pic: VAPictureHEVC,
    pub reference_frames: [VAPictureHEVC; 15usize],
    pub coded_buf: VABufferID,
    pub collocated_ref_pic_index: u8,
    pub last_picture: u8,
    pub pic_init_qp: u8,
    pub diff_cu_qp_delta_depth: u8,
    pub pps_cb_qp_offset: i8,
    pub pps_cr_qp_offset: i8,
    pub num_tile_columns_minus1: u8,
    pub num_tile_rows_minus1: u8,
    pub column_width_minus1: [u8; 19usize],
    pub row_height_minus1: [u8; 21usize],
    pub log2_parallel_merge_level_minus2: u8,
    pub ctu_max_bitsize_allowed: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub slice_pic_parameter_set_id: u8,
    pub nal_unit_type: u8,
    pub pic_fields: _VAEncPictureParameterBufferHEVC__bindgen_ty_1,
    pub hierarchical_level_plus1: u8,
    pub va_byte_reserved: u8,
    pub scc_fields: _VAEncPictureParameterBufferHEVC__bindgen_ty_2,
    pub va_reserved: [u32; 15usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferHEVC__bindgen_ty_1 {
    pub bits: _VAEncPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn idr_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_idr_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn coding_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_coding_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reference_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dependent_slice_segments_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segments_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_data_hiding_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_data_hiding_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_skip_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cu_qp_delta_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_qp_delta_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_bipred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_bipred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transquant_bypass_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transquant_bypass_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn entropy_coding_sync_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_sync_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_filter_across_tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_across_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scaling_list_data_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scaling_list_data_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn screen_content_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_screen_content_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_gpu_weighted_prediction(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_gpu_weighted_prediction(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_output_of_prior_pics_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_output_of_prior_pics_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        idr_pic_flag: u32,
        coding_type: u32,
        reference_pic_flag: u32,
        dependent_slice_segments_enabled_flag: u32,
        sign_data_hiding_enabled_flag: u32,
        constrained_intra_pred_flag: u32,
        transform_skip_enabled_flag: u32,
        cu_qp_delta_enabled_flag: u32,
        weighted_pred_flag: u32,
        weighted_bipred_flag: u32,
        transquant_bypass_enabled_flag: u32,
        tiles_enabled_flag: u32,
        entropy_coding_sync_enabled_flag: u32,
        loop_filter_across_tiles_enabled_flag: u32,
        pps_loop_filter_across_slices_enabled_flag: u32,
        scaling_list_data_present_flag: u32,
        screen_content_flag: u32,
        enable_gpu_weighted_prediction: u32,
        no_output_of_prior_pics_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let idr_pic_flag: u32 = unsafe { ::std::mem::transmute(idr_pic_flag) };
            idr_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let coding_type: u32 = unsafe { ::std::mem::transmute(coding_type) };
            coding_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let reference_pic_flag: u32 = unsafe { ::std::mem::transmute(reference_pic_flag) };
            reference_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dependent_slice_segments_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(dependent_slice_segments_enabled_flag) };
            dependent_slice_segments_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let sign_data_hiding_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sign_data_hiding_enabled_flag) };
            sign_data_hiding_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let transform_skip_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_enabled_flag) };
            transform_skip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let cu_qp_delta_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cu_qp_delta_enabled_flag) };
            cu_qp_delta_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let weighted_bipred_flag: u32 = unsafe { ::std::mem::transmute(weighted_bipred_flag) };
            weighted_bipred_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let transquant_bypass_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transquant_bypass_enabled_flag) };
            transquant_bypass_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tiles_enabled_flag: u32 = unsafe { ::std::mem::transmute(tiles_enabled_flag) };
            tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let entropy_coding_sync_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_sync_enabled_flag) };
            entropy_coding_sync_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let loop_filter_across_tiles_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(loop_filter_across_tiles_enabled_flag) };
            loop_filter_across_tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let pps_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_loop_filter_across_slices_enabled_flag) };
            pps_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let scaling_list_data_present_flag: u32 =
                unsafe { ::std::mem::transmute(scaling_list_data_present_flag) };
            scaling_list_data_present_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let screen_content_flag: u32 = unsafe { ::std::mem::transmute(screen_content_flag) };
            screen_content_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let enable_gpu_weighted_prediction: u32 =
                unsafe { ::std::mem::transmute(enable_gpu_weighted_prediction) };
            enable_gpu_weighted_prediction as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let no_output_of_prior_pics_flag: u32 =
                unsafe { ::std::mem::transmute(no_output_of_prior_pics_flag) };
            no_output_of_prior_pics_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferHEVC__bindgen_ty_2 {
    pub bits: _VAEncPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1,
    pub value: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1,
    >() - 2usize];
    ["Alignment of _VAEncPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1>()
            - 2usize];
};
impl _VAEncPictureParameterBufferHEVC__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn pps_curr_pic_ref_enabled_flag(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pps_curr_pic_ref_enabled_flag(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 15u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pps_curr_pic_ref_enabled_flag: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pps_curr_pic_ref_enabled_flag: u16 =
                unsafe { ::std::mem::transmute(pps_curr_pic_ref_enabled_flag) };
            pps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 15u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferHEVC__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferHEVC__bindgen_ty_2>() - 2usize];
    ["Alignment of _VAEncPictureParameterBufferHEVC__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferHEVC__bindgen_ty_2>() - 2usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferHEVC"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferHEVC>() - 576usize];
    ["Alignment of _VAEncPictureParameterBufferHEVC"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferHEVC>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::decoded_curr_pic"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, decoded_curr_pic) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::reference_frames"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, reference_frames) - 28usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, coded_buf) - 448usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::collocated_ref_pic_index"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        collocated_ref_pic_index
    ) - 452usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::last_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, last_picture) - 453usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::pic_init_qp"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, pic_init_qp) - 454usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::diff_cu_qp_delta_depth"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        diff_cu_qp_delta_depth
    ) - 455usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::pps_cb_qp_offset"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, pps_cb_qp_offset) - 456usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::pps_cr_qp_offset"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, pps_cr_qp_offset) - 457usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::num_tile_columns_minus1"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        num_tile_columns_minus1
    ) - 458usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::num_tile_rows_minus1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, num_tile_rows_minus1) - 459usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::column_width_minus1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, column_width_minus1) - 460usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::row_height_minus1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, row_height_minus1) - 479usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::log2_parallel_merge_level_minus2"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        log2_parallel_merge_level_minus2
    )
        - 500usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::ctu_max_bitsize_allowed"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        ctu_max_bitsize_allowed
    ) - 501usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::num_ref_idx_l0_default_active_minus1"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        num_ref_idx_l0_default_active_minus1
    )
        - 502usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::num_ref_idx_l1_default_active_minus1"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        num_ref_idx_l1_default_active_minus1
    )
        - 503usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::slice_pic_parameter_set_id"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        slice_pic_parameter_set_id
    ) - 504usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::nal_unit_type"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, nal_unit_type) - 505usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::pic_fields"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, pic_fields) - 508usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::hierarchical_level_plus1"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferHEVC,
        hierarchical_level_plus1
    ) - 512usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::va_byte_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, va_byte_reserved) - 513usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::scc_fields"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, scc_fields) - 514usize];
    ["Offset of field: _VAEncPictureParameterBufferHEVC::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferHEVC, va_reserved) - 516usize];
};
pub type VAEncPictureParameterBufferHEVC = _VAEncPictureParameterBufferHEVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSliceParameterBufferHEVC {
    pub slice_segment_address: u32,
    pub num_ctu_in_slice: u32,
    pub slice_type: u8,
    pub slice_pic_parameter_set_id: u8,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub ref_pic_list0: [VAPictureHEVC; 15usize],
    pub ref_pic_list1: [VAPictureHEVC; 15usize],
    pub luma_log2_weight_denom: u8,
    pub delta_chroma_log2_weight_denom: i8,
    pub delta_luma_weight_l0: [i8; 15usize],
    pub luma_offset_l0: [i8; 15usize],
    pub delta_chroma_weight_l0: [[i8; 2usize]; 15usize],
    pub chroma_offset_l0: [[i8; 2usize]; 15usize],
    pub delta_luma_weight_l1: [i8; 15usize],
    pub luma_offset_l1: [i8; 15usize],
    pub delta_chroma_weight_l1: [[i8; 2usize]; 15usize],
    pub chroma_offset_l1: [[i8; 2usize]; 15usize],
    pub max_num_merge_cand: u8,
    pub slice_qp_delta: i8,
    pub slice_cb_qp_offset: i8,
    pub slice_cr_qp_offset: i8,
    pub slice_beta_offset_div2: i8,
    pub slice_tc_offset_div2: i8,
    pub slice_fields: _VAEncSliceParameterBufferHEVC__bindgen_ty_1,
    pub pred_weight_table_bit_offset: u32,
    pub pred_weight_table_bit_length: u32,
    pub va_reserved: [u32; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSliceParameterBufferHEVC__bindgen_ty_1 {
    pub bits: _VAEncSliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _VAEncSliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _VAEncSliceParameterBufferHEVC__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn last_slice_of_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_last_slice_of_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dependent_slice_segment_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segment_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn colour_plane_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_colour_plane_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_sao_luma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_luma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_sao_chroma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_chroma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn num_ref_idx_active_override_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_num_ref_idx_active_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mvd_l1_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mvd_l1_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cabac_init_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_slice_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn collocated_from_l0_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_collocated_from_l0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        last_slice_of_pic_flag: u32,
        dependent_slice_segment_flag: u32,
        colour_plane_id: u32,
        slice_temporal_mvp_enabled_flag: u32,
        slice_sao_luma_flag: u32,
        slice_sao_chroma_flag: u32,
        num_ref_idx_active_override_flag: u32,
        mvd_l1_zero_flag: u32,
        cabac_init_flag: u32,
        slice_deblocking_filter_disabled_flag: u32,
        slice_loop_filter_across_slices_enabled_flag: u32,
        collocated_from_l0_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let last_slice_of_pic_flag: u32 =
                unsafe { ::std::mem::transmute(last_slice_of_pic_flag) };
            last_slice_of_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dependent_slice_segment_flag: u32 =
                unsafe { ::std::mem::transmute(dependent_slice_segment_flag) };
            dependent_slice_segment_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let colour_plane_id: u32 = unsafe { ::std::mem::transmute(colour_plane_id) };
            colour_plane_id as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let slice_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_temporal_mvp_enabled_flag) };
            slice_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let slice_sao_luma_flag: u32 = unsafe { ::std::mem::transmute(slice_sao_luma_flag) };
            slice_sao_luma_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let slice_sao_chroma_flag: u32 =
                unsafe { ::std::mem::transmute(slice_sao_chroma_flag) };
            slice_sao_chroma_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let num_ref_idx_active_override_flag: u32 =
                unsafe { ::std::mem::transmute(num_ref_idx_active_override_flag) };
            num_ref_idx_active_override_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let mvd_l1_zero_flag: u32 = unsafe { ::std::mem::transmute(mvd_l1_zero_flag) };
            mvd_l1_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let cabac_init_flag: u32 = unsafe { ::std::mem::transmute(cabac_init_flag) };
            cabac_init_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let slice_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_deblocking_filter_disabled_flag) };
            slice_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let slice_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_loop_filter_across_slices_enabled_flag) };
            slice_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let collocated_from_l0_flag: u32 =
                unsafe { ::std::mem::transmute(collocated_from_l0_flag) };
            collocated_from_l0_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSliceParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncSliceParameterBufferHEVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSliceParameterBufferHEVC__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBufferHEVC"]
        [::std::mem::size_of::<_VAEncSliceParameterBufferHEVC>() - 1076usize];
    ["Alignment of _VAEncSliceParameterBufferHEVC"]
        [::std::mem::align_of::<_VAEncSliceParameterBufferHEVC>() - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_segment_address"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, slice_segment_address) - 0usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::num_ctu_in_slice"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, num_ctu_in_slice) - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_type"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, slice_type) - 8usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_pic_parameter_set_id"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferHEVC,
        slice_pic_parameter_set_id
    ) - 9usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::num_ref_idx_l0_active_minus1"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferHEVC,
        num_ref_idx_l0_active_minus1
    ) - 10usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::num_ref_idx_l1_active_minus1"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferHEVC,
        num_ref_idx_l1_active_minus1
    ) - 11usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::ref_pic_list0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, ref_pic_list0) - 12usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::ref_pic_list1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, ref_pic_list1) - 432usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::luma_log2_weight_denom"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, luma_log2_weight_denom) - 852usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::delta_chroma_log2_weight_denom"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferHEVC,
        delta_chroma_log2_weight_denom
    )
        - 853usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::delta_luma_weight_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, delta_luma_weight_l0) - 854usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::luma_offset_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, luma_offset_l0) - 869usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::delta_chroma_weight_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, delta_chroma_weight_l0) - 884usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::chroma_offset_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, chroma_offset_l0) - 914usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::delta_luma_weight_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, delta_luma_weight_l1) - 944usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::luma_offset_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, luma_offset_l1) - 959usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::delta_chroma_weight_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, delta_chroma_weight_l1) - 974usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::chroma_offset_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, chroma_offset_l1) - 1004usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::max_num_merge_cand"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, max_num_merge_cand) - 1034usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_qp_delta"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, slice_qp_delta) - 1035usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_cb_qp_offset"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, slice_cb_qp_offset) - 1036usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_cr_qp_offset"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, slice_cr_qp_offset) - 1037usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_beta_offset_div2"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferHEVC,
        slice_beta_offset_div2
    ) - 1038usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_tc_offset_div2"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, slice_tc_offset_div2) - 1039usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::slice_fields"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, slice_fields) - 1040usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::pred_weight_table_bit_offset"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferHEVC,
        pred_weight_table_bit_offset
    )
        - 1044usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::pred_weight_table_bit_length"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferHEVC,
        pred_weight_table_bit_length
    )
        - 1048usize];
    ["Offset of field: _VAEncSliceParameterBufferHEVC::va_reserved"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferHEVC, va_reserved) - 1052usize];
};
pub type VAEncSliceParameterBufferHEVC = _VAEncSliceParameterBufferHEVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAQMatrixBufferHEVC {
    pub scaling_lists_4x4: [[[u8; 16usize]; 2usize]; 3usize],
    pub scaling_lists_8x8: [[[u8; 64usize]; 2usize]; 3usize],
    pub scaling_lists_16x16: [[[u8; 64usize]; 2usize]; 3usize],
    pub scaling_lists_32x32: [[u8; 64usize]; 2usize],
    pub scaling_list_dc_16x16: [[u8; 2usize]; 3usize],
    pub scaling_list_dc_32x32: [u8; 2usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAQMatrixBufferHEVC"][::std::mem::size_of::<_VAQMatrixBufferHEVC>() - 1016usize];
    ["Alignment of _VAQMatrixBufferHEVC"][::std::mem::align_of::<_VAQMatrixBufferHEVC>() - 4usize];
    ["Offset of field: _VAQMatrixBufferHEVC::scaling_lists_4x4"]
        [::std::mem::offset_of!(_VAQMatrixBufferHEVC, scaling_lists_4x4) - 0usize];
    ["Offset of field: _VAQMatrixBufferHEVC::scaling_lists_8x8"]
        [::std::mem::offset_of!(_VAQMatrixBufferHEVC, scaling_lists_8x8) - 96usize];
    ["Offset of field: _VAQMatrixBufferHEVC::scaling_lists_16x16"]
        [::std::mem::offset_of!(_VAQMatrixBufferHEVC, scaling_lists_16x16) - 480usize];
    ["Offset of field: _VAQMatrixBufferHEVC::scaling_lists_32x32"]
        [::std::mem::offset_of!(_VAQMatrixBufferHEVC, scaling_lists_32x32) - 864usize];
    ["Offset of field: _VAQMatrixBufferHEVC::scaling_list_dc_16x16"]
        [::std::mem::offset_of!(_VAQMatrixBufferHEVC, scaling_list_dc_16x16) - 992usize];
    ["Offset of field: _VAQMatrixBufferHEVC::scaling_list_dc_32x32"]
        [::std::mem::offset_of!(_VAQMatrixBufferHEVC, scaling_list_dc_32x32) - 998usize];
    ["Offset of field: _VAQMatrixBufferHEVC::va_reserved"]
        [::std::mem::offset_of!(_VAQMatrixBufferHEVC, va_reserved) - 1000usize];
};
pub type VAQMatrixBufferHEVC = _VAQMatrixBufferHEVC;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValStats {
    pub bits: _VAConfigAttribValStats__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValStats__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValStats__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValStats__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValStats__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValStats__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValStats__bindgen_ty_1 {
    #[inline]
    pub fn max_num_past_references(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_past_references(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn max_num_future_references(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_future_references(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn num_outputs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_num_outputs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn interlaced(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_interlaced(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        max_num_past_references: u32,
        max_num_future_references: u32,
        num_outputs: u32,
        interlaced: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let max_num_past_references: u32 =
                unsafe { ::std::mem::transmute(max_num_past_references) };
            max_num_past_references as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let max_num_future_references: u32 =
                unsafe { ::std::mem::transmute(max_num_future_references) };
            max_num_future_references as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let num_outputs: u32 = unsafe { ::std::mem::transmute(num_outputs) };
            num_outputs as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let interlaced: u32 = unsafe { ::std::mem::transmute(interlaced) };
            interlaced as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValStats"][::std::mem::size_of::<_VAConfigAttribValStats>() - 4usize];
    ["Alignment of _VAConfigAttribValStats"]
        [::std::mem::align_of::<_VAConfigAttribValStats>() - 4usize];
    ["Offset of field: _VAConfigAttribValStats::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValStats, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValStats::value"]
        [::std::mem::offset_of!(_VAConfigAttribValStats, value) - 0usize];
};
pub type VAConfigAttribValStats = _VAConfigAttribValStats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAPictureStats {
    pub picture_id: VASurfaceID,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAPictureStats"][::std::mem::size_of::<_VAPictureStats>() - 8usize];
    ["Alignment of _VAPictureStats"][::std::mem::align_of::<_VAPictureStats>() - 4usize];
    ["Offset of field: _VAPictureStats::picture_id"]
        [::std::mem::offset_of!(_VAPictureStats, picture_id) - 0usize];
    ["Offset of field: _VAPictureStats::flags"]
        [::std::mem::offset_of!(_VAPictureStats, flags) - 4usize];
};
pub type VAPictureStats = _VAPictureStats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAStatsStatisticsParameter {
    pub input: VAPictureStats,
    pub past_references: *mut VAPictureStats,
    pub num_past_references: u32,
    pub past_ref_stat_buf: *mut VABufferID,
    pub future_references: *mut VAPictureStats,
    pub num_future_references: u32,
    pub future_ref_stat_buf: *mut VABufferID,
    pub outputs: *mut VABufferID,
    pub mv_predictor: VABufferID,
    pub qp: VABufferID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAStatsStatisticsParameter"]
        [::std::mem::size_of::<_VAStatsStatisticsParameter>() - 72usize];
    ["Alignment of _VAStatsStatisticsParameter"]
        [::std::mem::align_of::<_VAStatsStatisticsParameter>() - 8usize];
    ["Offset of field: _VAStatsStatisticsParameter::input"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, input) - 0usize];
    ["Offset of field: _VAStatsStatisticsParameter::past_references"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, past_references) - 8usize];
    ["Offset of field: _VAStatsStatisticsParameter::num_past_references"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, num_past_references) - 16usize];
    ["Offset of field: _VAStatsStatisticsParameter::past_ref_stat_buf"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, past_ref_stat_buf) - 24usize];
    ["Offset of field: _VAStatsStatisticsParameter::future_references"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, future_references) - 32usize];
    ["Offset of field: _VAStatsStatisticsParameter::num_future_references"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, num_future_references) - 40usize];
    ["Offset of field: _VAStatsStatisticsParameter::future_ref_stat_buf"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, future_ref_stat_buf) - 48usize];
    ["Offset of field: _VAStatsStatisticsParameter::outputs"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, outputs) - 56usize];
    ["Offset of field: _VAStatsStatisticsParameter::mv_predictor"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, mv_predictor) - 64usize];
    ["Offset of field: _VAStatsStatisticsParameter::qp"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameter, qp) - 68usize];
};
pub type VAStatsStatisticsParameter = _VAStatsStatisticsParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterFEIFrameControlHEVC {
    pub function: u32,
    pub ctb_ctrl: VABufferID,
    pub ctb_cmd: VABufferID,
    pub cu_record: VABufferID,
    pub distortion: VABufferID,
    pub qp: VABufferID,
    pub mv_predictor: VABufferID,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 20usize]>,
    pub max_frame_size: u32,
    pub num_passes: u32,
    pub delta_qp: *mut u8,
    pub reserved4: [u32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterFEIFrameControlHEVC"]
        [::std::mem::size_of::<_VAEncMiscParameterFEIFrameControlHEVC>() - 72usize];
    ["Alignment of _VAEncMiscParameterFEIFrameControlHEVC"]
        [::std::mem::align_of::<_VAEncMiscParameterFEIFrameControlHEVC>() - 8usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::function"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, function) - 0usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::ctb_ctrl"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, ctb_ctrl) - 4usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::ctb_cmd"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, ctb_cmd) - 8usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::cu_record"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, cu_record) - 12usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::distortion"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, distortion) - 16usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, qp) - 20usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::mv_predictor"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, mv_predictor) - 24usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::max_frame_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, max_frame_size) - 48usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::num_passes"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, num_passes) - 52usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::delta_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, delta_qp) - 56usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlHEVC::reserved4"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlHEVC, reserved4) - 64usize];
};
impl _VAEncMiscParameterFEIFrameControlHEVC {
    #[inline]
    pub fn num_mv_predictors_l0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_num_mv_predictors_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn num_mv_predictors_l1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_num_mv_predictors_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn search_path(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_search_path(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn len_sp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_len_sp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn multi_pred_l0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_multi_pred_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn multi_pred_l1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(68usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_multi_pred_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(68usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_pel_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(72usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pel_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(72usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn adaptive_search(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(74usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_adaptive_search(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(74usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mv_predictor_input(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(75usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mv_predictor_input(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(75usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn per_block_qp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(78usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_per_block_qp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(78usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn per_ctb_input(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(79usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_per_ctb_input(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(79usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn colocated_ctb_distortion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_colocated_ctb_distortion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_lcu_split(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(81usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_lcu_split(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(81usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_cu64_check(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(82usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_cu64_check(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(82usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_cu64_amp_check(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(83usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_cu64_amp_check(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(83usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cu64_skip_check_only(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(84usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu64_skip_check_only(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(84usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(85usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(85usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_width(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_height(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(104usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_height(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(104usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn search_window(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(112usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_search_window(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(112usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn max_num_ime_search_center(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(120usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_max_num_ime_search_center(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(120usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn fast_intra_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(123usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fast_intra_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(123usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(124usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(124usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn num_concurrent_enc_frame_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(128usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_num_concurrent_enc_frame_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(128usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(136usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(136usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        num_mv_predictors_l0: u32,
        num_mv_predictors_l1: u32,
        search_path: u32,
        len_sp: u32,
        reserved0: u32,
        multi_pred_l0: u32,
        multi_pred_l1: u32,
        sub_pel_mode: u32,
        adaptive_search: u32,
        mv_predictor_input: u32,
        per_block_qp: u32,
        per_ctb_input: u32,
        colocated_ctb_distortion: u32,
        force_lcu_split: u32,
        enable_cu64_check: u32,
        enable_cu64_amp_check: u32,
        cu64_skip_check_only: u32,
        reserved1: u32,
        ref_width: u32,
        ref_height: u32,
        search_window: u32,
        max_num_ime_search_center: u32,
        fast_intra_mode: u32,
        reserved2: u32,
        num_concurrent_enc_frame_partition: u32,
        reserved3: u32,
    ) -> __BindgenBitfieldUnit<[u8; 20usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 20usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let num_mv_predictors_l0: u32 = unsafe { ::std::mem::transmute(num_mv_predictors_l0) };
            num_mv_predictors_l0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let num_mv_predictors_l1: u32 = unsafe { ::std::mem::transmute(num_mv_predictors_l1) };
            num_mv_predictors_l1 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let search_path: u32 = unsafe { ::std::mem::transmute(search_path) };
            search_path as u64
        });
        __bindgen_bitfield_unit.set(40usize, 8u8, {
            let len_sp: u32 = unsafe { ::std::mem::transmute(len_sp) };
            len_sp as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(64usize, 4u8, {
            let multi_pred_l0: u32 = unsafe { ::std::mem::transmute(multi_pred_l0) };
            multi_pred_l0 as u64
        });
        __bindgen_bitfield_unit.set(68usize, 4u8, {
            let multi_pred_l1: u32 = unsafe { ::std::mem::transmute(multi_pred_l1) };
            multi_pred_l1 as u64
        });
        __bindgen_bitfield_unit.set(72usize, 2u8, {
            let sub_pel_mode: u32 = unsafe { ::std::mem::transmute(sub_pel_mode) };
            sub_pel_mode as u64
        });
        __bindgen_bitfield_unit.set(74usize, 1u8, {
            let adaptive_search: u32 = unsafe { ::std::mem::transmute(adaptive_search) };
            adaptive_search as u64
        });
        __bindgen_bitfield_unit.set(75usize, 3u8, {
            let mv_predictor_input: u32 = unsafe { ::std::mem::transmute(mv_predictor_input) };
            mv_predictor_input as u64
        });
        __bindgen_bitfield_unit.set(78usize, 1u8, {
            let per_block_qp: u32 = unsafe { ::std::mem::transmute(per_block_qp) };
            per_block_qp as u64
        });
        __bindgen_bitfield_unit.set(79usize, 1u8, {
            let per_ctb_input: u32 = unsafe { ::std::mem::transmute(per_ctb_input) };
            per_ctb_input as u64
        });
        __bindgen_bitfield_unit.set(80usize, 1u8, {
            let colocated_ctb_distortion: u32 =
                unsafe { ::std::mem::transmute(colocated_ctb_distortion) };
            colocated_ctb_distortion as u64
        });
        __bindgen_bitfield_unit.set(81usize, 1u8, {
            let force_lcu_split: u32 = unsafe { ::std::mem::transmute(force_lcu_split) };
            force_lcu_split as u64
        });
        __bindgen_bitfield_unit.set(82usize, 1u8, {
            let enable_cu64_check: u32 = unsafe { ::std::mem::transmute(enable_cu64_check) };
            enable_cu64_check as u64
        });
        __bindgen_bitfield_unit.set(83usize, 1u8, {
            let enable_cu64_amp_check: u32 =
                unsafe { ::std::mem::transmute(enable_cu64_amp_check) };
            enable_cu64_amp_check as u64
        });
        __bindgen_bitfield_unit.set(84usize, 1u8, {
            let cu64_skip_check_only: u32 = unsafe { ::std::mem::transmute(cu64_skip_check_only) };
            cu64_skip_check_only as u64
        });
        __bindgen_bitfield_unit.set(85usize, 11u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(96usize, 8u8, {
            let ref_width: u32 = unsafe { ::std::mem::transmute(ref_width) };
            ref_width as u64
        });
        __bindgen_bitfield_unit.set(104usize, 8u8, {
            let ref_height: u32 = unsafe { ::std::mem::transmute(ref_height) };
            ref_height as u64
        });
        __bindgen_bitfield_unit.set(112usize, 8u8, {
            let search_window: u32 = unsafe { ::std::mem::transmute(search_window) };
            search_window as u64
        });
        __bindgen_bitfield_unit.set(120usize, 3u8, {
            let max_num_ime_search_center: u32 =
                unsafe { ::std::mem::transmute(max_num_ime_search_center) };
            max_num_ime_search_center as u64
        });
        __bindgen_bitfield_unit.set(123usize, 1u8, {
            let fast_intra_mode: u32 = unsafe { ::std::mem::transmute(fast_intra_mode) };
            fast_intra_mode as u64
        });
        __bindgen_bitfield_unit.set(124usize, 4u8, {
            let reserved2: u32 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(128usize, 8u8, {
            let num_concurrent_enc_frame_partition: u32 =
                unsafe { ::std::mem::transmute(num_concurrent_enc_frame_partition) };
            num_concurrent_enc_frame_partition as u64
        });
        __bindgen_bitfield_unit.set(136usize, 24u8, {
            let reserved3: u32 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAEncMiscParameterFEIFrameControlHEVC = _VAEncMiscParameterFEIFrameControlHEVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIMVPredictorHEVC {
    pub ref_idx: [_VAEncFEIMVPredictorHEVC__bindgen_ty_1; 4usize],
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub mv: [VAMotionVector; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIMVPredictorHEVC__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMVPredictorHEVC__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncFEIMVPredictorHEVC__bindgen_ty_1>() - 1usize];
    ["Alignment of _VAEncFEIMVPredictorHEVC__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncFEIMVPredictorHEVC__bindgen_ty_1>() - 1usize];
};
impl _VAEncFEIMVPredictorHEVC__bindgen_ty_1 {
    #[inline]
    pub fn ref_idx_l0(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_ref_idx_l0(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l1(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_ref_idx_l1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ref_idx_l0: u8, ref_idx_l1: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ref_idx_l0: u8 = unsafe { ::std::mem::transmute(ref_idx_l0) };
            ref_idx_l0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ref_idx_l1: u8 = unsafe { ::std::mem::transmute(ref_idx_l1) };
            ref_idx_l1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMVPredictorHEVC"]
        [::std::mem::size_of::<_VAEncFEIMVPredictorHEVC>() - 40usize];
    ["Alignment of _VAEncFEIMVPredictorHEVC"]
        [::std::mem::align_of::<_VAEncFEIMVPredictorHEVC>() - 4usize];
    ["Offset of field: _VAEncFEIMVPredictorHEVC::ref_idx"]
        [::std::mem::offset_of!(_VAEncFEIMVPredictorHEVC, ref_idx) - 0usize];
    ["Offset of field: _VAEncFEIMVPredictorHEVC::mv"]
        [::std::mem::offset_of!(_VAEncFEIMVPredictorHEVC, mv) - 8usize];
};
impl _VAEncFEIMVPredictorHEVC {
    #[inline]
    pub fn block_size(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_block_size(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(block_size: u32, reserved: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let block_size: u32 = unsafe { ::std::mem::transmute(block_size) };
            block_size as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAEncFEIMVPredictorHEVC = _VAEncFEIMVPredictorHEVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEICTBControlHEVC {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEICTBControlHEVC"][::std::mem::size_of::<_VAEncFEICTBControlHEVC>() - 16usize];
    ["Alignment of _VAEncFEICTBControlHEVC"]
        [::std::mem::align_of::<_VAEncFEICTBControlHEVC>() - 4usize];
    ["Offset of field: _VAEncFEICTBControlHEVC::reserved1"]
        [::std::mem::offset_of!(_VAEncFEICTBControlHEVC, reserved1) - 4usize];
    ["Offset of field: _VAEncFEICTBControlHEVC::reserved2"]
        [::std::mem::offset_of!(_VAEncFEICTBControlHEVC, reserved2) - 8usize];
    ["Offset of field: _VAEncFEICTBControlHEVC::reserved3"]
        [::std::mem::offset_of!(_VAEncFEICTBControlHEVC, reserved3) - 12usize];
};
impl _VAEncFEICTBControlHEVC {
    #[inline]
    pub fn force_to_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_to_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_to_inter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_to_inter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_to_skip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_to_skip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_to_zero_coeff(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_to_zero_coeff(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_to_intra: u32,
        force_to_inter: u32,
        force_to_skip: u32,
        force_to_zero_coeff: u32,
        reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_to_intra: u32 = unsafe { ::std::mem::transmute(force_to_intra) };
            force_to_intra as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let force_to_inter: u32 = unsafe { ::std::mem::transmute(force_to_inter) };
            force_to_inter as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let force_to_skip: u32 = unsafe { ::std::mem::transmute(force_to_skip) };
            force_to_skip as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let force_to_zero_coeff: u32 = unsafe { ::std::mem::transmute(force_to_zero_coeff) };
            force_to_zero_coeff as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAEncFEICTBControlHEVC = _VAEncFEICTBControlHEVC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIDistortionHevc {
    pub best_distortion: u32,
    pub colocated_ctb_distortion: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIDistortionHevc"][::std::mem::size_of::<_VAEncFEIDistortionHevc>() - 8usize];
    ["Alignment of _VAEncFEIDistortionHevc"]
        [::std::mem::align_of::<_VAEncFEIDistortionHevc>() - 4usize];
    ["Offset of field: _VAEncFEIDistortionHevc::best_distortion"]
        [::std::mem::offset_of!(_VAEncFEIDistortionHevc, best_distortion) - 0usize];
    ["Offset of field: _VAEncFEIDistortionHevc::colocated_ctb_distortion"]
        [::std::mem::offset_of!(_VAEncFEIDistortionHevc, colocated_ctb_distortion) - 4usize];
};
pub type VAEncFEIDistortionHevc = _VAEncFEIDistortionHevc;
pub const VAEncPackedHeaderH264_SPS: VAEncPackedHeaderTypeH264 = 1;
pub const VAEncPackedHeaderH264_PPS: VAEncPackedHeaderTypeH264 = 2;
pub const VAEncPackedHeaderH264_Slice: VAEncPackedHeaderTypeH264 = 3;
pub const VAEncPackedHeaderH264_SEI: VAEncPackedHeaderTypeH264 = 2147483649;
pub type VAEncPackedHeaderTypeH264 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSequenceParameterBufferH264 {
    pub seq_parameter_set_id: u8,
    pub level_idc: u8,
    pub intra_period: u32,
    pub intra_idr_period: u32,
    pub ip_period: u32,
    pub bits_per_second: u32,
    pub max_num_ref_frames: u32,
    pub picture_width_in_mbs: u16,
    pub picture_height_in_mbs: u16,
    pub seq_fields: _VAEncSequenceParameterBufferH264__bindgen_ty_1,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub num_ref_frames_in_pic_order_cnt_cycle: u8,
    pub offset_for_non_ref_pic: i32,
    pub offset_for_top_to_bottom_field: i32,
    pub offset_for_ref_frame: [i32; 256usize],
    pub frame_cropping_flag: u8,
    pub frame_crop_left_offset: u32,
    pub frame_crop_right_offset: u32,
    pub frame_crop_top_offset: u32,
    pub frame_crop_bottom_offset: u32,
    pub vui_parameters_present_flag: u8,
    pub vui_fields: _VAEncSequenceParameterBufferH264__bindgen_ty_2,
    pub aspect_ratio_idc: u8,
    pub sar_width: u32,
    pub sar_height: u32,
    pub num_units_in_tick: u32,
    pub time_scale: u32,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferH264__bindgen_ty_1 {
    pub bits: _VAEncSequenceParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferH264__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferH264__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferH264__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferH264__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferH264__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn chroma_format_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_format_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_mbs_only_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_mbs_only_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_adaptive_frame_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_adaptive_frame_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seq_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seq_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_8x8_inference_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_8x8_inference_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_frame_num_minus4(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_frame_num_minus4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_order_cnt_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_pic_order_cnt_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_pic_order_cnt_lsb_minus4(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_pic_order_cnt_lsb_minus4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_pic_order_always_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_pic_order_always_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chroma_format_idc: u32,
        frame_mbs_only_flag: u32,
        mb_adaptive_frame_field_flag: u32,
        seq_scaling_matrix_present_flag: u32,
        direct_8x8_inference_flag: u32,
        log2_max_frame_num_minus4: u32,
        pic_order_cnt_type: u32,
        log2_max_pic_order_cnt_lsb_minus4: u32,
        delta_pic_order_always_zero_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let chroma_format_idc: u32 = unsafe { ::std::mem::transmute(chroma_format_idc) };
            chroma_format_idc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let frame_mbs_only_flag: u32 = unsafe { ::std::mem::transmute(frame_mbs_only_flag) };
            frame_mbs_only_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mb_adaptive_frame_field_flag: u32 =
                unsafe { ::std::mem::transmute(mb_adaptive_frame_field_flag) };
            mb_adaptive_frame_field_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let seq_scaling_matrix_present_flag: u32 =
                unsafe { ::std::mem::transmute(seq_scaling_matrix_present_flag) };
            seq_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let direct_8x8_inference_flag: u32 =
                unsafe { ::std::mem::transmute(direct_8x8_inference_flag) };
            direct_8x8_inference_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 4u8, {
            let log2_max_frame_num_minus4: u32 =
                unsafe { ::std::mem::transmute(log2_max_frame_num_minus4) };
            log2_max_frame_num_minus4 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let pic_order_cnt_type: u32 = unsafe { ::std::mem::transmute(pic_order_cnt_type) };
            pic_order_cnt_type as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let log2_max_pic_order_cnt_lsb_minus4: u32 =
                unsafe { ::std::mem::transmute(log2_max_pic_order_cnt_lsb_minus4) };
            log2_max_pic_order_cnt_lsb_minus4 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let delta_pic_order_always_zero_flag: u32 =
                unsafe { ::std::mem::transmute(delta_pic_order_always_zero_flag) };
            delta_pic_order_always_zero_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferH264__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferH264__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferH264__bindgen_ty_2 {
    pub bits: _VAEncSequenceParameterBufferH264__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferH264__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferH264__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferH264__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferH264__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferH264__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferH264__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_mv_length_horizontal(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_mv_length_horizontal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn log2_max_mv_length_vertical(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_log2_max_mv_length_vertical(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn fixed_frame_rate_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_frame_rate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn low_delay_hrd_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay_hrd_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn motion_vectors_over_pic_boundaries_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_motion_vectors_over_pic_boundaries_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        timing_info_present_flag: u32,
        bitstream_restriction_flag: u32,
        log2_max_mv_length_horizontal: u32,
        log2_max_mv_length_vertical: u32,
        fixed_frame_rate_flag: u32,
        low_delay_hrd_flag: u32,
        motion_vectors_over_pic_boundaries_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(timing_info_present_flag) };
            timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::std::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let log2_max_mv_length_horizontal: u32 =
                unsafe { ::std::mem::transmute(log2_max_mv_length_horizontal) };
            log2_max_mv_length_horizontal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let log2_max_mv_length_vertical: u32 =
                unsafe { ::std::mem::transmute(log2_max_mv_length_vertical) };
            log2_max_mv_length_vertical as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let fixed_frame_rate_flag: u32 =
                unsafe { ::std::mem::transmute(fixed_frame_rate_flag) };
            fixed_frame_rate_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let low_delay_hrd_flag: u32 = unsafe { ::std::mem::transmute(low_delay_hrd_flag) };
            low_delay_hrd_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let motion_vectors_over_pic_boundaries_flag: u32 =
                unsafe { ::std::mem::transmute(motion_vectors_over_pic_boundaries_flag) };
            motion_vectors_over_pic_boundaries_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferH264__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferH264__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferH264__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferH264__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferH264"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferH264>() - 1132usize];
    ["Alignment of _VAEncSequenceParameterBufferH264"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferH264>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::seq_parameter_set_id"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, seq_parameter_set_id) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::level_idc"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, level_idc) - 1usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, intra_period) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::intra_idr_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, intra_idr_period) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::ip_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, ip_period) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, bits_per_second) - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::max_num_ref_frames"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, max_num_ref_frames) - 20usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::picture_width_in_mbs"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, picture_width_in_mbs) - 24usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::picture_height_in_mbs"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        picture_height_in_mbs
    ) - 26usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::seq_fields"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, seq_fields) - 28usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::bit_depth_luma_minus8"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        bit_depth_luma_minus8
    ) - 32usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::bit_depth_chroma_minus8"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        bit_depth_chroma_minus8
    ) - 33usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::num_ref_frames_in_pic_order_cnt_cycle"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        num_ref_frames_in_pic_order_cnt_cycle
    )
        - 34usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::offset_for_non_ref_pic"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        offset_for_non_ref_pic
    ) - 36usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::offset_for_top_to_bottom_field"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        offset_for_top_to_bottom_field
    )
        - 40usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::offset_for_ref_frame"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, offset_for_ref_frame) - 44usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::frame_cropping_flag"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        frame_cropping_flag
    ) - 1068usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::frame_crop_left_offset"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        frame_crop_left_offset
    ) - 1072usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::frame_crop_right_offset"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        frame_crop_right_offset
    ) - 1076usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::frame_crop_top_offset"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        frame_crop_top_offset
    ) - 1080usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::frame_crop_bottom_offset"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        frame_crop_bottom_offset
    ) - 1084usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::vui_parameters_present_flag"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferH264,
        vui_parameters_present_flag
    )
        - 1088usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::vui_fields"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, vui_fields) - 1092usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::aspect_ratio_idc"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, aspect_ratio_idc) - 1096usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::sar_width"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, sar_width) - 1100usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::sar_height"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, sar_height) - 1104usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::num_units_in_tick"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, num_units_in_tick) - 1108usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::time_scale"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, time_scale) - 1112usize];
    ["Offset of field: _VAEncSequenceParameterBufferH264::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferH264, va_reserved) - 1116usize];
};
pub type VAEncSequenceParameterBufferH264 = _VAEncSequenceParameterBufferH264;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncPictureParameterBufferH264 {
    pub CurrPic: VAPictureH264,
    pub ReferenceFrames: [VAPictureH264; 16usize],
    pub coded_buf: VABufferID,
    pub pic_parameter_set_id: u8,
    pub seq_parameter_set_id: u8,
    pub last_picture: u8,
    pub frame_num: u16,
    pub pic_init_qp: u8,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub chroma_qp_index_offset: i8,
    pub second_chroma_qp_index_offset: i8,
    pub pic_fields: _VAEncPictureParameterBufferH264__bindgen_ty_1,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferH264__bindgen_ty_1 {
    pub bits: _VAEncPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferH264__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn idr_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_idr_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reference_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reference_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn entropy_coding_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_bipred_idc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_bipred_idc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_8x8_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_8x8_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn redundant_pic_cnt_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_redundant_pic_cnt_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_order_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_order_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        idr_pic_flag: u32,
        reference_pic_flag: u32,
        entropy_coding_mode_flag: u32,
        weighted_pred_flag: u32,
        weighted_bipred_idc: u32,
        constrained_intra_pred_flag: u32,
        transform_8x8_mode_flag: u32,
        deblocking_filter_control_present_flag: u32,
        redundant_pic_cnt_present_flag: u32,
        pic_order_present_flag: u32,
        pic_scaling_matrix_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let idr_pic_flag: u32 = unsafe { ::std::mem::transmute(idr_pic_flag) };
            idr_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let reference_pic_flag: u32 = unsafe { ::std::mem::transmute(reference_pic_flag) };
            reference_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let entropy_coding_mode_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_mode_flag) };
            entropy_coding_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let weighted_bipred_idc: u32 = unsafe { ::std::mem::transmute(weighted_bipred_idc) };
            weighted_bipred_idc as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let transform_8x8_mode_flag: u32 =
                unsafe { ::std::mem::transmute(transform_8x8_mode_flag) };
            transform_8x8_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let redundant_pic_cnt_present_flag: u32 =
                unsafe { ::std::mem::transmute(redundant_pic_cnt_present_flag) };
            redundant_pic_cnt_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let pic_order_present_flag: u32 =
                unsafe { ::std::mem::transmute(pic_order_present_flag) };
            pic_order_present_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let pic_scaling_matrix_present_flag: u32 =
                unsafe { ::std::mem::transmute(pic_scaling_matrix_present_flag) };
            pic_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferH264__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferH264__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferH264__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferH264__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferH264"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferH264>() - 648usize];
    ["Alignment of _VAEncPictureParameterBufferH264"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferH264>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::CurrPic"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, CurrPic) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::ReferenceFrames"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, ReferenceFrames) - 36usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, coded_buf) - 612usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::pic_parameter_set_id"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, pic_parameter_set_id) - 616usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::seq_parameter_set_id"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, seq_parameter_set_id) - 617usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::last_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, last_picture) - 618usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::frame_num"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, frame_num) - 620usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::pic_init_qp"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, pic_init_qp) - 622usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::num_ref_idx_l0_active_minus1"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferH264,
        num_ref_idx_l0_active_minus1
    )
        - 623usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::num_ref_idx_l1_active_minus1"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferH264,
        num_ref_idx_l1_active_minus1
    )
        - 624usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::chroma_qp_index_offset"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferH264,
        chroma_qp_index_offset
    ) - 625usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::second_chroma_qp_index_offset"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferH264,
        second_chroma_qp_index_offset
    )
        - 626usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::pic_fields"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, pic_fields) - 628usize];
    ["Offset of field: _VAEncPictureParameterBufferH264::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferH264, va_reserved) - 632usize];
};
pub type VAEncPictureParameterBufferH264 = _VAEncPictureParameterBufferH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncQPBufferH264 {
    pub qp: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncQPBufferH264"][::std::mem::size_of::<_VAEncQPBufferH264>() - 1usize];
    ["Alignment of _VAEncQPBufferH264"][::std::mem::align_of::<_VAEncQPBufferH264>() - 1usize];
    ["Offset of field: _VAEncQPBufferH264::qp"]
        [::std::mem::offset_of!(_VAEncQPBufferH264, qp) - 0usize];
};
pub type VAEncQPBufferH264 = _VAEncQPBufferH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSliceParameterBufferH264 {
    pub macroblock_address: u32,
    pub num_macroblocks: u32,
    pub macroblock_info: VABufferID,
    pub slice_type: u8,
    pub pic_parameter_set_id: u8,
    pub idr_pic_id: u16,
    pub pic_order_cnt_lsb: u16,
    pub delta_pic_order_cnt_bottom: i32,
    pub delta_pic_order_cnt: [i32; 2usize],
    pub direct_spatial_mv_pred_flag: u8,
    pub num_ref_idx_active_override_flag: u8,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub RefPicList0: [VAPictureH264; 32usize],
    pub RefPicList1: [VAPictureH264; 32usize],
    pub luma_log2_weight_denom: u8,
    pub chroma_log2_weight_denom: u8,
    pub luma_weight_l0_flag: u8,
    pub luma_weight_l0: [::std::os::raw::c_short; 32usize],
    pub luma_offset_l0: [::std::os::raw::c_short; 32usize],
    pub chroma_weight_l0_flag: u8,
    pub chroma_weight_l0: [[::std::os::raw::c_short; 2usize]; 32usize],
    pub chroma_offset_l0: [[::std::os::raw::c_short; 2usize]; 32usize],
    pub luma_weight_l1_flag: u8,
    pub luma_weight_l1: [::std::os::raw::c_short; 32usize],
    pub luma_offset_l1: [::std::os::raw::c_short; 32usize],
    pub chroma_weight_l1_flag: u8,
    pub chroma_weight_l1: [[::std::os::raw::c_short; 2usize]; 32usize],
    pub chroma_offset_l1: [[::std::os::raw::c_short; 2usize]; 32usize],
    pub cabac_init_idc: u8,
    pub slice_qp_delta: i8,
    pub disable_deblocking_filter_idc: u8,
    pub slice_alpha_c0_offset_div2: i8,
    pub slice_beta_offset_div2: i8,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBufferH264"]
        [::std::mem::size_of::<_VAEncSliceParameterBufferH264>() - 3140usize];
    ["Alignment of _VAEncSliceParameterBufferH264"]
        [::std::mem::align_of::<_VAEncSliceParameterBufferH264>() - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::macroblock_address"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, macroblock_address) - 0usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::num_macroblocks"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, num_macroblocks) - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::macroblock_info"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, macroblock_info) - 8usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::slice_type"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, slice_type) - 12usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::pic_parameter_set_id"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, pic_parameter_set_id) - 13usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::idr_pic_id"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, idr_pic_id) - 14usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::pic_order_cnt_lsb"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, pic_order_cnt_lsb) - 16usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::delta_pic_order_cnt_bottom"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        delta_pic_order_cnt_bottom
    ) - 20usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::delta_pic_order_cnt"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, delta_pic_order_cnt) - 24usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::direct_spatial_mv_pred_flag"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        direct_spatial_mv_pred_flag
    ) - 32usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::num_ref_idx_active_override_flag"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        num_ref_idx_active_override_flag
    )
        - 33usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::num_ref_idx_l0_active_minus1"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        num_ref_idx_l0_active_minus1
    ) - 34usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::num_ref_idx_l1_active_minus1"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        num_ref_idx_l1_active_minus1
    ) - 35usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::RefPicList0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, RefPicList0) - 36usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::RefPicList1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, RefPicList1) - 1188usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::luma_log2_weight_denom"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        luma_log2_weight_denom
    ) - 2340usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::chroma_log2_weight_denom"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        chroma_log2_weight_denom
    ) - 2341usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::luma_weight_l0_flag"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, luma_weight_l0_flag) - 2342usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::luma_weight_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, luma_weight_l0) - 2344usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::luma_offset_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, luma_offset_l0) - 2408usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::chroma_weight_l0_flag"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, chroma_weight_l0_flag) - 2472usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::chroma_weight_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, chroma_weight_l0) - 2474usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::chroma_offset_l0"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, chroma_offset_l0) - 2602usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::luma_weight_l1_flag"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, luma_weight_l1_flag) - 2730usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::luma_weight_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, luma_weight_l1) - 2732usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::luma_offset_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, luma_offset_l1) - 2796usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::chroma_weight_l1_flag"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, chroma_weight_l1_flag) - 2860usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::chroma_weight_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, chroma_weight_l1) - 2862usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::chroma_offset_l1"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, chroma_offset_l1) - 2990usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::cabac_init_idc"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, cabac_init_idc) - 3118usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::slice_qp_delta"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, slice_qp_delta) - 3119usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::disable_deblocking_filter_idc"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        disable_deblocking_filter_idc
    )
        - 3120usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::slice_alpha_c0_offset_div2"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        slice_alpha_c0_offset_div2
    ) - 3121usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::slice_beta_offset_div2"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferH264,
        slice_beta_offset_div2
    ) - 3122usize];
    ["Offset of field: _VAEncSliceParameterBufferH264::va_reserved"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferH264, va_reserved) - 3124usize];
};
pub type VAEncSliceParameterBufferH264 = _VAEncSliceParameterBufferH264;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMacroblockParameterBufferH264 {
    pub qp: u8,
    pub info: _VAEncMacroblockParameterBufferH264__bindgen_ty_1,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMacroblockParameterBufferH264__bindgen_ty_1 {
    pub intra_fields: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    pub inter_fields: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1 {
    pub bits: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: align_of :: < _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 > () - 4usize] ;
};
impl _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn pred_avail_override_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pred_avail_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pred_avail_flags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pred_avail_flags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pred_avail_override_flag: u32,
        pred_avail_flags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pred_avail_override_flag: u32 =
                unsafe { ::std::mem::transmute(pred_avail_override_flag) };
            pred_avail_override_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 8u8, {
            let pred_avail_flags: u32 = unsafe { ::std::mem::transmute(pred_avail_flags) };
            pred_avail_flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1::bits"][::std::mem::offset_of!(
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
        bits
    )
        - 0usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1::value"][::std::mem::offset_of!(
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_1,
        value
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2 {
    pub bits: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub reserved: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<
            _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"] [:: std :: mem :: align_of :: < _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 > () - 4usize] ;
    ["Offset of field: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::reserved"] [:: std :: mem :: offset_of ! (_VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 , reserved) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2"][::std::mem::size_of::<
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2,
    >() - 4usize];
    ["Alignment of _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2>()
            - 4usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2::bits"][::std::mem::offset_of!(
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2,
        bits
    )
        - 0usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2::value"][::std::mem::offset_of!(
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1__bindgen_ty_2,
        value
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMacroblockParameterBufferH264__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMacroblockParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMacroblockParameterBufferH264__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMacroblockParameterBufferH264__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264__bindgen_ty_1::intra_fields"][::std::mem::offset_of!(
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1,
        intra_fields
    )
        - 0usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264__bindgen_ty_1::inter_fields"][::std::mem::offset_of!(
        _VAEncMacroblockParameterBufferH264__bindgen_ty_1,
        inter_fields
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMacroblockParameterBufferH264"]
        [::std::mem::size_of::<_VAEncMacroblockParameterBufferH264>() - 24usize];
    ["Alignment of _VAEncMacroblockParameterBufferH264"]
        [::std::mem::align_of::<_VAEncMacroblockParameterBufferH264>() - 4usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264::qp"]
        [::std::mem::offset_of!(_VAEncMacroblockParameterBufferH264, qp) - 0usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264::info"]
        [::std::mem::offset_of!(_VAEncMacroblockParameterBufferH264, info) - 4usize];
    ["Offset of field: _VAEncMacroblockParameterBufferH264::va_reserved"]
        [::std::mem::offset_of!(_VAEncMacroblockParameterBufferH264, va_reserved) - 8usize];
};
pub type VAEncMacroblockParameterBufferH264 = _VAEncMacroblockParameterBufferH264;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterSubMbPartPelH264 {
    pub disable_inter_sub_mb_partition: u32,
    pub inter_sub_mb_partition_mask: _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1,
    pub enable_sub_pel_mode: u32,
    pub sub_pel_mode: u8,
    pub reserved: [u8; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1 {
    pub bits: _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1__bindgen_ty_1,
    pub value: u8,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn disable_16x16_inter_mb_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_16x16_inter_mb_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_16x8_inter_mb_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_16x8_inter_mb_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_8x16_inter_mb_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_8x16_inter_mb_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_8x8_inter_mb_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_8x8_inter_mb_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_8x4_inter_mb_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_8x4_inter_mb_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_4x8_inter_mb_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_4x8_inter_mb_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_4x4_inter_mb_partition(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_4x4_inter_mb_partition(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_16x16_inter_mb_partition: u32,
        disable_16x8_inter_mb_partition: u32,
        disable_8x16_inter_mb_partition: u32,
        disable_8x8_inter_mb_partition: u32,
        disable_8x4_inter_mb_partition: u32,
        disable_4x8_inter_mb_partition: u32,
        disable_4x4_inter_mb_partition: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disable_16x16_inter_mb_partition: u32 =
                unsafe { ::std::mem::transmute(disable_16x16_inter_mb_partition) };
            disable_16x16_inter_mb_partition as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disable_16x8_inter_mb_partition: u32 =
                unsafe { ::std::mem::transmute(disable_16x8_inter_mb_partition) };
            disable_16x8_inter_mb_partition as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let disable_8x16_inter_mb_partition: u32 =
                unsafe { ::std::mem::transmute(disable_8x16_inter_mb_partition) };
            disable_8x16_inter_mb_partition as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let disable_8x8_inter_mb_partition: u32 =
                unsafe { ::std::mem::transmute(disable_8x8_inter_mb_partition) };
            disable_8x8_inter_mb_partition as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let disable_8x4_inter_mb_partition: u32 =
                unsafe { ::std::mem::transmute(disable_8x4_inter_mb_partition) };
            disable_8x4_inter_mb_partition as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let disable_4x8_inter_mb_partition: u32 =
                unsafe { ::std::mem::transmute(disable_4x8_inter_mb_partition) };
            disable_4x8_inter_mb_partition as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let disable_4x4_inter_mb_partition: u32 =
                unsafe { ::std::mem::transmute(disable_4x4_inter_mb_partition) };
            disable_4x4_inter_mb_partition as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncMiscParameterSubMbPartPelH264__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterSubMbPartPelH264"]
        [::std::mem::size_of::<_VAEncMiscParameterSubMbPartPelH264>() - 16usize];
    ["Alignment of _VAEncMiscParameterSubMbPartPelH264"]
        [::std::mem::align_of::<_VAEncMiscParameterSubMbPartPelH264>() - 4usize];
    ["Offset of field: _VAEncMiscParameterSubMbPartPelH264::disable_inter_sub_mb_partition"][::std::mem::offset_of!(
        _VAEncMiscParameterSubMbPartPelH264,
        disable_inter_sub_mb_partition
    )
        - 0usize];
    ["Offset of field: _VAEncMiscParameterSubMbPartPelH264::inter_sub_mb_partition_mask"][::std::mem::offset_of!(
        _VAEncMiscParameterSubMbPartPelH264,
        inter_sub_mb_partition_mask
    )
        - 4usize];
    ["Offset of field: _VAEncMiscParameterSubMbPartPelH264::enable_sub_pel_mode"]
        [::std::mem::offset_of!(_VAEncMiscParameterSubMbPartPelH264, enable_sub_pel_mode) - 8usize];
    ["Offset of field: _VAEncMiscParameterSubMbPartPelH264::sub_pel_mode"]
        [::std::mem::offset_of!(_VAEncMiscParameterSubMbPartPelH264, sub_pel_mode) - 12usize];
    ["Offset of field: _VAEncMiscParameterSubMbPartPelH264::reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterSubMbPartPelH264, reserved) - 13usize];
};
pub type VAEncMiscParameterSubMbPartPelH264 = _VAEncMiscParameterSubMbPartPelH264;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncPictureParameterBufferJPEG {
    pub reconstructed_picture: VASurfaceID,
    pub picture_width: u16,
    pub picture_height: u16,
    pub coded_buf: VABufferID,
    pub pic_flags: _VAEncPictureParameterBufferJPEG__bindgen_ty_1,
    pub sample_bit_depth: u8,
    pub num_scan: u8,
    pub num_components: u16,
    pub component_id: [u8; 4usize],
    pub quantiser_table_selector: [u8; 4usize],
    pub quality: u8,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferJPEG__bindgen_ty_1 {
    pub bits: _VAEncPictureParameterBufferJPEG__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferJPEG__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferJPEG__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferJPEG__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferJPEG__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferJPEG__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferJPEG__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn profile(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_profile(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn progressive(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_progressive(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn huffman(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_huffman(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn interleaved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_interleaved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn differential(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_differential(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        profile: u32,
        progressive: u32,
        huffman: u32,
        interleaved: u32,
        differential: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let profile: u32 = unsafe { ::std::mem::transmute(profile) };
            profile as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let progressive: u32 = unsafe { ::std::mem::transmute(progressive) };
            progressive as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let huffman: u32 = unsafe { ::std::mem::transmute(huffman) };
            huffman as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let interleaved: u32 = unsafe { ::std::mem::transmute(interleaved) };
            interleaved as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let differential: u32 = unsafe { ::std::mem::transmute(differential) };
            differential as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferJPEG__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferJPEG__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferJPEG__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferJPEG__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferJPEG"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferJPEG>() - 48usize];
    ["Alignment of _VAEncPictureParameterBufferJPEG"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferJPEG>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::reconstructed_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, reconstructed_picture) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::picture_width"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, picture_width) - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::picture_height"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, picture_height) - 6usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, coded_buf) - 8usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::pic_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, pic_flags) - 12usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::sample_bit_depth"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, sample_bit_depth) - 16usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::num_scan"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, num_scan) - 17usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::num_components"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, num_components) - 18usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::component_id"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, component_id) - 20usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::quantiser_table_selector"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferJPEG,
        quantiser_table_selector
    ) - 24usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::quality"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, quality) - 28usize];
    ["Offset of field: _VAEncPictureParameterBufferJPEG::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferJPEG, va_reserved) - 32usize];
};
pub type VAEncPictureParameterBufferJPEG = _VAEncPictureParameterBufferJPEG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSliceParameterBufferJPEG {
    pub restart_interval: u16,
    pub num_components: u16,
    pub components: [_VAEncSliceParameterBufferJPEG__bindgen_ty_1; 4usize],
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSliceParameterBufferJPEG__bindgen_ty_1 {
    pub component_selector: u8,
    pub dc_table_selector: u8,
    pub ac_table_selector: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBufferJPEG__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSliceParameterBufferJPEG__bindgen_ty_1>() - 3usize];
    ["Alignment of _VAEncSliceParameterBufferJPEG__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSliceParameterBufferJPEG__bindgen_ty_1>() - 1usize];
    ["Offset of field: _VAEncSliceParameterBufferJPEG__bindgen_ty_1::component_selector"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferJPEG__bindgen_ty_1,
        component_selector
    )
        - 0usize];
    ["Offset of field: _VAEncSliceParameterBufferJPEG__bindgen_ty_1::dc_table_selector"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferJPEG__bindgen_ty_1,
        dc_table_selector
    )
        - 1usize];
    ["Offset of field: _VAEncSliceParameterBufferJPEG__bindgen_ty_1::ac_table_selector"][::std::mem::offset_of!(
        _VAEncSliceParameterBufferJPEG__bindgen_ty_1,
        ac_table_selector
    )
        - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBufferJPEG"]
        [::std::mem::size_of::<_VAEncSliceParameterBufferJPEG>() - 32usize];
    ["Alignment of _VAEncSliceParameterBufferJPEG"]
        [::std::mem::align_of::<_VAEncSliceParameterBufferJPEG>() - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferJPEG::restart_interval"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferJPEG, restart_interval) - 0usize];
    ["Offset of field: _VAEncSliceParameterBufferJPEG::num_components"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferJPEG, num_components) - 2usize];
    ["Offset of field: _VAEncSliceParameterBufferJPEG::components"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferJPEG, components) - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferJPEG::va_reserved"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferJPEG, va_reserved) - 16usize];
};
pub type VAEncSliceParameterBufferJPEG = _VAEncSliceParameterBufferJPEG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAQMatrixBufferJPEG {
    pub load_lum_quantiser_matrix: i32,
    pub load_chroma_quantiser_matrix: i32,
    pub lum_quantiser_matrix: [u8; 64usize],
    pub chroma_quantiser_matrix: [u8; 64usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAQMatrixBufferJPEG"][::std::mem::size_of::<_VAQMatrixBufferJPEG>() - 152usize];
    ["Alignment of _VAQMatrixBufferJPEG"][::std::mem::align_of::<_VAQMatrixBufferJPEG>() - 4usize];
    ["Offset of field: _VAQMatrixBufferJPEG::load_lum_quantiser_matrix"]
        [::std::mem::offset_of!(_VAQMatrixBufferJPEG, load_lum_quantiser_matrix) - 0usize];
    ["Offset of field: _VAQMatrixBufferJPEG::load_chroma_quantiser_matrix"]
        [::std::mem::offset_of!(_VAQMatrixBufferJPEG, load_chroma_quantiser_matrix) - 4usize];
    ["Offset of field: _VAQMatrixBufferJPEG::lum_quantiser_matrix"]
        [::std::mem::offset_of!(_VAQMatrixBufferJPEG, lum_quantiser_matrix) - 8usize];
    ["Offset of field: _VAQMatrixBufferJPEG::chroma_quantiser_matrix"]
        [::std::mem::offset_of!(_VAQMatrixBufferJPEG, chroma_quantiser_matrix) - 72usize];
    ["Offset of field: _VAQMatrixBufferJPEG::va_reserved"]
        [::std::mem::offset_of!(_VAQMatrixBufferJPEG, va_reserved) - 136usize];
};
pub type VAQMatrixBufferJPEG = _VAQMatrixBufferJPEG;
pub type VAQMatrixBufferMPEG2 = VAIQMatrixBufferMPEG2;
pub const VAEncPackedHeaderMPEG2_SPS: VAEncPackedHeaderTypeMPEG2 = 1;
pub const VAEncPackedHeaderMPEG2_PPS: VAEncPackedHeaderTypeMPEG2 = 2;
pub const VAEncPackedHeaderMPEG2_Slice: VAEncPackedHeaderTypeMPEG2 = 3;
pub type VAEncPackedHeaderTypeMPEG2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSequenceParameterBufferMPEG2 {
    pub intra_period: u32,
    pub ip_period: u32,
    pub picture_width: u16,
    pub picture_height: u16,
    pub bits_per_second: u32,
    pub frame_rate: f32,
    pub aspect_ratio_information: u16,
    pub vbv_buffer_size: u32,
    pub sequence_extension: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1,
    pub new_gop_header: u32,
    pub gop_header: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1 {
    pub bits: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn profile_and_level_indication(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_profile_and_level_indication(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn progressive_sequence(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_progressive_sequence(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_format(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn low_delay(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_rate_extension_n(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_rate_extension_n(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_rate_extension_d(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_frame_rate_extension_d(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        profile_and_level_indication: u32,
        progressive_sequence: u32,
        chroma_format: u32,
        low_delay: u32,
        frame_rate_extension_n: u32,
        frame_rate_extension_d: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let profile_and_level_indication: u32 =
                unsafe { ::std::mem::transmute(profile_and_level_indication) };
            profile_and_level_indication as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let progressive_sequence: u32 = unsafe { ::std::mem::transmute(progressive_sequence) };
            progressive_sequence as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let chroma_format: u32 = unsafe { ::std::mem::transmute(chroma_format) };
            chroma_format as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let low_delay: u32 = unsafe { ::std::mem::transmute(low_delay) };
            low_delay as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let frame_rate_extension_n: u32 =
                unsafe { ::std::mem::transmute(frame_rate_extension_n) };
            frame_rate_extension_n as u64
        });
        __bindgen_bitfield_unit.set(14usize, 5u8, {
            let frame_rate_extension_d: u32 =
                unsafe { ::std::mem::transmute(frame_rate_extension_d) };
            frame_rate_extension_d as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2 {
    pub bits: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn time_code(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_time_code(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub fn closed_gop(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_closed_gop(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn broken_link(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_broken_link(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        time_code: u32,
        closed_gop: u32,
        broken_link: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 25u8, {
            let time_code: u32 = unsafe { ::std::mem::transmute(time_code) };
            time_code as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let closed_gop: u32 = unsafe { ::std::mem::transmute(closed_gop) };
            closed_gop as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let broken_link: u32 = unsafe { ::std::mem::transmute(broken_link) };
            broken_link as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferMPEG2__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferMPEG2__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferMPEG2"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferMPEG2>() - 56usize];
    ["Alignment of _VAEncSequenceParameterBufferMPEG2"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferMPEG2>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, intra_period) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::ip_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, ip_period) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::picture_width"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, picture_width) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::picture_height"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, picture_height) - 10usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, bits_per_second) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::frame_rate"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, frame_rate) - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::aspect_ratio_information"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferMPEG2,
        aspect_ratio_information
    ) - 20usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::vbv_buffer_size"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, vbv_buffer_size) - 24usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::sequence_extension"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, sequence_extension) - 28usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::new_gop_header"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, new_gop_header) - 32usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::gop_header"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, gop_header) - 36usize];
    ["Offset of field: _VAEncSequenceParameterBufferMPEG2::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferMPEG2, va_reserved) - 40usize];
};
pub type VAEncSequenceParameterBufferMPEG2 = _VAEncSequenceParameterBufferMPEG2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncPictureParameterBufferMPEG2 {
    pub forward_reference_picture: VASurfaceID,
    pub backward_reference_picture: VASurfaceID,
    pub reconstructed_picture: VASurfaceID,
    pub coded_buf: VABufferID,
    pub last_picture: u8,
    pub picture_type: VAEncPictureType,
    pub temporal_reference: u32,
    pub vbv_delay: u32,
    pub f_code: [[u8; 2usize]; 2usize],
    pub picture_coding_extension: _VAEncPictureParameterBufferMPEG2__bindgen_ty_1,
    pub composite_display: _VAEncPictureParameterBufferMPEG2__bindgen_ty_2,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferMPEG2__bindgen_ty_1 {
    pub bits: _VAEncPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferMPEG2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn intra_dc_precision(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_intra_dc_precision(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn picture_structure(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_picture_structure(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn top_field_first(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_top_field_first(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_pred_frame_dct(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_pred_frame_dct(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn concealment_motion_vectors(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_concealment_motion_vectors(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn q_scale_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_q_scale_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_vlc_format(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_vlc_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn alternate_scan(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_alternate_scan(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn repeat_first_field(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_repeat_first_field(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn progressive_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_progressive_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn composite_display_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_composite_display_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        intra_dc_precision: u32,
        picture_structure: u32,
        top_field_first: u32,
        frame_pred_frame_dct: u32,
        concealment_motion_vectors: u32,
        q_scale_type: u32,
        intra_vlc_format: u32,
        alternate_scan: u32,
        repeat_first_field: u32,
        progressive_frame: u32,
        composite_display_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let intra_dc_precision: u32 = unsafe { ::std::mem::transmute(intra_dc_precision) };
            intra_dc_precision as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let picture_structure: u32 = unsafe { ::std::mem::transmute(picture_structure) };
            picture_structure as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let top_field_first: u32 = unsafe { ::std::mem::transmute(top_field_first) };
            top_field_first as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let frame_pred_frame_dct: u32 = unsafe { ::std::mem::transmute(frame_pred_frame_dct) };
            frame_pred_frame_dct as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let concealment_motion_vectors: u32 =
                unsafe { ::std::mem::transmute(concealment_motion_vectors) };
            concealment_motion_vectors as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let q_scale_type: u32 = unsafe { ::std::mem::transmute(q_scale_type) };
            q_scale_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let intra_vlc_format: u32 = unsafe { ::std::mem::transmute(intra_vlc_format) };
            intra_vlc_format as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let alternate_scan: u32 = unsafe { ::std::mem::transmute(alternate_scan) };
            alternate_scan as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let repeat_first_field: u32 = unsafe { ::std::mem::transmute(repeat_first_field) };
            repeat_first_field as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let progressive_frame: u32 = unsafe { ::std::mem::transmute(progressive_frame) };
            progressive_frame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let composite_display_flag: u32 =
                unsafe { ::std::mem::transmute(composite_display_flag) };
            composite_display_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferMPEG2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferMPEG2__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferMPEG2__bindgen_ty_2 {
    pub bits: _VAEncPictureParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferMPEG2__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn v_axis(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_v_axis(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn field_sequence(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_field_sequence(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_carrier(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sub_carrier(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn burst_amplitude(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_burst_amplitude(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_carrier_phase(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sub_carrier_phase(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        v_axis: u32,
        field_sequence: u32,
        sub_carrier: u32,
        burst_amplitude: u32,
        sub_carrier_phase: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let v_axis: u32 = unsafe { ::std::mem::transmute(v_axis) };
            v_axis as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let field_sequence: u32 = unsafe { ::std::mem::transmute(field_sequence) };
            field_sequence as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let sub_carrier: u32 = unsafe { ::std::mem::transmute(sub_carrier) };
            sub_carrier as u64
        });
        __bindgen_bitfield_unit.set(5usize, 7u8, {
            let burst_amplitude: u32 = unsafe { ::std::mem::transmute(burst_amplitude) };
            burst_amplitude as u64
        });
        __bindgen_bitfield_unit.set(12usize, 8u8, {
            let sub_carrier_phase: u32 = unsafe { ::std::mem::transmute(sub_carrier_phase) };
            sub_carrier_phase as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferMPEG2__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferMPEG2__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferMPEG2__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferMPEG2__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferMPEG2"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferMPEG2>() - 60usize];
    ["Alignment of _VAEncPictureParameterBufferMPEG2"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferMPEG2>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::forward_reference_picture"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferMPEG2,
        forward_reference_picture
    ) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::backward_reference_picture"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferMPEG2,
        backward_reference_picture
    ) - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::reconstructed_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, reconstructed_picture) - 8usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, coded_buf) - 12usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::last_picture"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, last_picture) - 16usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::picture_type"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, picture_type) - 20usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::temporal_reference"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, temporal_reference) - 24usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::vbv_delay"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, vbv_delay) - 28usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::f_code"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, f_code) - 32usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::picture_coding_extension"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferMPEG2,
        picture_coding_extension
    ) - 36usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::composite_display"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, composite_display) - 40usize];
    ["Offset of field: _VAEncPictureParameterBufferMPEG2::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferMPEG2, va_reserved) - 44usize];
};
pub type VAEncPictureParameterBufferMPEG2 = _VAEncPictureParameterBufferMPEG2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSliceParameterBufferMPEG2 {
    pub macroblock_address: u32,
    pub num_macroblocks: u32,
    pub quantiser_scale_code: i32,
    pub is_intra_slice: i32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSliceParameterBufferMPEG2"]
        [::std::mem::size_of::<_VAEncSliceParameterBufferMPEG2>() - 32usize];
    ["Alignment of _VAEncSliceParameterBufferMPEG2"]
        [::std::mem::align_of::<_VAEncSliceParameterBufferMPEG2>() - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferMPEG2::macroblock_address"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferMPEG2, macroblock_address) - 0usize];
    ["Offset of field: _VAEncSliceParameterBufferMPEG2::num_macroblocks"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferMPEG2, num_macroblocks) - 4usize];
    ["Offset of field: _VAEncSliceParameterBufferMPEG2::quantiser_scale_code"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferMPEG2, quantiser_scale_code) - 8usize];
    ["Offset of field: _VAEncSliceParameterBufferMPEG2::is_intra_slice"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferMPEG2, is_intra_slice) - 12usize];
    ["Offset of field: _VAEncSliceParameterBufferMPEG2::va_reserved"]
        [::std::mem::offset_of!(_VAEncSliceParameterBufferMPEG2, va_reserved) - 16usize];
};
pub type VAEncSliceParameterBufferMPEG2 = _VAEncSliceParameterBufferMPEG2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterExtensionDataSeqDisplayMPEG2 {
    pub extension_start_code_identifier: u8,
    pub video_format: u8,
    pub colour_description: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coefficients: u8,
    pub display_horizontal_size: u16,
    pub display_vertical_size: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterExtensionDataSeqDisplayMPEG2"]
        [::std::mem::size_of::<_VAEncMiscParameterExtensionDataSeqDisplayMPEG2>() - 10usize];
    ["Alignment of _VAEncMiscParameterExtensionDataSeqDisplayMPEG2"]
        [::std::mem::align_of::<_VAEncMiscParameterExtensionDataSeqDisplayMPEG2>() - 2usize];
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::extension_start_code_identifier"] [:: std :: mem :: offset_of ! (_VAEncMiscParameterExtensionDataSeqDisplayMPEG2 , extension_start_code_identifier) - 0usize] ;
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::video_format"][::std::mem::offset_of!(
        _VAEncMiscParameterExtensionDataSeqDisplayMPEG2,
        video_format
    ) - 1usize];
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::colour_description"][::std::mem::offset_of!(
        _VAEncMiscParameterExtensionDataSeqDisplayMPEG2,
        colour_description
    )
        - 2usize];
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::colour_primaries"][::std::mem::offset_of!(
        _VAEncMiscParameterExtensionDataSeqDisplayMPEG2,
        colour_primaries
    )
        - 3usize];
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::transfer_characteristics"] [:: std :: mem :: offset_of ! (_VAEncMiscParameterExtensionDataSeqDisplayMPEG2 , transfer_characteristics) - 4usize] ;
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::matrix_coefficients"][::std::mem::offset_of!(
        _VAEncMiscParameterExtensionDataSeqDisplayMPEG2,
        matrix_coefficients
    )
        - 5usize];
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::display_horizontal_size"][::std::mem::offset_of!(
        _VAEncMiscParameterExtensionDataSeqDisplayMPEG2,
        display_horizontal_size
    )
        - 6usize];
    ["Offset of field: _VAEncMiscParameterExtensionDataSeqDisplayMPEG2::display_vertical_size"][::std::mem::offset_of!(
        _VAEncMiscParameterExtensionDataSeqDisplayMPEG2,
        display_vertical_size
    )
        - 8usize];
};
pub type VAEncMiscParameterExtensionDataSeqDisplayMPEG2 =
    _VAEncMiscParameterExtensionDataSeqDisplayMPEG2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferVP8 {
    pub frame_width: u32,
    pub frame_height: u32,
    pub frame_width_scale: u32,
    pub frame_height_scale: u32,
    pub error_resilient: u32,
    pub kf_auto: u32,
    pub kf_min_dist: u32,
    pub kf_max_dist: u32,
    pub bits_per_second: u32,
    pub intra_period: u32,
    pub reference_frames: [VASurfaceID; 4usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferVP8"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferVP8>() - 72usize];
    ["Alignment of _VAEncSequenceParameterBufferVP8"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferVP8>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::frame_width"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, frame_width) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::frame_height"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, frame_height) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::frame_width_scale"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, frame_width_scale) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::frame_height_scale"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, frame_height_scale) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::error_resilient"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, error_resilient) - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::kf_auto"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, kf_auto) - 20usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::kf_min_dist"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, kf_min_dist) - 24usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::kf_max_dist"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, kf_max_dist) - 28usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, bits_per_second) - 32usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, intra_period) - 36usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::reference_frames"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, reference_frames) - 40usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP8, va_reserved) - 56usize];
};
pub type VAEncSequenceParameterBufferVP8 = _VAEncSequenceParameterBufferVP8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncPictureParameterBufferVP8 {
    pub reconstructed_frame: VASurfaceID,
    pub ref_last_frame: VASurfaceID,
    pub ref_gf_frame: VASurfaceID,
    pub ref_arf_frame: VASurfaceID,
    pub coded_buf: VABufferID,
    pub ref_flags: _VAEncPictureParameterBufferVP8__bindgen_ty_1,
    pub pic_flags: _VAEncPictureParameterBufferVP8__bindgen_ty_2,
    pub loop_filter_level: [i8; 4usize],
    pub ref_lf_delta: [i8; 4usize],
    pub mode_lf_delta: [i8; 4usize],
    pub sharpness_level: u8,
    pub clamp_qindex_high: u8,
    pub clamp_qindex_low: u8,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferVP8__bindgen_ty_1 {
    pub bits: _VAEncPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferVP8__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn force_kf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_kf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_ref_last(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_ref_last(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_ref_gf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_ref_gf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_ref_arf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_ref_arf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn temporal_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_temporal_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn first_ref(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_first_ref(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn second_ref(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_second_ref(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_kf: u32,
        no_ref_last: u32,
        no_ref_gf: u32,
        no_ref_arf: u32,
        temporal_id: u32,
        first_ref: u32,
        second_ref: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_kf: u32 = unsafe { ::std::mem::transmute(force_kf) };
            force_kf as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let no_ref_last: u32 = unsafe { ::std::mem::transmute(no_ref_last) };
            no_ref_last as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_ref_gf: u32 = unsafe { ::std::mem::transmute(no_ref_gf) };
            no_ref_gf as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let no_ref_arf: u32 = unsafe { ::std::mem::transmute(no_ref_arf) };
            no_ref_arf as u64
        });
        __bindgen_bitfield_unit.set(4usize, 8u8, {
            let temporal_id: u32 = unsafe { ::std::mem::transmute(temporal_id) };
            temporal_id as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let first_ref: u32 = unsafe { ::std::mem::transmute(first_ref) };
            first_ref as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let second_ref: u32 = unsafe { ::std::mem::transmute(second_ref) };
            second_ref as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP8__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferVP8__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP8__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP8__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferVP8__bindgen_ty_2 {
    pub bits: _VAEncPictureParameterBufferVP8__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferVP8__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP8__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferVP8__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP8__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP8__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferVP8__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn frame_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn show_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn color_space(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_space(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn recon_filter_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_recon_filter_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_filter_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn auto_partitions(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_auto_partitions(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn num_token_partitions(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_num_token_partitions(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn clamping_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clamping_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update_mb_segmentation_map(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_mb_segmentation_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn update_segment_feature_data(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_segment_feature_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_filter_adj_enable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_adj_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn refresh_entropy_probs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_refresh_entropy_probs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn refresh_golden_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_refresh_golden_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn refresh_alternate_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_refresh_alternate_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn refresh_last(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_refresh_last(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn copy_buffer_to_golden(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_copy_buffer_to_golden(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn copy_buffer_to_alternate(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_copy_buffer_to_alternate(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_bias_golden(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_bias_golden(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_bias_alternate(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_bias_alternate(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_no_coeff_skip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_no_coeff_skip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forced_lf_adjustment(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_forced_lf_adjustment(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frame_type: u32,
        version: u32,
        show_frame: u32,
        color_space: u32,
        recon_filter_type: u32,
        loop_filter_type: u32,
        auto_partitions: u32,
        num_token_partitions: u32,
        clamping_type: u32,
        segmentation_enabled: u32,
        update_mb_segmentation_map: u32,
        update_segment_feature_data: u32,
        loop_filter_adj_enable: u32,
        refresh_entropy_probs: u32,
        refresh_golden_frame: u32,
        refresh_alternate_frame: u32,
        refresh_last: u32,
        copy_buffer_to_golden: u32,
        copy_buffer_to_alternate: u32,
        sign_bias_golden: u32,
        sign_bias_alternate: u32,
        mb_no_coeff_skip: u32,
        forced_lf_adjustment: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let frame_type: u32 = unsafe { ::std::mem::transmute(frame_type) };
            frame_type as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let show_frame: u32 = unsafe { ::std::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let color_space: u32 = unsafe { ::std::mem::transmute(color_space) };
            color_space as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let recon_filter_type: u32 = unsafe { ::std::mem::transmute(recon_filter_type) };
            recon_filter_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let loop_filter_type: u32 = unsafe { ::std::mem::transmute(loop_filter_type) };
            loop_filter_type as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let auto_partitions: u32 = unsafe { ::std::mem::transmute(auto_partitions) };
            auto_partitions as u64
        });
        __bindgen_bitfield_unit.set(11usize, 2u8, {
            let num_token_partitions: u32 = unsafe { ::std::mem::transmute(num_token_partitions) };
            num_token_partitions as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let clamping_type: u32 = unsafe { ::std::mem::transmute(clamping_type) };
            clamping_type as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let update_mb_segmentation_map: u32 =
                unsafe { ::std::mem::transmute(update_mb_segmentation_map) };
            update_mb_segmentation_map as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let update_segment_feature_data: u32 =
                unsafe { ::std::mem::transmute(update_segment_feature_data) };
            update_segment_feature_data as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let loop_filter_adj_enable: u32 =
                unsafe { ::std::mem::transmute(loop_filter_adj_enable) };
            loop_filter_adj_enable as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let refresh_entropy_probs: u32 =
                unsafe { ::std::mem::transmute(refresh_entropy_probs) };
            refresh_entropy_probs as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let refresh_golden_frame: u32 = unsafe { ::std::mem::transmute(refresh_golden_frame) };
            refresh_golden_frame as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let refresh_alternate_frame: u32 =
                unsafe { ::std::mem::transmute(refresh_alternate_frame) };
            refresh_alternate_frame as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let refresh_last: u32 = unsafe { ::std::mem::transmute(refresh_last) };
            refresh_last as u64
        });
        __bindgen_bitfield_unit.set(22usize, 2u8, {
            let copy_buffer_to_golden: u32 =
                unsafe { ::std::mem::transmute(copy_buffer_to_golden) };
            copy_buffer_to_golden as u64
        });
        __bindgen_bitfield_unit.set(24usize, 2u8, {
            let copy_buffer_to_alternate: u32 =
                unsafe { ::std::mem::transmute(copy_buffer_to_alternate) };
            copy_buffer_to_alternate as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let sign_bias_golden: u32 = unsafe { ::std::mem::transmute(sign_bias_golden) };
            sign_bias_golden as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let sign_bias_alternate: u32 = unsafe { ::std::mem::transmute(sign_bias_alternate) };
            sign_bias_alternate as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let mb_no_coeff_skip: u32 = unsafe { ::std::mem::transmute(mb_no_coeff_skip) };
            mb_no_coeff_skip as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let forced_lf_adjustment: u32 = unsafe { ::std::mem::transmute(forced_lf_adjustment) };
            forced_lf_adjustment as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP8__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferVP8__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP8__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP8__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP8"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferVP8>() - 60usize];
    ["Alignment of _VAEncPictureParameterBufferVP8"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP8>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::reconstructed_frame"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, reconstructed_frame) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::ref_last_frame"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, ref_last_frame) - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::ref_gf_frame"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, ref_gf_frame) - 8usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::ref_arf_frame"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, ref_arf_frame) - 12usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, coded_buf) - 16usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::ref_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, ref_flags) - 20usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::pic_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, pic_flags) - 24usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::loop_filter_level"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, loop_filter_level) - 28usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::ref_lf_delta"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, ref_lf_delta) - 32usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::mode_lf_delta"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, mode_lf_delta) - 36usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::sharpness_level"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, sharpness_level) - 40usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::clamp_qindex_high"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, clamp_qindex_high) - 41usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::clamp_qindex_low"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, clamp_qindex_low) - 42usize];
    ["Offset of field: _VAEncPictureParameterBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP8, va_reserved) - 44usize];
};
pub type VAEncPictureParameterBufferVP8 = _VAEncPictureParameterBufferVP8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMBMapBufferVP8 {
    pub num_mbs: u32,
    pub mb_segment_id: *mut u8,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMBMapBufferVP8"][::std::mem::size_of::<_VAEncMBMapBufferVP8>() - 32usize];
    ["Alignment of _VAEncMBMapBufferVP8"][::std::mem::align_of::<_VAEncMBMapBufferVP8>() - 8usize];
    ["Offset of field: _VAEncMBMapBufferVP8::num_mbs"]
        [::std::mem::offset_of!(_VAEncMBMapBufferVP8, num_mbs) - 0usize];
    ["Offset of field: _VAEncMBMapBufferVP8::mb_segment_id"]
        [::std::mem::offset_of!(_VAEncMBMapBufferVP8, mb_segment_id) - 8usize];
    ["Offset of field: _VAEncMBMapBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VAEncMBMapBufferVP8, va_reserved) - 16usize];
};
pub type VAEncMBMapBufferVP8 = _VAEncMBMapBufferVP8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAQMatrixBufferVP8 {
    pub quantization_index: [u16; 4usize],
    pub quantization_index_delta: [i16; 5usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAQMatrixBufferVP8"][::std::mem::size_of::<_VAQMatrixBufferVP8>() - 36usize];
    ["Alignment of _VAQMatrixBufferVP8"][::std::mem::align_of::<_VAQMatrixBufferVP8>() - 4usize];
    ["Offset of field: _VAQMatrixBufferVP8::quantization_index"]
        [::std::mem::offset_of!(_VAQMatrixBufferVP8, quantization_index) - 0usize];
    ["Offset of field: _VAQMatrixBufferVP8::quantization_index_delta"]
        [::std::mem::offset_of!(_VAQMatrixBufferVP8, quantization_index_delta) - 8usize];
    ["Offset of field: _VAQMatrixBufferVP8::va_reserved"]
        [::std::mem::offset_of!(_VAQMatrixBufferVP8, va_reserved) - 20usize];
};
pub type VAQMatrixBufferVP8 = _VAQMatrixBufferVP8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VACodedBufferVP9Status {
    pub base_qp_index: u16,
    pub loop_filter_level: u8,
    pub long_term_indication: u8,
    pub next_frame_width: u16,
    pub next_frame_height: u16,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VACodedBufferVP9Status"][::std::mem::size_of::<_VACodedBufferVP9Status>() - 24usize];
    ["Alignment of _VACodedBufferVP9Status"]
        [::std::mem::align_of::<_VACodedBufferVP9Status>() - 4usize];
    ["Offset of field: _VACodedBufferVP9Status::base_qp_index"]
        [::std::mem::offset_of!(_VACodedBufferVP9Status, base_qp_index) - 0usize];
    ["Offset of field: _VACodedBufferVP9Status::loop_filter_level"]
        [::std::mem::offset_of!(_VACodedBufferVP9Status, loop_filter_level) - 2usize];
    ["Offset of field: _VACodedBufferVP9Status::long_term_indication"]
        [::std::mem::offset_of!(_VACodedBufferVP9Status, long_term_indication) - 3usize];
    ["Offset of field: _VACodedBufferVP9Status::next_frame_width"]
        [::std::mem::offset_of!(_VACodedBufferVP9Status, next_frame_width) - 4usize];
    ["Offset of field: _VACodedBufferVP9Status::next_frame_height"]
        [::std::mem::offset_of!(_VACodedBufferVP9Status, next_frame_height) - 6usize];
    ["Offset of field: _VACodedBufferVP9Status::va_reserved"]
        [::std::mem::offset_of!(_VACodedBufferVP9Status, va_reserved) - 8usize];
};
pub type VACodedBufferVP9Status = _VACodedBufferVP9Status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferVP9 {
    pub max_frame_width: u32,
    pub max_frame_height: u32,
    pub kf_auto: u32,
    pub kf_min_dist: u32,
    pub kf_max_dist: u32,
    pub bits_per_second: u32,
    pub intra_period: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferVP9"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferVP9>() - 44usize];
    ["Alignment of _VAEncSequenceParameterBufferVP9"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferVP9>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::max_frame_width"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, max_frame_width) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::max_frame_height"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, max_frame_height) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::kf_auto"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, kf_auto) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::kf_min_dist"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, kf_min_dist) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::kf_max_dist"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, kf_max_dist) - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, bits_per_second) - 20usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, intra_period) - 24usize];
    ["Offset of field: _VAEncSequenceParameterBufferVP9::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferVP9, va_reserved) - 28usize];
};
pub type VAEncSequenceParameterBufferVP9 = _VAEncSequenceParameterBufferVP9;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncPictureParameterBufferVP9 {
    pub frame_width_src: u32,
    pub frame_height_src: u32,
    pub frame_width_dst: u32,
    pub frame_height_dst: u32,
    pub reconstructed_frame: VASurfaceID,
    pub reference_frames: [VASurfaceID; 8usize],
    pub coded_buf: VABufferID,
    pub ref_flags: _VAEncPictureParameterBufferVP9__bindgen_ty_1,
    pub pic_flags: _VAEncPictureParameterBufferVP9__bindgen_ty_2,
    pub refresh_frame_flags: u8,
    pub luma_ac_qindex: u8,
    pub luma_dc_qindex_delta: i8,
    pub chroma_ac_qindex_delta: i8,
    pub chroma_dc_qindex_delta: i8,
    pub filter_level: u8,
    pub sharpness_level: u8,
    pub ref_lf_delta: [i8; 4usize],
    pub mode_lf_delta: [i8; 2usize],
    pub bit_offset_ref_lf_delta: u16,
    pub bit_offset_mode_lf_delta: u16,
    pub bit_offset_lf_level: u16,
    pub bit_offset_qindex: u16,
    pub bit_offset_first_partition_size: u16,
    pub bit_offset_segmentation: u16,
    pub bit_size_segmentation: u16,
    pub log2_tile_rows: u8,
    pub log2_tile_columns: u8,
    pub skip_frame_flag: u8,
    pub number_skip_frames: u8,
    pub skip_frames_size: u32,
    pub va_reserved: [u32; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferVP9__bindgen_ty_1 {
    pub bits: _VAEncPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferVP9__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn force_kf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_kf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_frame_ctrl_l0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ref_frame_ctrl_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_frame_ctrl_l1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ref_frame_ctrl_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_last_idx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ref_last_idx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_last_sign_bias(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_last_sign_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_gf_idx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ref_gf_idx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_gf_sign_bias(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_gf_sign_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_arf_idx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ref_arf_idx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_arf_sign_bias(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_arf_sign_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn temporal_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_temporal_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_kf: u32,
        ref_frame_ctrl_l0: u32,
        ref_frame_ctrl_l1: u32,
        ref_last_idx: u32,
        ref_last_sign_bias: u32,
        ref_gf_idx: u32,
        ref_gf_sign_bias: u32,
        ref_arf_idx: u32,
        ref_arf_sign_bias: u32,
        temporal_id: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_kf: u32 = unsafe { ::std::mem::transmute(force_kf) };
            force_kf as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let ref_frame_ctrl_l0: u32 = unsafe { ::std::mem::transmute(ref_frame_ctrl_l0) };
            ref_frame_ctrl_l0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let ref_frame_ctrl_l1: u32 = unsafe { ::std::mem::transmute(ref_frame_ctrl_l1) };
            ref_frame_ctrl_l1 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 3u8, {
            let ref_last_idx: u32 = unsafe { ::std::mem::transmute(ref_last_idx) };
            ref_last_idx as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ref_last_sign_bias: u32 = unsafe { ::std::mem::transmute(ref_last_sign_bias) };
            ref_last_sign_bias as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let ref_gf_idx: u32 = unsafe { ::std::mem::transmute(ref_gf_idx) };
            ref_gf_idx as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let ref_gf_sign_bias: u32 = unsafe { ::std::mem::transmute(ref_gf_sign_bias) };
            ref_gf_sign_bias as u64
        });
        __bindgen_bitfield_unit.set(15usize, 3u8, {
            let ref_arf_idx: u32 = unsafe { ::std::mem::transmute(ref_arf_idx) };
            ref_arf_idx as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let ref_arf_sign_bias: u32 = unsafe { ::std::mem::transmute(ref_arf_sign_bias) };
            ref_arf_sign_bias as u64
        });
        __bindgen_bitfield_unit.set(19usize, 8u8, {
            let temporal_id: u32 = unsafe { ::std::mem::transmute(temporal_id) };
            temporal_id as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP9__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferVP9__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP9__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP9__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferVP9__bindgen_ty_2 {
    pub bits: _VAEncPictureParameterBufferVP9__bindgen_ty_2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferVP9__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP9__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferVP9__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP9__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP9__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferVP9__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn frame_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn show_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_only(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_only(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mcomp_filter_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mcomp_filter_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_parallel_decoding_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_parallel_decoding_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reset_frame_context(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reset_frame_context(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn refresh_frame_context(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_refresh_frame_context(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_context_idx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_context_idx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lossless_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lossless_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn comp_prediction_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_comp_prediction_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn auto_segmentation(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_auto_segmentation(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn super_frame_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_super_frame_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frame_type: u32,
        show_frame: u32,
        error_resilient_mode: u32,
        intra_only: u32,
        allow_high_precision_mv: u32,
        mcomp_filter_type: u32,
        frame_parallel_decoding_mode: u32,
        reset_frame_context: u32,
        refresh_frame_context: u32,
        frame_context_idx: u32,
        segmentation_enabled: u32,
        segmentation_temporal_update: u32,
        segmentation_update_map: u32,
        lossless_mode: u32,
        comp_prediction_mode: u32,
        auto_segmentation: u32,
        super_frame_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let frame_type: u32 = unsafe { ::std::mem::transmute(frame_type) };
            frame_type as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let show_frame: u32 = unsafe { ::std::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::std::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let intra_only: u32 = unsafe { ::std::mem::transmute(intra_only) };
            intra_only as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::std::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let mcomp_filter_type: u32 = unsafe { ::std::mem::transmute(mcomp_filter_type) };
            mcomp_filter_type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let frame_parallel_decoding_mode: u32 =
                unsafe { ::std::mem::transmute(frame_parallel_decoding_mode) };
            frame_parallel_decoding_mode as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let reset_frame_context: u32 = unsafe { ::std::mem::transmute(reset_frame_context) };
            reset_frame_context as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let refresh_frame_context: u32 =
                unsafe { ::std::mem::transmute(refresh_frame_context) };
            refresh_frame_context as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let frame_context_idx: u32 = unsafe { ::std::mem::transmute(frame_context_idx) };
            frame_context_idx as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let segmentation_temporal_update: u32 =
                unsafe { ::std::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let segmentation_update_map: u32 =
                unsafe { ::std::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let lossless_mode: u32 = unsafe { ::std::mem::transmute(lossless_mode) };
            lossless_mode as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let comp_prediction_mode: u32 = unsafe { ::std::mem::transmute(comp_prediction_mode) };
            comp_prediction_mode as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let auto_segmentation: u32 = unsafe { ::std::mem::transmute(auto_segmentation) };
            auto_segmentation as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let super_frame_flag: u32 = unsafe { ::std::mem::transmute(super_frame_flag) };
            super_frame_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP9__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferVP9__bindgen_ty_2>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferVP9__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP9__bindgen_ty_2>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9__bindgen_ty_2, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferVP9"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferVP9>() - 132usize];
    ["Alignment of _VAEncPictureParameterBufferVP9"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferVP9>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::frame_width_src"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, frame_width_src) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::frame_height_src"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, frame_height_src) - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::frame_width_dst"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, frame_width_dst) - 8usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::frame_height_dst"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, frame_height_dst) - 12usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::reconstructed_frame"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, reconstructed_frame) - 16usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::reference_frames"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, reference_frames) - 20usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, coded_buf) - 52usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::ref_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, ref_flags) - 56usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::pic_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, pic_flags) - 60usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::refresh_frame_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, refresh_frame_flags) - 64usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::luma_ac_qindex"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, luma_ac_qindex) - 65usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::luma_dc_qindex_delta"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, luma_dc_qindex_delta) - 66usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::chroma_ac_qindex_delta"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, chroma_ac_qindex_delta) - 67usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::chroma_dc_qindex_delta"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, chroma_dc_qindex_delta) - 68usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::filter_level"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, filter_level) - 69usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::sharpness_level"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, sharpness_level) - 70usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::ref_lf_delta"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, ref_lf_delta) - 71usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::mode_lf_delta"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, mode_lf_delta) - 75usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::bit_offset_ref_lf_delta"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferVP9,
        bit_offset_ref_lf_delta
    ) - 78usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::bit_offset_mode_lf_delta"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferVP9,
        bit_offset_mode_lf_delta
    ) - 80usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::bit_offset_lf_level"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, bit_offset_lf_level) - 82usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::bit_offset_qindex"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, bit_offset_qindex) - 84usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::bit_offset_first_partition_size"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferVP9,
        bit_offset_first_partition_size
    )
        - 86usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::bit_offset_segmentation"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferVP9,
        bit_offset_segmentation
    ) - 88usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::bit_size_segmentation"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, bit_size_segmentation) - 90usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::log2_tile_rows"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, log2_tile_rows) - 92usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::log2_tile_columns"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, log2_tile_columns) - 93usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::skip_frame_flag"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, skip_frame_flag) - 94usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::number_skip_frames"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, number_skip_frames) - 95usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::skip_frames_size"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, skip_frames_size) - 96usize];
    ["Offset of field: _VAEncPictureParameterBufferVP9::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferVP9, va_reserved) - 100usize];
};
pub type VAEncPictureParameterBufferVP9 = _VAEncPictureParameterBufferVP9;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSegParamVP9 {
    pub seg_flags: _VAEncSegParamVP9__bindgen_ty_1,
    pub segment_lf_level_delta: i8,
    pub segment_qindex_delta: i16,
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSegParamVP9__bindgen_ty_1 {
    pub bits: _VAEncSegParamVP9__bindgen_ty_1__bindgen_ty_1,
    pub value: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSegParamVP9__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSegParamVP9__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSegParamVP9__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Alignment of _VAEncSegParamVP9__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSegParamVP9__bindgen_ty_1__bindgen_ty_1>() - 1usize];
};
impl _VAEncSegParamVP9__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn segment_reference_enabled(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segment_reference_enabled(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segment_reference(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_segment_reference(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn segment_reference_skipped(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segment_reference_skipped(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        segment_reference_enabled: u8,
        segment_reference: u8,
        segment_reference_skipped: u8,
        reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let segment_reference_enabled: u8 =
                unsafe { ::std::mem::transmute(segment_reference_enabled) };
            segment_reference_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let segment_reference: u8 = unsafe { ::std::mem::transmute(segment_reference) };
            segment_reference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let segment_reference_skipped: u8 =
                unsafe { ::std::mem::transmute(segment_reference_skipped) };
            segment_reference_skipped as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSegParamVP9__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSegParamVP9__bindgen_ty_1>() - 1usize];
    ["Alignment of _VAEncSegParamVP9__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSegParamVP9__bindgen_ty_1>() - 1usize];
    ["Offset of field: _VAEncSegParamVP9__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSegParamVP9__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSegParamVP9__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSegParamVP9__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSegParamVP9"][::std::mem::size_of::<_VAEncSegParamVP9>() - 20usize];
    ["Alignment of _VAEncSegParamVP9"][::std::mem::align_of::<_VAEncSegParamVP9>() - 4usize];
    ["Offset of field: _VAEncSegParamVP9::seg_flags"]
        [::std::mem::offset_of!(_VAEncSegParamVP9, seg_flags) - 0usize];
    ["Offset of field: _VAEncSegParamVP9::segment_lf_level_delta"]
        [::std::mem::offset_of!(_VAEncSegParamVP9, segment_lf_level_delta) - 1usize];
    ["Offset of field: _VAEncSegParamVP9::segment_qindex_delta"]
        [::std::mem::offset_of!(_VAEncSegParamVP9, segment_qindex_delta) - 2usize];
    ["Offset of field: _VAEncSegParamVP9::va_reserved"]
        [::std::mem::offset_of!(_VAEncSegParamVP9, va_reserved) - 4usize];
};
pub type VAEncSegParamVP9 = _VAEncSegParamVP9;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncMiscParameterTypeVP9PerSegmantParam {
    pub seg_data: [VAEncSegParamVP9; 8usize],
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterTypeVP9PerSegmantParam"]
        [::std::mem::size_of::<_VAEncMiscParameterTypeVP9PerSegmantParam>() - 176usize];
    ["Alignment of _VAEncMiscParameterTypeVP9PerSegmantParam"]
        [::std::mem::align_of::<_VAEncMiscParameterTypeVP9PerSegmantParam>() - 4usize];
    ["Offset of field: _VAEncMiscParameterTypeVP9PerSegmantParam::seg_data"]
        [::std::mem::offset_of!(_VAEncMiscParameterTypeVP9PerSegmantParam, seg_data) - 0usize];
    ["Offset of field: _VAEncMiscParameterTypeVP9PerSegmantParam::va_reserved"]
        [::std::mem::offset_of!(_VAEncMiscParameterTypeVP9PerSegmantParam, va_reserved) - 160usize];
};
pub type VAEncMiscParameterTypeVP9PerSegmantParam = _VAEncMiscParameterTypeVP9PerSegmantParam;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValEncAV1 {
    pub bits: _VAConfigAttribValEncAV1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValEncAV1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncAV1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValEncAV1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncAV1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValEncAV1__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValEncAV1__bindgen_ty_1 {
    #[inline]
    pub fn support_128x128_superblock(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_128x128_superblock(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_filter_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_filter_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_intra_edge_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_intra_edge_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_interintra_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_interintra_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_masked_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_masked_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_warped_motion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_palette_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_palette_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_dual_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_dual_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_jnt_comp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_jnt_comp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_ref_frame_mvs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_superres(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_restoration(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_restoration(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_allow_intrabc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_allow_intrabc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn support_cdef_channel_strength(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_support_cdef_channel_strength(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        support_128x128_superblock: u32,
        support_filter_intra: u32,
        support_intra_edge_filter: u32,
        support_interintra_compound: u32,
        support_masked_compound: u32,
        support_warped_motion: u32,
        support_palette_mode: u32,
        support_dual_filter: u32,
        support_jnt_comp: u32,
        support_ref_frame_mvs: u32,
        support_superres: u32,
        support_restoration: u32,
        support_allow_intrabc: u32,
        support_cdef_channel_strength: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let support_128x128_superblock: u32 =
                unsafe { ::std::mem::transmute(support_128x128_superblock) };
            support_128x128_superblock as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let support_filter_intra: u32 = unsafe { ::std::mem::transmute(support_filter_intra) };
            support_filter_intra as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let support_intra_edge_filter: u32 =
                unsafe { ::std::mem::transmute(support_intra_edge_filter) };
            support_intra_edge_filter as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let support_interintra_compound: u32 =
                unsafe { ::std::mem::transmute(support_interintra_compound) };
            support_interintra_compound as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let support_masked_compound: u32 =
                unsafe { ::std::mem::transmute(support_masked_compound) };
            support_masked_compound as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let support_warped_motion: u32 =
                unsafe { ::std::mem::transmute(support_warped_motion) };
            support_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let support_palette_mode: u32 = unsafe { ::std::mem::transmute(support_palette_mode) };
            support_palette_mode as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let support_dual_filter: u32 = unsafe { ::std::mem::transmute(support_dual_filter) };
            support_dual_filter as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let support_jnt_comp: u32 = unsafe { ::std::mem::transmute(support_jnt_comp) };
            support_jnt_comp as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let support_ref_frame_mvs: u32 =
                unsafe { ::std::mem::transmute(support_ref_frame_mvs) };
            support_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let support_superres: u32 = unsafe { ::std::mem::transmute(support_superres) };
            support_superres as u64
        });
        __bindgen_bitfield_unit.set(22usize, 2u8, {
            let support_restoration: u32 = unsafe { ::std::mem::transmute(support_restoration) };
            support_restoration as u64
        });
        __bindgen_bitfield_unit.set(24usize, 2u8, {
            let support_allow_intrabc: u32 =
                unsafe { ::std::mem::transmute(support_allow_intrabc) };
            support_allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(26usize, 2u8, {
            let support_cdef_channel_strength: u32 =
                unsafe { ::std::mem::transmute(support_cdef_channel_strength) };
            support_cdef_channel_strength as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncAV1"]
        [::std::mem::size_of::<_VAConfigAttribValEncAV1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncAV1"]
        [::std::mem::align_of::<_VAConfigAttribValEncAV1>() - 4usize];
    ["Offset of field: _VAConfigAttribValEncAV1::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValEncAV1, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValEncAV1::value"]
        [::std::mem::offset_of!(_VAConfigAttribValEncAV1, value) - 0usize];
};
pub type VAConfigAttribValEncAV1 = _VAConfigAttribValEncAV1;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValEncAV1Ext1 {
    pub bits: _VAConfigAttribValEncAV1Ext1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValEncAV1Ext1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncAV1Ext1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValEncAV1Ext1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncAV1Ext1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValEncAV1Ext1__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValEncAV1Ext1__bindgen_ty_1 {
    #[inline]
    pub fn interpolation_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_interpolation_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn min_segid_block_size_accepted(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_min_segid_block_size_accepted(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn segment_feature_support(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_segment_feature_support(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        interpolation_filter: u32,
        min_segid_block_size_accepted: u32,
        segment_feature_support: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let interpolation_filter: u32 = unsafe { ::std::mem::transmute(interpolation_filter) };
            interpolation_filter as u64
        });
        __bindgen_bitfield_unit.set(5usize, 8u8, {
            let min_segid_block_size_accepted: u32 =
                unsafe { ::std::mem::transmute(min_segid_block_size_accepted) };
            min_segid_block_size_accepted as u64
        });
        __bindgen_bitfield_unit.set(13usize, 8u8, {
            let segment_feature_support: u32 =
                unsafe { ::std::mem::transmute(segment_feature_support) };
            segment_feature_support as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncAV1Ext1"]
        [::std::mem::size_of::<_VAConfigAttribValEncAV1Ext1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncAV1Ext1"]
        [::std::mem::align_of::<_VAConfigAttribValEncAV1Ext1>() - 4usize];
    ["Offset of field: _VAConfigAttribValEncAV1Ext1::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValEncAV1Ext1, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValEncAV1Ext1::value"]
        [::std::mem::offset_of!(_VAConfigAttribValEncAV1Ext1, value) - 0usize];
};
pub type VAConfigAttribValEncAV1Ext1 = _VAConfigAttribValEncAV1Ext1;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAConfigAttribValEncAV1Ext2 {
    pub bits: _VAConfigAttribValEncAV1Ext2__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAConfigAttribValEncAV1Ext2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncAV1Ext2__bindgen_ty_1"]
        [::std::mem::size_of::<_VAConfigAttribValEncAV1Ext2__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAConfigAttribValEncAV1Ext2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAConfigAttribValEncAV1Ext2__bindgen_ty_1>() - 4usize];
};
impl _VAConfigAttribValEncAV1Ext2__bindgen_ty_1 {
    #[inline]
    pub fn tile_size_bytes_minus1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tile_size_bytes_minus1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn obu_size_bytes_minus1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_obu_size_bytes_minus1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_mode_support(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_tx_mode_support(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn max_tile_num_minus1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set_max_tile_num_minus1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tile_size_bytes_minus1: u32,
        obu_size_bytes_minus1: u32,
        tx_mode_support: u32,
        max_tile_num_minus1: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let tile_size_bytes_minus1: u32 =
                unsafe { ::std::mem::transmute(tile_size_bytes_minus1) };
            tile_size_bytes_minus1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let obu_size_bytes_minus1: u32 =
                unsafe { ::std::mem::transmute(obu_size_bytes_minus1) };
            obu_size_bytes_minus1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let tx_mode_support: u32 = unsafe { ::std::mem::transmute(tx_mode_support) };
            tx_mode_support as u64
        });
        __bindgen_bitfield_unit.set(7usize, 13u8, {
            let max_tile_num_minus1: u32 = unsafe { ::std::mem::transmute(max_tile_num_minus1) };
            max_tile_num_minus1 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAConfigAttribValEncAV1Ext2"]
        [::std::mem::size_of::<_VAConfigAttribValEncAV1Ext2>() - 4usize];
    ["Alignment of _VAConfigAttribValEncAV1Ext2"]
        [::std::mem::align_of::<_VAConfigAttribValEncAV1Ext2>() - 4usize];
    ["Offset of field: _VAConfigAttribValEncAV1Ext2::bits"]
        [::std::mem::offset_of!(_VAConfigAttribValEncAV1Ext2, bits) - 0usize];
    ["Offset of field: _VAConfigAttribValEncAV1Ext2::value"]
        [::std::mem::offset_of!(_VAConfigAttribValEncAV1Ext2, value) - 0usize];
};
pub type VAConfigAttribValEncAV1Ext2 = _VAConfigAttribValEncAV1Ext2;
pub const VAEncPackedHeaderAV1_SPS: VAEncPackedHeaderTypeAV1 = 1;
pub const VAEncPackedHeaderAV1_PPS: VAEncPackedHeaderTypeAV1 = 2;
pub type VAEncPackedHeaderTypeAV1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSequenceParameterBufferAV1 {
    pub seq_profile: u8,
    pub seq_level_idx: u8,
    pub seq_tier: u8,
    pub hierarchical_flag: u8,
    pub intra_period: u32,
    pub ip_period: u32,
    pub bits_per_second: u32,
    pub seq_fields: _VAEncSequenceParameterBufferAV1__bindgen_ty_1,
    pub order_hint_bits_minus_1: u8,
    pub va_reserved: [u32; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSequenceParameterBufferAV1__bindgen_ty_1 {
    pub bits: _VAEncSequenceParameterBufferAV1__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSequenceParameterBufferAV1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferAV1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncSequenceParameterBufferAV1__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferAV1__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncSequenceParameterBufferAV1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn still_picture(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_still_picture(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_128x128_superblock(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_128x128_superblock(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_filter_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_filter_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_intra_edge_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_intra_edge_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_interintra_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_interintra_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_masked_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_masked_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_warped_motion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_dual_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_dual_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_order_hint(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_order_hint(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_jnt_comp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_jnt_comp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_ref_frame_mvs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_superres(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_cdef(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_cdef(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_restoration(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_restoration(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit_depth_minus8(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_bit_depth_minus8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn subsampling_x(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_x(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn subsampling_y(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_y(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mono_chrome(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mono_chrome(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved_bits(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved_bits(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        still_picture: u32,
        use_128x128_superblock: u32,
        enable_filter_intra: u32,
        enable_intra_edge_filter: u32,
        enable_interintra_compound: u32,
        enable_masked_compound: u32,
        enable_warped_motion: u32,
        enable_dual_filter: u32,
        enable_order_hint: u32,
        enable_jnt_comp: u32,
        enable_ref_frame_mvs: u32,
        enable_superres: u32,
        enable_cdef: u32,
        enable_restoration: u32,
        bit_depth_minus8: u32,
        subsampling_x: u32,
        subsampling_y: u32,
        mono_chrome: u32,
        reserved_bits: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let still_picture: u32 = unsafe { ::std::mem::transmute(still_picture) };
            still_picture as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let use_128x128_superblock: u32 =
                unsafe { ::std::mem::transmute(use_128x128_superblock) };
            use_128x128_superblock as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let enable_filter_intra: u32 = unsafe { ::std::mem::transmute(enable_filter_intra) };
            enable_filter_intra as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enable_intra_edge_filter: u32 =
                unsafe { ::std::mem::transmute(enable_intra_edge_filter) };
            enable_intra_edge_filter as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let enable_interintra_compound: u32 =
                unsafe { ::std::mem::transmute(enable_interintra_compound) };
            enable_interintra_compound as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let enable_masked_compound: u32 =
                unsafe { ::std::mem::transmute(enable_masked_compound) };
            enable_masked_compound as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let enable_warped_motion: u32 = unsafe { ::std::mem::transmute(enable_warped_motion) };
            enable_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let enable_dual_filter: u32 = unsafe { ::std::mem::transmute(enable_dual_filter) };
            enable_dual_filter as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let enable_order_hint: u32 = unsafe { ::std::mem::transmute(enable_order_hint) };
            enable_order_hint as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let enable_jnt_comp: u32 = unsafe { ::std::mem::transmute(enable_jnt_comp) };
            enable_jnt_comp as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let enable_ref_frame_mvs: u32 = unsafe { ::std::mem::transmute(enable_ref_frame_mvs) };
            enable_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let enable_superres: u32 = unsafe { ::std::mem::transmute(enable_superres) };
            enable_superres as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let enable_cdef: u32 = unsafe { ::std::mem::transmute(enable_cdef) };
            enable_cdef as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let enable_restoration: u32 = unsafe { ::std::mem::transmute(enable_restoration) };
            enable_restoration as u64
        });
        __bindgen_bitfield_unit.set(14usize, 3u8, {
            let bit_depth_minus8: u32 = unsafe { ::std::mem::transmute(bit_depth_minus8) };
            bit_depth_minus8 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let subsampling_x: u32 = unsafe { ::std::mem::transmute(subsampling_x) };
            subsampling_x as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let subsampling_y: u32 = unsafe { ::std::mem::transmute(subsampling_y) };
            subsampling_y as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let mono_chrome: u32 = unsafe { ::std::mem::transmute(mono_chrome) };
            mono_chrome as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let reserved_bits: u32 = unsafe { ::std::mem::transmute(reserved_bits) };
            reserved_bits as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferAV1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferAV1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncSequenceParameterBufferAV1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferAV1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSequenceParameterBufferAV1"]
        [::std::mem::size_of::<_VAEncSequenceParameterBufferAV1>() - 88usize];
    ["Alignment of _VAEncSequenceParameterBufferAV1"]
        [::std::mem::align_of::<_VAEncSequenceParameterBufferAV1>() - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::seq_profile"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, seq_profile) - 0usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::seq_level_idx"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, seq_level_idx) - 1usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::seq_tier"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, seq_tier) - 2usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::hierarchical_flag"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, hierarchical_flag) - 3usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::intra_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, intra_period) - 4usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::ip_period"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, ip_period) - 8usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::bits_per_second"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, bits_per_second) - 12usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::seq_fields"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, seq_fields) - 16usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::order_hint_bits_minus_1"][::std::mem::offset_of!(
        _VAEncSequenceParameterBufferAV1,
        order_hint_bits_minus_1
    ) - 20usize];
    ["Offset of field: _VAEncSequenceParameterBufferAV1::va_reserved"]
        [::std::mem::offset_of!(_VAEncSequenceParameterBufferAV1, va_reserved) - 24usize];
};
pub type VAEncSequenceParameterBufferAV1 = _VAEncSequenceParameterBufferAV1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncSegParamAV1 {
    pub seg_flags: _VAEncSegParamAV1__bindgen_ty_1,
    pub segment_number: u8,
    pub feature_data: [[i16; 8usize]; 8usize],
    pub feature_mask: [u8; 8usize],
    pub va_reserved: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncSegParamAV1__bindgen_ty_1 {
    pub bits: _VAEncSegParamAV1__bindgen_ty_1__bindgen_ty_1,
    pub value: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSegParamAV1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSegParamAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSegParamAV1__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Alignment of _VAEncSegParamAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSegParamAV1__bindgen_ty_1__bindgen_ty_1>() - 1usize];
};
impl _VAEncSegParamAV1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn segmentation_enabled(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        segmentation_enabled: u8,
        segmentation_update_map: u8,
        segmentation_temporal_update: u8,
        reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let segmentation_enabled: u8 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let segmentation_update_map: u8 =
                unsafe { ::std::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let segmentation_temporal_update: u8 =
                unsafe { ::std::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSegParamAV1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncSegParamAV1__bindgen_ty_1>() - 1usize];
    ["Alignment of _VAEncSegParamAV1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncSegParamAV1__bindgen_ty_1>() - 1usize];
    ["Offset of field: _VAEncSegParamAV1__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncSegParamAV1__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncSegParamAV1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncSegParamAV1__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSegParamAV1"][::std::mem::size_of::<_VAEncSegParamAV1>() - 156usize];
    ["Alignment of _VAEncSegParamAV1"][::std::mem::align_of::<_VAEncSegParamAV1>() - 4usize];
    ["Offset of field: _VAEncSegParamAV1::seg_flags"]
        [::std::mem::offset_of!(_VAEncSegParamAV1, seg_flags) - 0usize];
    ["Offset of field: _VAEncSegParamAV1::segment_number"]
        [::std::mem::offset_of!(_VAEncSegParamAV1, segment_number) - 1usize];
    ["Offset of field: _VAEncSegParamAV1::feature_data"]
        [::std::mem::offset_of!(_VAEncSegParamAV1, feature_data) - 2usize];
    ["Offset of field: _VAEncSegParamAV1::feature_mask"]
        [::std::mem::offset_of!(_VAEncSegParamAV1, feature_mask) - 130usize];
    ["Offset of field: _VAEncSegParamAV1::va_reserved"]
        [::std::mem::offset_of!(_VAEncSegParamAV1, va_reserved) - 140usize];
};
pub type VAEncSegParamAV1 = _VAEncSegParamAV1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncSegMapBufferAV1 {
    pub segmentMapDataSize: u32,
    pub pSegmentMap: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncSegMapBufferAV1"][::std::mem::size_of::<_VAEncSegMapBufferAV1>() - 16usize];
    ["Alignment of _VAEncSegMapBufferAV1"]
        [::std::mem::align_of::<_VAEncSegMapBufferAV1>() - 8usize];
    ["Offset of field: _VAEncSegMapBufferAV1::segmentMapDataSize"]
        [::std::mem::offset_of!(_VAEncSegMapBufferAV1, segmentMapDataSize) - 0usize];
    ["Offset of field: _VAEncSegMapBufferAV1::pSegmentMap"]
        [::std::mem::offset_of!(_VAEncSegMapBufferAV1, pSegmentMap) - 8usize];
};
pub type VAEncSegMapBufferAV1 = _VAEncSegMapBufferAV1;
pub const VAAV1EncTransformationIdentity: VAEncTransformationTypeAV1 = 0;
pub const VAAV1EncTransformationTranslation: VAEncTransformationTypeAV1 = 1;
pub const VAAV1EncTransformationRotzoom: VAEncTransformationTypeAV1 = 2;
pub const VAAV1EncTransformationAffine: VAEncTransformationTypeAV1 = 3;
pub const VAAV1EncTransformationCount: VAEncTransformationTypeAV1 = 4;
pub type VAEncTransformationTypeAV1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncWarpedMotionParamsAV1 {
    pub wmtype: VAEncTransformationTypeAV1,
    pub wmmat: [i32; 8usize],
    pub invalid: u8,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncWarpedMotionParamsAV1"]
        [::std::mem::size_of::<_VAEncWarpedMotionParamsAV1>() - 56usize];
    ["Alignment of _VAEncWarpedMotionParamsAV1"]
        [::std::mem::align_of::<_VAEncWarpedMotionParamsAV1>() - 4usize];
    ["Offset of field: _VAEncWarpedMotionParamsAV1::wmtype"]
        [::std::mem::offset_of!(_VAEncWarpedMotionParamsAV1, wmtype) - 0usize];
    ["Offset of field: _VAEncWarpedMotionParamsAV1::wmmat"]
        [::std::mem::offset_of!(_VAEncWarpedMotionParamsAV1, wmmat) - 4usize];
    ["Offset of field: _VAEncWarpedMotionParamsAV1::invalid"]
        [::std::mem::offset_of!(_VAEncWarpedMotionParamsAV1, invalid) - 36usize];
    ["Offset of field: _VAEncWarpedMotionParamsAV1::va_reserved"]
        [::std::mem::offset_of!(_VAEncWarpedMotionParamsAV1, va_reserved) - 40usize];
};
pub type VAEncWarpedMotionParamsAV1 = _VAEncWarpedMotionParamsAV1;
#[repr(C)]
#[derive(Copy, Clone)]
pub union VARefFrameCtrlAV1 {
    pub fields: VARefFrameCtrlAV1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct VARefFrameCtrlAV1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VARefFrameCtrlAV1__bindgen_ty_1"]
        [::std::mem::size_of::<VARefFrameCtrlAV1__bindgen_ty_1>() - 4usize];
    ["Alignment of VARefFrameCtrlAV1__bindgen_ty_1"]
        [::std::mem::align_of::<VARefFrameCtrlAV1__bindgen_ty_1>() - 4usize];
};
impl VARefFrameCtrlAV1__bindgen_ty_1 {
    #[inline]
    pub fn search_idx0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_search_idx0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn search_idx1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_search_idx1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn search_idx2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_search_idx2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn search_idx3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_search_idx3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn search_idx4(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_search_idx4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn search_idx5(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_search_idx5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn search_idx6(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_search_idx6(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn Reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        search_idx0: u32,
        search_idx1: u32,
        search_idx2: u32,
        search_idx3: u32,
        search_idx4: u32,
        search_idx5: u32,
        search_idx6: u32,
        Reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let search_idx0: u32 = unsafe { ::std::mem::transmute(search_idx0) };
            search_idx0 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let search_idx1: u32 = unsafe { ::std::mem::transmute(search_idx1) };
            search_idx1 as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let search_idx2: u32 = unsafe { ::std::mem::transmute(search_idx2) };
            search_idx2 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let search_idx3: u32 = unsafe { ::std::mem::transmute(search_idx3) };
            search_idx3 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 3u8, {
            let search_idx4: u32 = unsafe { ::std::mem::transmute(search_idx4) };
            search_idx4 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 3u8, {
            let search_idx5: u32 = unsafe { ::std::mem::transmute(search_idx5) };
            search_idx5 as u64
        });
        __bindgen_bitfield_unit.set(18usize, 3u8, {
            let search_idx6: u32 = unsafe { ::std::mem::transmute(search_idx6) };
            search_idx6 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VARefFrameCtrlAV1"][::std::mem::size_of::<VARefFrameCtrlAV1>() - 4usize];
    ["Alignment of VARefFrameCtrlAV1"][::std::mem::align_of::<VARefFrameCtrlAV1>() - 4usize];
    ["Offset of field: VARefFrameCtrlAV1::fields"]
        [::std::mem::offset_of!(VARefFrameCtrlAV1, fields) - 0usize];
    ["Offset of field: VARefFrameCtrlAV1::value"]
        [::std::mem::offset_of!(VARefFrameCtrlAV1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncPictureParameterBufferAV1 {
    pub frame_width_minus_1: u16,
    pub frame_height_minus_1: u16,
    pub reconstructed_frame: VASurfaceID,
    pub coded_buf: VABufferID,
    pub reference_frames: [VASurfaceID; 8usize],
    pub ref_frame_idx: [u8; 7usize],
    pub hierarchical_level_plus1: u8,
    pub primary_ref_frame: u8,
    pub order_hint: u8,
    pub refresh_frame_flags: u8,
    pub reserved8bits1: u8,
    pub ref_frame_ctrl_l0: VARefFrameCtrlAV1,
    pub ref_frame_ctrl_l1: VARefFrameCtrlAV1,
    pub picture_flags: _VAEncPictureParameterBufferAV1__bindgen_ty_1,
    pub seg_id_block_size: u8,
    pub num_tile_groups_minus1: u8,
    pub temporal_id: u8,
    pub filter_level: [u8; 2usize],
    pub filter_level_u: u8,
    pub filter_level_v: u8,
    pub loop_filter_flags: _VAEncPictureParameterBufferAV1__bindgen_ty_2,
    pub superres_scale_denominator: u8,
    pub interpolation_filter: u8,
    pub ref_deltas: [i8; 8usize],
    pub mode_deltas: [i8; 2usize],
    pub base_qindex: u8,
    pub y_dc_delta_q: i8,
    pub u_dc_delta_q: i8,
    pub u_ac_delta_q: i8,
    pub v_dc_delta_q: i8,
    pub v_ac_delta_q: i8,
    pub min_base_qindex: u8,
    pub max_base_qindex: u8,
    pub qmatrix_flags: _VAEncPictureParameterBufferAV1__bindgen_ty_3,
    pub reserved16bits1: u16,
    pub mode_control_flags: _VAEncPictureParameterBufferAV1__bindgen_ty_4,
    pub segments: VAEncSegParamAV1,
    pub tile_cols: u8,
    pub tile_rows: u8,
    pub reserved16bits2: u16,
    pub width_in_sbs_minus_1: [u16; 63usize],
    pub height_in_sbs_minus_1: [u16; 63usize],
    pub context_update_tile_id: u16,
    pub cdef_damping_minus_3: u8,
    pub cdef_bits: u8,
    pub cdef_y_strengths: [u8; 8usize],
    pub cdef_uv_strengths: [u8; 8usize],
    pub loop_restoration_flags: _VAEncPictureParameterBufferAV1__bindgen_ty_5,
    pub wm: [VAEncWarpedMotionParamsAV1; 7usize],
    pub bit_offset_qindex: u32,
    pub bit_offset_segmentation: u32,
    pub bit_offset_loopfilter_params: u32,
    pub bit_offset_cdef_params: u32,
    pub size_in_bits_cdef_params: u32,
    pub byte_offset_frame_hdr_obu_size: u32,
    pub size_in_bits_frame_hdr_obu: u32,
    pub tile_group_obu_hdr_info: _VAEncPictureParameterBufferAV1__bindgen_ty_6,
    pub number_skip_frames: u8,
    pub reserved16bits3: u16,
    pub skip_frames_reduced_size: i32,
    pub va_reserved: [u32; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferAV1__bindgen_ty_1 {
    pub bits: _VAEncPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferAV1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn frame_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_cdf_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_cdf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_superres(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn use_ref_frame_mvs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reduced_tx_set(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_tx_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_frame_obu(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_frame_obu(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_frame_recon(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_recon(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_intrabc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_intrabc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn palette_mode_enable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_palette_mode_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn allow_screen_content_tools(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_screen_content_tools(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_integer_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_integer_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frame_type: u32,
        error_resilient_mode: u32,
        disable_cdf_update: u32,
        use_superres: u32,
        allow_high_precision_mv: u32,
        use_ref_frame_mvs: u32,
        disable_frame_end_update_cdf: u32,
        reduced_tx_set: u32,
        enable_frame_obu: u32,
        long_term_reference: u32,
        disable_frame_recon: u32,
        allow_intrabc: u32,
        palette_mode_enable: u32,
        allow_screen_content_tools: u32,
        force_integer_mv: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let frame_type: u32 = unsafe { ::std::mem::transmute(frame_type) };
            frame_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::std::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let disable_cdf_update: u32 = unsafe { ::std::mem::transmute(disable_cdf_update) };
            disable_cdf_update as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let use_superres: u32 = unsafe { ::std::mem::transmute(use_superres) };
            use_superres as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::std::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let use_ref_frame_mvs: u32 = unsafe { ::std::mem::transmute(use_ref_frame_mvs) };
            use_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::std::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let reduced_tx_set: u32 = unsafe { ::std::mem::transmute(reduced_tx_set) };
            reduced_tx_set as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let enable_frame_obu: u32 = unsafe { ::std::mem::transmute(enable_frame_obu) };
            enable_frame_obu as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let long_term_reference: u32 = unsafe { ::std::mem::transmute(long_term_reference) };
            long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let disable_frame_recon: u32 = unsafe { ::std::mem::transmute(disable_frame_recon) };
            disable_frame_recon as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let allow_intrabc: u32 = unsafe { ::std::mem::transmute(allow_intrabc) };
            allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let palette_mode_enable: u32 = unsafe { ::std::mem::transmute(palette_mode_enable) };
            palette_mode_enable as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let allow_screen_content_tools: u32 =
                unsafe { ::std::mem::transmute(allow_screen_content_tools) };
            allow_screen_content_tools as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let force_integer_mv: u32 = unsafe { ::std::mem::transmute(force_integer_mv) };
            force_integer_mv as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_1>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_1, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_1, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferAV1__bindgen_ty_2 {
    pub bits: _VAEncPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1,
    pub value: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1,
    >() - 1usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1>()
            - 1usize];
};
impl _VAEncPictureParameterBufferAV1__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn sharpness_level(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_sharpness_level(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mode_ref_delta_enabled(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mode_ref_delta_enabled(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mode_ref_delta_update(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mode_ref_delta_update(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sharpness_level: u8,
        mode_ref_delta_enabled: u8,
        mode_ref_delta_update: u8,
        reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let sharpness_level: u8 = unsafe { ::std::mem::transmute(sharpness_level) };
            sharpness_level as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mode_ref_delta_enabled: u8 =
                unsafe { ::std::mem::transmute(mode_ref_delta_enabled) };
            mode_ref_delta_enabled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mode_ref_delta_update: u8 = unsafe { ::std::mem::transmute(mode_ref_delta_update) };
            mode_ref_delta_update as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_2>() - 1usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_2>() - 1usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_2::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_2, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_2::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_2, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferAV1__bindgen_ty_3 {
    pub bits: _VAEncPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1,
    pub value: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1,
    >() - 2usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1>()
            - 2usize];
};
impl _VAEncPictureParameterBufferAV1__bindgen_ty_3__bindgen_ty_1 {
    #[inline]
    pub fn using_qmatrix(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_using_qmatrix(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn qm_y(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_qm_y(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn qm_u(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_qm_u(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn qm_v(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_qm_v(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        using_qmatrix: u16,
        qm_y: u16,
        qm_u: u16,
        qm_v: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let using_qmatrix: u16 = unsafe { ::std::mem::transmute(using_qmatrix) };
            using_qmatrix as u64
        });
        __bindgen_bitfield_unit.set(1usize, 4u8, {
            let qm_y: u16 = unsafe { ::std::mem::transmute(qm_y) };
            qm_y as u64
        });
        __bindgen_bitfield_unit.set(5usize, 4u8, {
            let qm_u: u16 = unsafe { ::std::mem::transmute(qm_u) };
            qm_u as u64
        });
        __bindgen_bitfield_unit.set(9usize, 4u8, {
            let qm_v: u16 = unsafe { ::std::mem::transmute(qm_v) };
            qm_v as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_3"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_3>() - 2usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_3"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_3>() - 2usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_3::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_3, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_3::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_3, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferAV1__bindgen_ty_4 {
    pub bits: _VAEncPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1,
    pub value: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1>()
            - 4usize];
};
impl _VAEncPictureParameterBufferAV1__bindgen_ty_4__bindgen_ty_1 {
    #[inline]
    pub fn delta_q_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_q_res(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_res(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_lf_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_lf_res(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_res(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_lf_multi(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_multi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tx_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reference_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_reference_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_mode_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mode_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        delta_q_present: u32,
        delta_q_res: u32,
        delta_lf_present: u32,
        delta_lf_res: u32,
        delta_lf_multi: u32,
        tx_mode: u32,
        reference_mode: u32,
        skip_mode_present: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let delta_q_present: u32 = unsafe { ::std::mem::transmute(delta_q_present) };
            delta_q_present as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let delta_q_res: u32 = unsafe { ::std::mem::transmute(delta_q_res) };
            delta_q_res as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let delta_lf_present: u32 = unsafe { ::std::mem::transmute(delta_lf_present) };
            delta_lf_present as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let delta_lf_res: u32 = unsafe { ::std::mem::transmute(delta_lf_res) };
            delta_lf_res as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let delta_lf_multi: u32 = unsafe { ::std::mem::transmute(delta_lf_multi) };
            delta_lf_multi as u64
        });
        __bindgen_bitfield_unit.set(7usize, 2u8, {
            let tx_mode: u32 = unsafe { ::std::mem::transmute(tx_mode) };
            tx_mode as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let reference_mode: u32 = unsafe { ::std::mem::transmute(reference_mode) };
            reference_mode as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let skip_mode_present: u32 = unsafe { ::std::mem::transmute(skip_mode_present) };
            skip_mode_present as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_4"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_4>() - 4usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_4"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_4>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_4::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_4, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_4::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_4, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferAV1__bindgen_ty_5 {
    pub bits: _VAEncPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1,
    pub value: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1,
    >() - 2usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1>()
            - 2usize];
};
impl _VAEncPictureParameterBufferAV1__bindgen_ty_5__bindgen_ty_1 {
    #[inline]
    pub fn yframe_restoration_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_yframe_restoration_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn cbframe_restoration_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_cbframe_restoration_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn crframe_restoration_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_crframe_restoration_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lr_unit_shift(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_lr_unit_shift(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lr_uv_shift(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_lr_uv_shift(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        yframe_restoration_type: u16,
        cbframe_restoration_type: u16,
        crframe_restoration_type: u16,
        lr_unit_shift: u16,
        lr_uv_shift: u16,
        reserved: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let yframe_restoration_type: u16 =
                unsafe { ::std::mem::transmute(yframe_restoration_type) };
            yframe_restoration_type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let cbframe_restoration_type: u16 =
                unsafe { ::std::mem::transmute(cbframe_restoration_type) };
            cbframe_restoration_type as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let crframe_restoration_type: u16 =
                unsafe { ::std::mem::transmute(crframe_restoration_type) };
            crframe_restoration_type as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let lr_unit_shift: u16 = unsafe { ::std::mem::transmute(lr_unit_shift) };
            lr_unit_shift as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let lr_uv_shift: u16 = unsafe { ::std::mem::transmute(lr_uv_shift) };
            lr_uv_shift as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_5"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_5>() - 2usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_5"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_5>() - 2usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_5::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_5, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_5::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_5, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncPictureParameterBufferAV1__bindgen_ty_6 {
    pub bits: _VAEncPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1,
    pub value: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1"][::std::mem::size_of::<
        _VAEncPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1,
    >() - 1usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1>()
            - 1usize];
};
impl _VAEncPictureParameterBufferAV1__bindgen_ty_6__bindgen_ty_1 {
    #[inline]
    pub fn obu_extension_flag(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_obu_extension_flag(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn obu_has_size_field(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_obu_has_size_field(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn temporal_id(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_temporal_id(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn spatial_id(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_spatial_id(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        obu_extension_flag: u8,
        obu_has_size_field: u8,
        temporal_id: u8,
        spatial_id: u8,
        reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let obu_extension_flag: u8 = unsafe { ::std::mem::transmute(obu_extension_flag) };
            obu_extension_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let obu_has_size_field: u8 = unsafe { ::std::mem::transmute(obu_has_size_field) };
            obu_has_size_field as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let temporal_id: u8 = unsafe { ::std::mem::transmute(temporal_id) };
            temporal_id as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let spatial_id: u8 = unsafe { ::std::mem::transmute(spatial_id) };
            spatial_id as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let reserved: u8 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1__bindgen_ty_6"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_6>() - 1usize];
    ["Alignment of _VAEncPictureParameterBufferAV1__bindgen_ty_6"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1__bindgen_ty_6>() - 1usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_6::bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_6, bits) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1__bindgen_ty_6::value"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1__bindgen_ty_6, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncPictureParameterBufferAV1"]
        [::std::mem::size_of::<_VAEncPictureParameterBufferAV1>() - 1032usize];
    ["Alignment of _VAEncPictureParameterBufferAV1"]
        [::std::mem::align_of::<_VAEncPictureParameterBufferAV1>() - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::frame_width_minus_1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, frame_width_minus_1) - 0usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::frame_height_minus_1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, frame_height_minus_1) - 2usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::reconstructed_frame"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, reconstructed_frame) - 4usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::coded_buf"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, coded_buf) - 8usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::reference_frames"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, reference_frames) - 12usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::ref_frame_idx"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, ref_frame_idx) - 44usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::hierarchical_level_plus1"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        hierarchical_level_plus1
    ) - 51usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::primary_ref_frame"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, primary_ref_frame) - 52usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::order_hint"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, order_hint) - 53usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::refresh_frame_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, refresh_frame_flags) - 54usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::reserved8bits1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, reserved8bits1) - 55usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::ref_frame_ctrl_l0"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, ref_frame_ctrl_l0) - 56usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::ref_frame_ctrl_l1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, ref_frame_ctrl_l1) - 60usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::picture_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, picture_flags) - 64usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::seg_id_block_size"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, seg_id_block_size) - 68usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::num_tile_groups_minus1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, num_tile_groups_minus1) - 69usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::temporal_id"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, temporal_id) - 70usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::filter_level"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, filter_level) - 71usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::filter_level_u"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, filter_level_u) - 73usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::filter_level_v"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, filter_level_v) - 74usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::loop_filter_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, loop_filter_flags) - 75usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::superres_scale_denominator"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        superres_scale_denominator
    ) - 76usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::interpolation_filter"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, interpolation_filter) - 77usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::ref_deltas"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, ref_deltas) - 78usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::mode_deltas"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, mode_deltas) - 86usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::base_qindex"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, base_qindex) - 88usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::y_dc_delta_q"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, y_dc_delta_q) - 89usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::u_dc_delta_q"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, u_dc_delta_q) - 90usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::u_ac_delta_q"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, u_ac_delta_q) - 91usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::v_dc_delta_q"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, v_dc_delta_q) - 92usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::v_ac_delta_q"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, v_ac_delta_q) - 93usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::min_base_qindex"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, min_base_qindex) - 94usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::max_base_qindex"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, max_base_qindex) - 95usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::qmatrix_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, qmatrix_flags) - 96usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::reserved16bits1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, reserved16bits1) - 98usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::mode_control_flags"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, mode_control_flags) - 100usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::segments"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, segments) - 104usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::tile_cols"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, tile_cols) - 260usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::tile_rows"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, tile_rows) - 261usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::reserved16bits2"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, reserved16bits2) - 262usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::width_in_sbs_minus_1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, width_in_sbs_minus_1) - 264usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::height_in_sbs_minus_1"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, height_in_sbs_minus_1) - 390usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::context_update_tile_id"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        context_update_tile_id
    ) - 516usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::cdef_damping_minus_3"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, cdef_damping_minus_3) - 518usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::cdef_bits"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, cdef_bits) - 519usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::cdef_y_strengths"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, cdef_y_strengths) - 520usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::cdef_uv_strengths"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, cdef_uv_strengths) - 528usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::loop_restoration_flags"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        loop_restoration_flags
    ) - 536usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::wm"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, wm) - 540usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::bit_offset_qindex"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, bit_offset_qindex) - 932usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::bit_offset_segmentation"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        bit_offset_segmentation
    ) - 936usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::bit_offset_loopfilter_params"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        bit_offset_loopfilter_params
    )
        - 940usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::bit_offset_cdef_params"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        bit_offset_cdef_params
    ) - 944usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::size_in_bits_cdef_params"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        size_in_bits_cdef_params
    ) - 948usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::byte_offset_frame_hdr_obu_size"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        byte_offset_frame_hdr_obu_size
    )
        - 952usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::size_in_bits_frame_hdr_obu"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        size_in_bits_frame_hdr_obu
    ) - 956usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::tile_group_obu_hdr_info"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        tile_group_obu_hdr_info
    ) - 960usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::number_skip_frames"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, number_skip_frames) - 961usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::reserved16bits3"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, reserved16bits3) - 962usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::skip_frames_reduced_size"][::std::mem::offset_of!(
        _VAEncPictureParameterBufferAV1,
        skip_frames_reduced_size
    ) - 964usize];
    ["Offset of field: _VAEncPictureParameterBufferAV1::va_reserved"]
        [::std::mem::offset_of!(_VAEncPictureParameterBufferAV1, va_reserved) - 968usize];
};
pub type VAEncPictureParameterBufferAV1 = _VAEncPictureParameterBufferAV1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncTileGroupBufferAV1 {
    pub tg_start: u8,
    pub tg_end: u8,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncTileGroupBufferAV1"]
        [::std::mem::size_of::<_VAEncTileGroupBufferAV1>() - 20usize];
    ["Alignment of _VAEncTileGroupBufferAV1"]
        [::std::mem::align_of::<_VAEncTileGroupBufferAV1>() - 4usize];
    ["Offset of field: _VAEncTileGroupBufferAV1::tg_start"]
        [::std::mem::offset_of!(_VAEncTileGroupBufferAV1, tg_start) - 0usize];
    ["Offset of field: _VAEncTileGroupBufferAV1::tg_end"]
        [::std::mem::offset_of!(_VAEncTileGroupBufferAV1, tg_end) - 1usize];
    ["Offset of field: _VAEncTileGroupBufferAV1::va_reserved"]
        [::std::mem::offset_of!(_VAEncTileGroupBufferAV1, va_reserved) - 4usize];
};
pub type VAEncTileGroupBufferAV1 = _VAEncTileGroupBufferAV1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncMiscParameterFEIFrameControlH264 {
    pub function: u32,
    pub mb_ctrl: VABufferID,
    pub distortion: VABufferID,
    pub mv_data: VABufferID,
    pub mb_code_data: VABufferID,
    pub qp: VABufferID,
    pub mv_predictor: VABufferID,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
    pub max_frame_size: u32,
    pub num_passes: u32,
    pub delta_qp: *mut u8,
    pub reserved3: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncMiscParameterFEIFrameControlH264"]
        [::std::mem::size_of::<_VAEncMiscParameterFEIFrameControlH264>() - 80usize];
    ["Alignment of _VAEncMiscParameterFEIFrameControlH264"]
        [::std::mem::align_of::<_VAEncMiscParameterFEIFrameControlH264>() - 8usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::function"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, function) - 0usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::mb_ctrl"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, mb_ctrl) - 4usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::distortion"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, distortion) - 8usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::mv_data"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, mv_data) - 12usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::mb_code_data"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, mb_code_data) - 16usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, qp) - 20usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::mv_predictor"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, mv_predictor) - 24usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::max_frame_size"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, max_frame_size) - 44usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::num_passes"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, num_passes) - 48usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::delta_qp"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, delta_qp) - 56usize];
    ["Offset of field: _VAEncMiscParameterFEIFrameControlH264::reserved3"]
        [::std::mem::offset_of!(_VAEncMiscParameterFEIFrameControlH264, reserved3) - 64usize];
};
impl _VAEncMiscParameterFEIFrameControlH264 {
    #[inline]
    pub fn num_mv_predictors_l0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_num_mv_predictors_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn num_mv_predictors_l1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_num_mv_predictors_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn search_path(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_search_path(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn len_sp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_len_sp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_mb_part_mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_sub_mb_part_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_part_mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(71usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_intra_part_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(71usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn multi_pred_l0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(76usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multi_pred_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(76usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn multi_pred_l1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(77usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_multi_pred_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(77usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_pel_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(78usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pel_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(78usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn inter_sad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_inter_sad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_sad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(82usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_intra_sad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(82usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn distortion_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(84usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_distortion_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(84usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn repartition_check_enable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(85usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_repartition_check_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(85usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn adaptive_search(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(86usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_adaptive_search(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(86usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mv_predictor_enable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(87usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mv_predictor_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(87usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_qp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(88usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_qp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(88usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_input(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(89usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_input(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(89usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_size_ctrl(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(90usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_size_ctrl(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(90usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn colocated_mb_distortion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(91usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_colocated_mb_distortion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(91usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(92usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(92usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_width(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_height(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(104usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_height(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(104usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn search_window(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(112usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_search_window(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(112usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(116usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(116usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        num_mv_predictors_l0: u32,
        num_mv_predictors_l1: u32,
        search_path: u32,
        len_sp: u32,
        reserved0: u32,
        sub_mb_part_mask: u32,
        intra_part_mask: u32,
        multi_pred_l0: u32,
        multi_pred_l1: u32,
        sub_pel_mode: u32,
        inter_sad: u32,
        intra_sad: u32,
        distortion_type: u32,
        repartition_check_enable: u32,
        adaptive_search: u32,
        mv_predictor_enable: u32,
        mb_qp: u32,
        mb_input: u32,
        mb_size_ctrl: u32,
        colocated_mb_distortion: u32,
        reserved1: u32,
        ref_width: u32,
        ref_height: u32,
        search_window: u32,
        reserved2: u32,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let num_mv_predictors_l0: u32 = unsafe { ::std::mem::transmute(num_mv_predictors_l0) };
            num_mv_predictors_l0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let num_mv_predictors_l1: u32 = unsafe { ::std::mem::transmute(num_mv_predictors_l1) };
            num_mv_predictors_l1 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let search_path: u32 = unsafe { ::std::mem::transmute(search_path) };
            search_path as u64
        });
        __bindgen_bitfield_unit.set(40usize, 8u8, {
            let len_sp: u32 = unsafe { ::std::mem::transmute(len_sp) };
            len_sp as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(64usize, 7u8, {
            let sub_mb_part_mask: u32 = unsafe { ::std::mem::transmute(sub_mb_part_mask) };
            sub_mb_part_mask as u64
        });
        __bindgen_bitfield_unit.set(71usize, 5u8, {
            let intra_part_mask: u32 = unsafe { ::std::mem::transmute(intra_part_mask) };
            intra_part_mask as u64
        });
        __bindgen_bitfield_unit.set(76usize, 1u8, {
            let multi_pred_l0: u32 = unsafe { ::std::mem::transmute(multi_pred_l0) };
            multi_pred_l0 as u64
        });
        __bindgen_bitfield_unit.set(77usize, 1u8, {
            let multi_pred_l1: u32 = unsafe { ::std::mem::transmute(multi_pred_l1) };
            multi_pred_l1 as u64
        });
        __bindgen_bitfield_unit.set(78usize, 2u8, {
            let sub_pel_mode: u32 = unsafe { ::std::mem::transmute(sub_pel_mode) };
            sub_pel_mode as u64
        });
        __bindgen_bitfield_unit.set(80usize, 2u8, {
            let inter_sad: u32 = unsafe { ::std::mem::transmute(inter_sad) };
            inter_sad as u64
        });
        __bindgen_bitfield_unit.set(82usize, 2u8, {
            let intra_sad: u32 = unsafe { ::std::mem::transmute(intra_sad) };
            intra_sad as u64
        });
        __bindgen_bitfield_unit.set(84usize, 1u8, {
            let distortion_type: u32 = unsafe { ::std::mem::transmute(distortion_type) };
            distortion_type as u64
        });
        __bindgen_bitfield_unit.set(85usize, 1u8, {
            let repartition_check_enable: u32 =
                unsafe { ::std::mem::transmute(repartition_check_enable) };
            repartition_check_enable as u64
        });
        __bindgen_bitfield_unit.set(86usize, 1u8, {
            let adaptive_search: u32 = unsafe { ::std::mem::transmute(adaptive_search) };
            adaptive_search as u64
        });
        __bindgen_bitfield_unit.set(87usize, 1u8, {
            let mv_predictor_enable: u32 = unsafe { ::std::mem::transmute(mv_predictor_enable) };
            mv_predictor_enable as u64
        });
        __bindgen_bitfield_unit.set(88usize, 1u8, {
            let mb_qp: u32 = unsafe { ::std::mem::transmute(mb_qp) };
            mb_qp as u64
        });
        __bindgen_bitfield_unit.set(89usize, 1u8, {
            let mb_input: u32 = unsafe { ::std::mem::transmute(mb_input) };
            mb_input as u64
        });
        __bindgen_bitfield_unit.set(90usize, 1u8, {
            let mb_size_ctrl: u32 = unsafe { ::std::mem::transmute(mb_size_ctrl) };
            mb_size_ctrl as u64
        });
        __bindgen_bitfield_unit.set(91usize, 1u8, {
            let colocated_mb_distortion: u32 =
                unsafe { ::std::mem::transmute(colocated_mb_distortion) };
            colocated_mb_distortion as u64
        });
        __bindgen_bitfield_unit.set(92usize, 4u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(96usize, 8u8, {
            let ref_width: u32 = unsafe { ::std::mem::transmute(ref_width) };
            ref_width as u64
        });
        __bindgen_bitfield_unit.set(104usize, 8u8, {
            let ref_height: u32 = unsafe { ::std::mem::transmute(ref_height) };
            ref_height as u64
        });
        __bindgen_bitfield_unit.set(112usize, 4u8, {
            let search_window: u32 = unsafe { ::std::mem::transmute(search_window) };
            search_window as u64
        });
        __bindgen_bitfield_unit.set(116usize, 12u8, {
            let reserved2: u32 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAEncMiscParameterFEIFrameControlH264 = _VAEncMiscParameterFEIFrameControlH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIMBControlH264 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub reserved1: u32,
    pub reserved2: u32,
    pub _bitfield_align_2: [u16; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMBControlH264"][::std::mem::size_of::<_VAEncFEIMBControlH264>() - 16usize];
    ["Alignment of _VAEncFEIMBControlH264"]
        [::std::mem::align_of::<_VAEncFEIMBControlH264>() - 4usize];
    ["Offset of field: _VAEncFEIMBControlH264::reserved1"]
        [::std::mem::offset_of!(_VAEncFEIMBControlH264, reserved1) - 4usize];
    ["Offset of field: _VAEncFEIMBControlH264::reserved2"]
        [::std::mem::offset_of!(_VAEncFEIMBControlH264, reserved2) - 8usize];
};
impl _VAEncFEIMBControlH264 {
    #[inline]
    pub fn force_to_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_to_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_to_skip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_to_skip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn force_to_nonskip(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_to_nonskip(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_direct_bias_adjustment(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_direct_bias_adjustment(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_motion_bias_adjustment(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_motion_bias_adjustment(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ext_mv_cost_scaling_factor(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_ext_mv_cost_scaling_factor(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        force_to_intra: u32,
        force_to_skip: u32,
        force_to_nonskip: u32,
        enable_direct_bias_adjustment: u32,
        enable_motion_bias_adjustment: u32,
        ext_mv_cost_scaling_factor: u32,
        reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let force_to_intra: u32 = unsafe { ::std::mem::transmute(force_to_intra) };
            force_to_intra as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let force_to_skip: u32 = unsafe { ::std::mem::transmute(force_to_skip) };
            force_to_skip as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let force_to_nonskip: u32 = unsafe { ::std::mem::transmute(force_to_nonskip) };
            force_to_nonskip as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enable_direct_bias_adjustment: u32 =
                unsafe { ::std::mem::transmute(enable_direct_bias_adjustment) };
            enable_direct_bias_adjustment as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let enable_motion_bias_adjustment: u32 =
                unsafe { ::std::mem::transmute(enable_motion_bias_adjustment) };
            enable_motion_bias_adjustment as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let ext_mv_cost_scaling_factor: u32 =
                unsafe { ::std::mem::transmute(ext_mv_cost_scaling_factor) };
            ext_mv_cost_scaling_factor as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn reserved3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn target_size_in_word(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_target_size_in_word(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn max_size_in_word(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_max_size_in_word(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        reserved3: u32,
        target_size_in_word: u32,
        max_size_in_word: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let reserved3: u32 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let target_size_in_word: u32 = unsafe { ::std::mem::transmute(target_size_in_word) };
            target_size_in_word as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let max_size_in_word: u32 = unsafe { ::std::mem::transmute(max_size_in_word) };
            max_size_in_word as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAEncFEIMBControlH264 = _VAEncFEIMBControlH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIMVPredictorH264 {
    pub ref_idx: [_VAEncFEIMVPredictorH264__bindgen_ty_1; 4usize],
    pub reserved: u32,
    pub mv: [VAMotionVector; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIMVPredictorH264__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMVPredictorH264__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncFEIMVPredictorH264__bindgen_ty_1>() - 1usize];
    ["Alignment of _VAEncFEIMVPredictorH264__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncFEIMVPredictorH264__bindgen_ty_1>() - 1usize];
};
impl _VAEncFEIMVPredictorH264__bindgen_ty_1 {
    #[inline]
    pub fn ref_idx_l0(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_ref_idx_l0(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l1(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_ref_idx_l1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ref_idx_l0: u8, ref_idx_l1: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let ref_idx_l0: u8 = unsafe { ::std::mem::transmute(ref_idx_l0) };
            ref_idx_l0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ref_idx_l1: u8 = unsafe { ::std::mem::transmute(ref_idx_l1) };
            ref_idx_l1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMVPredictorH264"]
        [::std::mem::size_of::<_VAEncFEIMVPredictorH264>() - 40usize];
    ["Alignment of _VAEncFEIMVPredictorH264"]
        [::std::mem::align_of::<_VAEncFEIMVPredictorH264>() - 4usize];
    ["Offset of field: _VAEncFEIMVPredictorH264::ref_idx"]
        [::std::mem::offset_of!(_VAEncFEIMVPredictorH264, ref_idx) - 0usize];
    ["Offset of field: _VAEncFEIMVPredictorH264::reserved"]
        [::std::mem::offset_of!(_VAEncFEIMVPredictorH264, reserved) - 4usize];
    ["Offset of field: _VAEncFEIMVPredictorH264::mv"]
        [::std::mem::offset_of!(_VAEncFEIMVPredictorH264, mv) - 8usize];
};
pub type VAEncFEIMVPredictorH264 = _VAEncFEIMVPredictorH264;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VAEncFEIMBCodeH264 {
    pub reserved0: [u32; 3usize],
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
    pub mb_mode: _VAEncFEIMBCodeH264__bindgen_ty_1,
    pub _bitfield_align_2: [u16; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub reserved9: [u32; 4usize],
    pub reserved10: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VAEncFEIMBCodeH264__bindgen_ty_1 {
    pub intra_mb: _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_1,
    pub inter_mb: _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_1>() - 12usize];
    ["Alignment of _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn luma_intra_pred_modes0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_luma_intra_pred_modes0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn luma_intra_pred_modes1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_luma_intra_pred_modes1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn luma_intra_pred_modes2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_luma_intra_pred_modes2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn luma_intra_pred_modes3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_luma_intra_pred_modes3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_intra_pred_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_intra_pred_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_pred_avail_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(66usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_intra_pred_avail_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(66usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_pred_avail_flagF(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(71usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_pred_avail_flagF(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(71usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved6(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(72usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved6(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(72usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        luma_intra_pred_modes0: u32,
        luma_intra_pred_modes1: u32,
        luma_intra_pred_modes2: u32,
        luma_intra_pred_modes3: u32,
        chroma_intra_pred_mode: u32,
        intra_pred_avail_flag: u32,
        intra_pred_avail_flagF: u32,
        reserved6: u32,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let luma_intra_pred_modes0: u32 =
                unsafe { ::std::mem::transmute(luma_intra_pred_modes0) };
            luma_intra_pred_modes0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let luma_intra_pred_modes1: u32 =
                unsafe { ::std::mem::transmute(luma_intra_pred_modes1) };
            luma_intra_pred_modes1 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let luma_intra_pred_modes2: u32 =
                unsafe { ::std::mem::transmute(luma_intra_pred_modes2) };
            luma_intra_pred_modes2 as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let luma_intra_pred_modes3: u32 =
                unsafe { ::std::mem::transmute(luma_intra_pred_modes3) };
            luma_intra_pred_modes3 as u64
        });
        __bindgen_bitfield_unit.set(64usize, 2u8, {
            let chroma_intra_pred_mode: u32 =
                unsafe { ::std::mem::transmute(chroma_intra_pred_mode) };
            chroma_intra_pred_mode as u64
        });
        __bindgen_bitfield_unit.set(66usize, 5u8, {
            let intra_pred_avail_flag: u32 =
                unsafe { ::std::mem::transmute(intra_pred_avail_flag) };
            intra_pred_avail_flag as u64
        });
        __bindgen_bitfield_unit.set(71usize, 1u8, {
            let intra_pred_avail_flagF: u32 =
                unsafe { ::std::mem::transmute(intra_pred_avail_flagF) };
            intra_pred_avail_flagF as u64
        });
        __bindgen_bitfield_unit.set(72usize, 24u8, {
            let reserved6: u32 = unsafe { ::std::mem::transmute(reserved6) };
            reserved6 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_2>() - 12usize];
    ["Alignment of _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_2>() - 4usize];
};
impl _VAEncFEIMBCodeH264__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn sub_mb_shapes(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sub_mb_shapes(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_mb_pred_modes(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_sub_mb_pred_modes(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved7(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved7(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l0_0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l0_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l0_1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l0_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l0_2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l0_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l0_3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l0_3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l1_0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l1_0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l1_1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(72usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l1_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(72usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l1_2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l1_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_idx_l1_3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(88usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_idx_l1_3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(88usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sub_mb_shapes: u32,
        sub_mb_pred_modes: u32,
        reserved7: u32,
        ref_idx_l0_0: u32,
        ref_idx_l0_1: u32,
        ref_idx_l0_2: u32,
        ref_idx_l0_3: u32,
        ref_idx_l1_0: u32,
        ref_idx_l1_1: u32,
        ref_idx_l1_2: u32,
        ref_idx_l1_3: u32,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let sub_mb_shapes: u32 = unsafe { ::std::mem::transmute(sub_mb_shapes) };
            sub_mb_shapes as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let sub_mb_pred_modes: u32 = unsafe { ::std::mem::transmute(sub_mb_pred_modes) };
            sub_mb_pred_modes as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let reserved7: u32 = unsafe { ::std::mem::transmute(reserved7) };
            reserved7 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let ref_idx_l0_0: u32 = unsafe { ::std::mem::transmute(ref_idx_l0_0) };
            ref_idx_l0_0 as u64
        });
        __bindgen_bitfield_unit.set(40usize, 8u8, {
            let ref_idx_l0_1: u32 = unsafe { ::std::mem::transmute(ref_idx_l0_1) };
            ref_idx_l0_1 as u64
        });
        __bindgen_bitfield_unit.set(48usize, 8u8, {
            let ref_idx_l0_2: u32 = unsafe { ::std::mem::transmute(ref_idx_l0_2) };
            ref_idx_l0_2 as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let ref_idx_l0_3: u32 = unsafe { ::std::mem::transmute(ref_idx_l0_3) };
            ref_idx_l0_3 as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let ref_idx_l1_0: u32 = unsafe { ::std::mem::transmute(ref_idx_l1_0) };
            ref_idx_l1_0 as u64
        });
        __bindgen_bitfield_unit.set(72usize, 8u8, {
            let ref_idx_l1_1: u32 = unsafe { ::std::mem::transmute(ref_idx_l1_1) };
            ref_idx_l1_1 as u64
        });
        __bindgen_bitfield_unit.set(80usize, 8u8, {
            let ref_idx_l1_2: u32 = unsafe { ::std::mem::transmute(ref_idx_l1_2) };
            ref_idx_l1_2 as u64
        });
        __bindgen_bitfield_unit.set(88usize, 8u8, {
            let ref_idx_l1_3: u32 = unsafe { ::std::mem::transmute(ref_idx_l1_3) };
            ref_idx_l1_3 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMBCodeH264__bindgen_ty_1"]
        [::std::mem::size_of::<_VAEncFEIMBCodeH264__bindgen_ty_1>() - 12usize];
    ["Alignment of _VAEncFEIMBCodeH264__bindgen_ty_1"]
        [::std::mem::align_of::<_VAEncFEIMBCodeH264__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VAEncFEIMBCodeH264__bindgen_ty_1::intra_mb"]
        [::std::mem::offset_of!(_VAEncFEIMBCodeH264__bindgen_ty_1, intra_mb) - 0usize];
    ["Offset of field: _VAEncFEIMBCodeH264__bindgen_ty_1::inter_mb"]
        [::std::mem::offset_of!(_VAEncFEIMBCodeH264__bindgen_ty_1, inter_mb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIMBCodeH264"][::std::mem::size_of::<_VAEncFEIMBCodeH264>() - 64usize];
    ["Alignment of _VAEncFEIMBCodeH264"][::std::mem::align_of::<_VAEncFEIMBCodeH264>() - 4usize];
    ["Offset of field: _VAEncFEIMBCodeH264::reserved0"]
        [::std::mem::offset_of!(_VAEncFEIMBCodeH264, reserved0) - 0usize];
    ["Offset of field: _VAEncFEIMBCodeH264::mb_mode"]
        [::std::mem::offset_of!(_VAEncFEIMBCodeH264, mb_mode) - 28usize];
    ["Offset of field: _VAEncFEIMBCodeH264::reserved9"]
        [::std::mem::offset_of!(_VAEncFEIMBCodeH264, reserved9) - 44usize];
    ["Offset of field: _VAEncFEIMBCodeH264::reserved10"]
        [::std::mem::offset_of!(_VAEncFEIMBCodeH264, reserved10) - 60usize];
};
impl _VAEncFEIMBCodeH264 {
    #[inline]
    pub fn inter_mb_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_inter_mb_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_skip_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_skip_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_mb_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_intra_mb_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn field_mb_polarity_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_mb_polarity_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_type(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_mb_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_mb_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_mb_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn field_mb_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_mb_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform8x8_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform8x8_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dc_block_coded_cr_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dc_block_coded_cr_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dc_block_coded_cb_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dc_block_coded_cb_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dc_block_coded_y_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dc_block_coded_y_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved4(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved4(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn horz_origin(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_horz_origin(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn vert_origin(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_vert_origin(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn cbp_y(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_cbp_y(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn cbp_cb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_cbp_cb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn cbp_cr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_cbp_cr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn qp_prime_y(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_qp_prime_y(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved5(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(104usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set_reserved5(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(104usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_skip_conv_disable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(121usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_skip_conv_disable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(121usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_last_mb(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(122usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_last_mb(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(122usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_coefficient_clamp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(123usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_coefficient_clamp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(123usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct8x8_pattern(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(124usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_direct8x8_pattern(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(124usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        inter_mb_mode: u32,
        mb_skip_flag: u32,
        reserved1: u32,
        intra_mb_mode: u32,
        reserved2: u32,
        field_mb_polarity_flag: u32,
        mb_type: u32,
        intra_mb_flag: u32,
        field_mb_flag: u32,
        transform8x8_flag: u32,
        reserved3: u32,
        dc_block_coded_cr_flag: u32,
        dc_block_coded_cb_flag: u32,
        dc_block_coded_y_flag: u32,
        reserved4: u32,
        horz_origin: u32,
        vert_origin: u32,
        cbp_y: u32,
        cbp_cb: u32,
        cbp_cr: u32,
        qp_prime_y: u32,
        reserved5: u32,
        mb_skip_conv_disable: u32,
        is_last_mb: u32,
        enable_coefficient_clamp: u32,
        direct8x8_pattern: u32,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let inter_mb_mode: u32 = unsafe { ::std::mem::transmute(inter_mb_mode) };
            inter_mb_mode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mb_skip_flag: u32 = unsafe { ::std::mem::transmute(mb_skip_flag) };
            mb_skip_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let intra_mb_mode: u32 = unsafe { ::std::mem::transmute(intra_mb_mode) };
            intra_mb_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let reserved2: u32 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let field_mb_polarity_flag: u32 =
                unsafe { ::std::mem::transmute(field_mb_polarity_flag) };
            field_mb_polarity_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let mb_type: u32 = unsafe { ::std::mem::transmute(mb_type) };
            mb_type as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let intra_mb_flag: u32 = unsafe { ::std::mem::transmute(intra_mb_flag) };
            intra_mb_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let field_mb_flag: u32 = unsafe { ::std::mem::transmute(field_mb_flag) };
            field_mb_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let transform8x8_flag: u32 = unsafe { ::std::mem::transmute(transform8x8_flag) };
            transform8x8_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reserved3: u32 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let dc_block_coded_cr_flag: u32 =
                unsafe { ::std::mem::transmute(dc_block_coded_cr_flag) };
            dc_block_coded_cr_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let dc_block_coded_cb_flag: u32 =
                unsafe { ::std::mem::transmute(dc_block_coded_cb_flag) };
            dc_block_coded_cb_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let dc_block_coded_y_flag: u32 =
                unsafe { ::std::mem::transmute(dc_block_coded_y_flag) };
            dc_block_coded_y_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let reserved4: u32 = unsafe { ::std::mem::transmute(reserved4) };
            reserved4 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 8u8, {
            let horz_origin: u32 = unsafe { ::std::mem::transmute(horz_origin) };
            horz_origin as u64
        });
        __bindgen_bitfield_unit.set(40usize, 8u8, {
            let vert_origin: u32 = unsafe { ::std::mem::transmute(vert_origin) };
            vert_origin as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let cbp_y: u32 = unsafe { ::std::mem::transmute(cbp_y) };
            cbp_y as u64
        });
        __bindgen_bitfield_unit.set(64usize, 16u8, {
            let cbp_cb: u32 = unsafe { ::std::mem::transmute(cbp_cb) };
            cbp_cb as u64
        });
        __bindgen_bitfield_unit.set(80usize, 16u8, {
            let cbp_cr: u32 = unsafe { ::std::mem::transmute(cbp_cr) };
            cbp_cr as u64
        });
        __bindgen_bitfield_unit.set(96usize, 8u8, {
            let qp_prime_y: u32 = unsafe { ::std::mem::transmute(qp_prime_y) };
            qp_prime_y as u64
        });
        __bindgen_bitfield_unit.set(104usize, 17u8, {
            let reserved5: u32 = unsafe { ::std::mem::transmute(reserved5) };
            reserved5 as u64
        });
        __bindgen_bitfield_unit.set(121usize, 1u8, {
            let mb_skip_conv_disable: u32 = unsafe { ::std::mem::transmute(mb_skip_conv_disable) };
            mb_skip_conv_disable as u64
        });
        __bindgen_bitfield_unit.set(122usize, 1u8, {
            let is_last_mb: u32 = unsafe { ::std::mem::transmute(is_last_mb) };
            is_last_mb as u64
        });
        __bindgen_bitfield_unit.set(123usize, 1u8, {
            let enable_coefficient_clamp: u32 =
                unsafe { ::std::mem::transmute(enable_coefficient_clamp) };
            enable_coefficient_clamp as u64
        });
        __bindgen_bitfield_unit.set(124usize, 4u8, {
            let direct8x8_pattern: u32 = unsafe { ::std::mem::transmute(direct8x8_pattern) };
            direct8x8_pattern as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn reserved8(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved8(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn target_size_in_word(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_target_size_in_word(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn max_size_in_word(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_max_size_in_word(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        reserved8: u32,
        target_size_in_word: u32,
        max_size_in_word: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let reserved8: u32 = unsafe { ::std::mem::transmute(reserved8) };
            reserved8 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let target_size_in_word: u32 = unsafe { ::std::mem::transmute(target_size_in_word) };
            target_size_in_word as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let max_size_in_word: u32 = unsafe { ::std::mem::transmute(max_size_in_word) };
            max_size_in_word as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAEncFEIMBCodeH264 = _VAEncFEIMBCodeH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAEncFEIDistortionH264 {
    pub inter_distortion: [u16; 16usize],
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub reserved1: [u32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAEncFEIDistortionH264"][::std::mem::size_of::<_VAEncFEIDistortionH264>() - 48usize];
    ["Alignment of _VAEncFEIDistortionH264"]
        [::std::mem::align_of::<_VAEncFEIDistortionH264>() - 4usize];
    ["Offset of field: _VAEncFEIDistortionH264::inter_distortion"]
        [::std::mem::offset_of!(_VAEncFEIDistortionH264, inter_distortion) - 0usize];
    ["Offset of field: _VAEncFEIDistortionH264::reserved1"]
        [::std::mem::offset_of!(_VAEncFEIDistortionH264, reserved1) - 40usize];
};
impl _VAEncFEIDistortionH264 {
    #[inline]
    pub fn best_inter_distortion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_best_inter_distortion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn best_intra_distortion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_best_intra_distortion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn colocated_mb_distortion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_colocated_mb_distortion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        best_inter_distortion: u32,
        best_intra_distortion: u32,
        colocated_mb_distortion: u32,
        reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let best_inter_distortion: u32 =
                unsafe { ::std::mem::transmute(best_inter_distortion) };
            best_inter_distortion as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let best_intra_distortion: u32 =
                unsafe { ::std::mem::transmute(best_intra_distortion) };
            best_intra_distortion as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let colocated_mb_distortion: u32 =
                unsafe { ::std::mem::transmute(colocated_mb_distortion) };
            colocated_mb_distortion as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAEncFEIDistortionH264 = _VAEncFEIDistortionH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAStatsStatisticsParameterH264 {
    pub stats_params: VAStatsStatisticsParameter,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
    pub reserved4: [u32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAStatsStatisticsParameterH264"]
        [::std::mem::size_of::<_VAStatsStatisticsParameterH264>() - 96usize];
    ["Alignment of _VAStatsStatisticsParameterH264"]
        [::std::mem::align_of::<_VAStatsStatisticsParameterH264>() - 8usize];
    ["Offset of field: _VAStatsStatisticsParameterH264::stats_params"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameterH264, stats_params) - 0usize];
    ["Offset of field: _VAStatsStatisticsParameterH264::reserved4"]
        [::std::mem::offset_of!(_VAStatsStatisticsParameterH264, reserved4) - 88usize];
};
impl _VAStatsStatisticsParameterH264 {
    #[inline]
    pub fn frame_qp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_frame_qp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn len_sp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_len_sp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn search_path(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_search_path(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_mb_part_mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_sub_mb_part_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_pel_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pel_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn inter_sad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_inter_sad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_sad(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_intra_sad(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn adaptive_search(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(45usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_adaptive_search(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(45usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mv_predictor_ctrl(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(46usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_mv_predictor_ctrl(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(46usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_qp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_qp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ft_enable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(50usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ft_enable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(50usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_part_mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(51usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_intra_part_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(51usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_width(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ref_height(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(72usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ref_height(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(72usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn search_window(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_search_window(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(84usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(84usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_mv_output(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_mv_output(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn disable_statistics_output(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(97usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_statistics_output(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(97usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn enable_8x8_statistics(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(98usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_8x8_statistics(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(98usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(99usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(99usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frame_qp: u32,
        len_sp: u32,
        search_path: u32,
        reserved0: u32,
        sub_mb_part_mask: u32,
        sub_pel_mode: u32,
        inter_sad: u32,
        intra_sad: u32,
        adaptive_search: u32,
        mv_predictor_ctrl: u32,
        mb_qp: u32,
        ft_enable: u32,
        intra_part_mask: u32,
        reserved1: u32,
        ref_width: u32,
        ref_height: u32,
        search_window: u32,
        reserved2: u32,
        disable_mv_output: u32,
        disable_statistics_output: u32,
        enable_8x8_statistics: u32,
        reserved3: u32,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let frame_qp: u32 = unsafe { ::std::mem::transmute(frame_qp) };
            frame_qp as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let len_sp: u32 = unsafe { ::std::mem::transmute(len_sp) };
            len_sp as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let search_path: u32 = unsafe { ::std::mem::transmute(search_path) };
            search_path as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 7u8, {
            let sub_mb_part_mask: u32 = unsafe { ::std::mem::transmute(sub_mb_part_mask) };
            sub_mb_part_mask as u64
        });
        __bindgen_bitfield_unit.set(39usize, 2u8, {
            let sub_pel_mode: u32 = unsafe { ::std::mem::transmute(sub_pel_mode) };
            sub_pel_mode as u64
        });
        __bindgen_bitfield_unit.set(41usize, 2u8, {
            let inter_sad: u32 = unsafe { ::std::mem::transmute(inter_sad) };
            inter_sad as u64
        });
        __bindgen_bitfield_unit.set(43usize, 2u8, {
            let intra_sad: u32 = unsafe { ::std::mem::transmute(intra_sad) };
            intra_sad as u64
        });
        __bindgen_bitfield_unit.set(45usize, 1u8, {
            let adaptive_search: u32 = unsafe { ::std::mem::transmute(adaptive_search) };
            adaptive_search as u64
        });
        __bindgen_bitfield_unit.set(46usize, 3u8, {
            let mv_predictor_ctrl: u32 = unsafe { ::std::mem::transmute(mv_predictor_ctrl) };
            mv_predictor_ctrl as u64
        });
        __bindgen_bitfield_unit.set(49usize, 1u8, {
            let mb_qp: u32 = unsafe { ::std::mem::transmute(mb_qp) };
            mb_qp as u64
        });
        __bindgen_bitfield_unit.set(50usize, 1u8, {
            let ft_enable: u32 = unsafe { ::std::mem::transmute(ft_enable) };
            ft_enable as u64
        });
        __bindgen_bitfield_unit.set(51usize, 5u8, {
            let intra_part_mask: u32 = unsafe { ::std::mem::transmute(intra_part_mask) };
            intra_part_mask as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let ref_width: u32 = unsafe { ::std::mem::transmute(ref_width) };
            ref_width as u64
        });
        __bindgen_bitfield_unit.set(72usize, 8u8, {
            let ref_height: u32 = unsafe { ::std::mem::transmute(ref_height) };
            ref_height as u64
        });
        __bindgen_bitfield_unit.set(80usize, 4u8, {
            let search_window: u32 = unsafe { ::std::mem::transmute(search_window) };
            search_window as u64
        });
        __bindgen_bitfield_unit.set(84usize, 12u8, {
            let reserved2: u32 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(96usize, 1u8, {
            let disable_mv_output: u32 = unsafe { ::std::mem::transmute(disable_mv_output) };
            disable_mv_output as u64
        });
        __bindgen_bitfield_unit.set(97usize, 1u8, {
            let disable_statistics_output: u32 =
                unsafe { ::std::mem::transmute(disable_statistics_output) };
            disable_statistics_output as u64
        });
        __bindgen_bitfield_unit.set(98usize, 1u8, {
            let enable_8x8_statistics: u32 =
                unsafe { ::std::mem::transmute(enable_8x8_statistics) };
            enable_8x8_statistics as u64
        });
        __bindgen_bitfield_unit.set(99usize, 29u8, {
            let reserved3: u32 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAStatsStatisticsParameterH264 = _VAStatsStatisticsParameterH264;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAStatsStatisticsH264 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
    pub sum_coef: u32,
    pub _bitfield_align_2: [u32; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub variance_16x16: u32,
    pub variance_8x8: [u32; 4usize],
    pub pixel_average_16x16: u32,
    pub pixel_average_8x8: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAStatsStatisticsH264"][::std::mem::size_of::<_VAStatsStatisticsH264>() - 64usize];
    ["Alignment of _VAStatsStatisticsH264"]
        [::std::mem::align_of::<_VAStatsStatisticsH264>() - 4usize];
    ["Offset of field: _VAStatsStatisticsH264::sum_coef"]
        [::std::mem::offset_of!(_VAStatsStatisticsH264, sum_coef) - 16usize];
    ["Offset of field: _VAStatsStatisticsH264::variance_16x16"]
        [::std::mem::offset_of!(_VAStatsStatisticsH264, variance_16x16) - 24usize];
    ["Offset of field: _VAStatsStatisticsH264::variance_8x8"]
        [::std::mem::offset_of!(_VAStatsStatisticsH264, variance_8x8) - 28usize];
    ["Offset of field: _VAStatsStatisticsH264::pixel_average_16x16"]
        [::std::mem::offset_of!(_VAStatsStatisticsH264, pixel_average_16x16) - 44usize];
    ["Offset of field: _VAStatsStatisticsH264::pixel_average_8x8"]
        [::std::mem::offset_of!(_VAStatsStatisticsH264, pixel_average_8x8) - 48usize];
};
impl _VAStatsStatisticsH264 {
    #[inline]
    pub fn best_inter_distortion0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_best_inter_distortion0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn inter_mode0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_inter_mode0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn best_inter_distortion1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_best_inter_distortion1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn inter_mode1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_inter_mode1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn best_intra_distortion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_best_intra_distortion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(80usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_intra_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(80usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn num_non_zero_coef(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(96usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_num_non_zero_coef(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(96usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(112usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(112usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        best_inter_distortion0: u32,
        inter_mode0: u32,
        best_inter_distortion1: u32,
        inter_mode1: u32,
        best_intra_distortion: u32,
        intra_mode: u32,
        num_non_zero_coef: u32,
        reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let best_inter_distortion0: u32 =
                unsafe { ::std::mem::transmute(best_inter_distortion0) };
            best_inter_distortion0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let inter_mode0: u32 = unsafe { ::std::mem::transmute(inter_mode0) };
            inter_mode0 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let best_inter_distortion1: u32 =
                unsafe { ::std::mem::transmute(best_inter_distortion1) };
            best_inter_distortion1 as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let inter_mode1: u32 = unsafe { ::std::mem::transmute(inter_mode1) };
            inter_mode1 as u64
        });
        __bindgen_bitfield_unit.set(64usize, 16u8, {
            let best_intra_distortion: u32 =
                unsafe { ::std::mem::transmute(best_intra_distortion) };
            best_intra_distortion as u64
        });
        __bindgen_bitfield_unit.set(80usize, 16u8, {
            let intra_mode: u32 = unsafe { ::std::mem::transmute(intra_mode) };
            intra_mode as u64
        });
        __bindgen_bitfield_unit.set(96usize, 16u8, {
            let num_non_zero_coef: u32 = unsafe { ::std::mem::transmute(num_non_zero_coef) };
            num_non_zero_coef as u64
        });
        __bindgen_bitfield_unit.set(112usize, 16u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn mb_is_flat(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_is_flat(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(mb_is_flat: u32, reserved1: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mb_is_flat: u32 = unsafe { ::std::mem::transmute(mb_is_flat) };
            mb_is_flat as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VAStatsStatisticsH264 = _VAStatsStatisticsH264;
pub const VAProcFilterNone: _VAProcFilterType = 0;
pub const VAProcFilterNoiseReduction: _VAProcFilterType = 1;
pub const VAProcFilterDeinterlacing: _VAProcFilterType = 2;
pub const VAProcFilterSharpening: _VAProcFilterType = 3;
pub const VAProcFilterColorBalance: _VAProcFilterType = 4;
pub const VAProcFilterSkinToneEnhancement: _VAProcFilterType = 5;
pub const VAProcFilterTotalColorCorrection: _VAProcFilterType = 6;
pub const VAProcFilterHVSNoiseReduction: _VAProcFilterType = 7;
pub const VAProcFilterHighDynamicRangeToneMapping: _VAProcFilterType = 8;
pub const VAProcFilter3DLUT: _VAProcFilterType = 9;
pub const VAProcFilterCount: _VAProcFilterType = 10;
pub type _VAProcFilterType = ::std::os::raw::c_uint;
pub use self::_VAProcFilterType as VAProcFilterType;
pub const VAProcDeinterlacingNone: _VAProcDeinterlacingType = 0;
pub const VAProcDeinterlacingBob: _VAProcDeinterlacingType = 1;
pub const VAProcDeinterlacingWeave: _VAProcDeinterlacingType = 2;
pub const VAProcDeinterlacingMotionAdaptive: _VAProcDeinterlacingType = 3;
pub const VAProcDeinterlacingMotionCompensated: _VAProcDeinterlacingType = 4;
pub const VAProcDeinterlacingCount: _VAProcDeinterlacingType = 5;
pub type _VAProcDeinterlacingType = ::std::os::raw::c_uint;
pub use self::_VAProcDeinterlacingType as VAProcDeinterlacingType;
pub const VAProcColorBalanceNone: _VAProcColorBalanceType = 0;
pub const VAProcColorBalanceHue: _VAProcColorBalanceType = 1;
pub const VAProcColorBalanceSaturation: _VAProcColorBalanceType = 2;
pub const VAProcColorBalanceBrightness: _VAProcColorBalanceType = 3;
pub const VAProcColorBalanceContrast: _VAProcColorBalanceType = 4;
pub const VAProcColorBalanceAutoSaturation: _VAProcColorBalanceType = 5;
pub const VAProcColorBalanceAutoBrightness: _VAProcColorBalanceType = 6;
pub const VAProcColorBalanceAutoContrast: _VAProcColorBalanceType = 7;
pub const VAProcColorBalanceCount: _VAProcColorBalanceType = 8;
pub type _VAProcColorBalanceType = ::std::os::raw::c_uint;
pub use self::_VAProcColorBalanceType as VAProcColorBalanceType;
pub const VAProcColorStandardNone: _VAProcColorStandardType = 0;
pub const VAProcColorStandardBT601: _VAProcColorStandardType = 1;
pub const VAProcColorStandardBT709: _VAProcColorStandardType = 2;
pub const VAProcColorStandardBT470M: _VAProcColorStandardType = 3;
pub const VAProcColorStandardBT470BG: _VAProcColorStandardType = 4;
pub const VAProcColorStandardSMPTE170M: _VAProcColorStandardType = 5;
pub const VAProcColorStandardSMPTE240M: _VAProcColorStandardType = 6;
pub const VAProcColorStandardGenericFilm: _VAProcColorStandardType = 7;
pub const VAProcColorStandardSRGB: _VAProcColorStandardType = 8;
pub const VAProcColorStandardSTRGB: _VAProcColorStandardType = 9;
pub const VAProcColorStandardXVYCC601: _VAProcColorStandardType = 10;
pub const VAProcColorStandardXVYCC709: _VAProcColorStandardType = 11;
pub const VAProcColorStandardBT2020: _VAProcColorStandardType = 12;
pub const VAProcColorStandardExplicit: _VAProcColorStandardType = 13;
pub const VAProcColorStandardCount: _VAProcColorStandardType = 14;
pub type _VAProcColorStandardType = ::std::os::raw::c_uint;
pub use self::_VAProcColorStandardType as VAProcColorStandardType;
pub const VAProcTotalColorCorrectionNone: _VAProcTotalColorCorrectionType = 0;
pub const VAProcTotalColorCorrectionRed: _VAProcTotalColorCorrectionType = 1;
pub const VAProcTotalColorCorrectionGreen: _VAProcTotalColorCorrectionType = 2;
pub const VAProcTotalColorCorrectionBlue: _VAProcTotalColorCorrectionType = 3;
pub const VAProcTotalColorCorrectionCyan: _VAProcTotalColorCorrectionType = 4;
pub const VAProcTotalColorCorrectionMagenta: _VAProcTotalColorCorrectionType = 5;
pub const VAProcTotalColorCorrectionYellow: _VAProcTotalColorCorrectionType = 6;
pub const VAProcTotalColorCorrectionCount: _VAProcTotalColorCorrectionType = 7;
pub type _VAProcTotalColorCorrectionType = ::std::os::raw::c_uint;
pub use self::_VAProcTotalColorCorrectionType as VAProcTotalColorCorrectionType;
pub const VAProcHighDynamicRangeMetadataNone: _VAProcHighDynamicRangeMetadataType = 0;
pub const VAProcHighDynamicRangeMetadataHDR10: _VAProcHighDynamicRangeMetadataType = 1;
pub const VAProcHighDynamicRangeMetadataTypeCount: _VAProcHighDynamicRangeMetadataType = 2;
pub type _VAProcHighDynamicRangeMetadataType = ::std::os::raw::c_uint;
pub use self::_VAProcHighDynamicRangeMetadataType as VAProcHighDynamicRangeMetadataType;
pub const VAProcDefaultMode: _VAProcMode = 0;
pub const VAProcPowerSavingMode: _VAProcMode = 1;
pub const VAProcPerformanceMode: _VAProcMode = 2;
pub type _VAProcMode = ::std::os::raw::c_uint;
pub use self::_VAProcMode as VAProcMode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VABlendState {
    pub flags: ::std::os::raw::c_uint,
    pub global_alpha: f32,
    pub min_luma: f32,
    pub max_luma: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VABlendState"][::std::mem::size_of::<_VABlendState>() - 16usize];
    ["Alignment of _VABlendState"][::std::mem::align_of::<_VABlendState>() - 4usize];
    ["Offset of field: _VABlendState::flags"]
        [::std::mem::offset_of!(_VABlendState, flags) - 0usize];
    ["Offset of field: _VABlendState::global_alpha"]
        [::std::mem::offset_of!(_VABlendState, global_alpha) - 4usize];
    ["Offset of field: _VABlendState::min_luma"]
        [::std::mem::offset_of!(_VABlendState, min_luma) - 8usize];
    ["Offset of field: _VABlendState::max_luma"]
        [::std::mem::offset_of!(_VABlendState, max_luma) - 12usize];
};
pub type VABlendState = _VABlendState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcPipelineCaps {
    pub pipeline_flags: u32,
    pub filter_flags: u32,
    pub num_forward_references: u32,
    pub num_backward_references: u32,
    pub input_color_standards: *mut VAProcColorStandardType,
    pub num_input_color_standards: u32,
    pub output_color_standards: *mut VAProcColorStandardType,
    pub num_output_color_standards: u32,
    pub rotation_flags: u32,
    pub blend_flags: u32,
    pub mirror_flags: u32,
    pub num_additional_outputs: u32,
    pub num_input_pixel_formats: u32,
    pub input_pixel_format: *mut u32,
    pub num_output_pixel_formats: u32,
    pub output_pixel_format: *mut u32,
    pub max_input_width: u32,
    pub max_input_height: u32,
    pub min_input_width: u32,
    pub min_input_height: u32,
    pub max_output_width: u32,
    pub max_output_height: u32,
    pub min_output_width: u32,
    pub min_output_height: u32,
    pub va_reserved: [u32; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcPipelineCaps"][::std::mem::size_of::<_VAProcPipelineCaps>() - 176usize];
    ["Alignment of _VAProcPipelineCaps"][::std::mem::align_of::<_VAProcPipelineCaps>() - 8usize];
    ["Offset of field: _VAProcPipelineCaps::pipeline_flags"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, pipeline_flags) - 0usize];
    ["Offset of field: _VAProcPipelineCaps::filter_flags"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, filter_flags) - 4usize];
    ["Offset of field: _VAProcPipelineCaps::num_forward_references"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, num_forward_references) - 8usize];
    ["Offset of field: _VAProcPipelineCaps::num_backward_references"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, num_backward_references) - 12usize];
    ["Offset of field: _VAProcPipelineCaps::input_color_standards"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, input_color_standards) - 16usize];
    ["Offset of field: _VAProcPipelineCaps::num_input_color_standards"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, num_input_color_standards) - 24usize];
    ["Offset of field: _VAProcPipelineCaps::output_color_standards"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, output_color_standards) - 32usize];
    ["Offset of field: _VAProcPipelineCaps::num_output_color_standards"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, num_output_color_standards) - 40usize];
    ["Offset of field: _VAProcPipelineCaps::rotation_flags"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, rotation_flags) - 44usize];
    ["Offset of field: _VAProcPipelineCaps::blend_flags"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, blend_flags) - 48usize];
    ["Offset of field: _VAProcPipelineCaps::mirror_flags"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, mirror_flags) - 52usize];
    ["Offset of field: _VAProcPipelineCaps::num_additional_outputs"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, num_additional_outputs) - 56usize];
    ["Offset of field: _VAProcPipelineCaps::num_input_pixel_formats"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, num_input_pixel_formats) - 60usize];
    ["Offset of field: _VAProcPipelineCaps::input_pixel_format"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, input_pixel_format) - 64usize];
    ["Offset of field: _VAProcPipelineCaps::num_output_pixel_formats"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, num_output_pixel_formats) - 72usize];
    ["Offset of field: _VAProcPipelineCaps::output_pixel_format"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, output_pixel_format) - 80usize];
    ["Offset of field: _VAProcPipelineCaps::max_input_width"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, max_input_width) - 88usize];
    ["Offset of field: _VAProcPipelineCaps::max_input_height"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, max_input_height) - 92usize];
    ["Offset of field: _VAProcPipelineCaps::min_input_width"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, min_input_width) - 96usize];
    ["Offset of field: _VAProcPipelineCaps::min_input_height"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, min_input_height) - 100usize];
    ["Offset of field: _VAProcPipelineCaps::max_output_width"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, max_output_width) - 104usize];
    ["Offset of field: _VAProcPipelineCaps::max_output_height"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, max_output_height) - 108usize];
    ["Offset of field: _VAProcPipelineCaps::min_output_width"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, min_output_width) - 112usize];
    ["Offset of field: _VAProcPipelineCaps::min_output_height"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, min_output_height) - 116usize];
    ["Offset of field: _VAProcPipelineCaps::va_reserved"]
        [::std::mem::offset_of!(_VAProcPipelineCaps, va_reserved) - 120usize];
};
pub type VAProcPipelineCaps = _VAProcPipelineCaps;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterValueRange {
    pub min_value: f32,
    pub max_value: f32,
    pub default_value: f32,
    pub step: f32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterValueRange"][::std::mem::size_of::<_VAProcFilterValueRange>() - 32usize];
    ["Alignment of _VAProcFilterValueRange"]
        [::std::mem::align_of::<_VAProcFilterValueRange>() - 4usize];
    ["Offset of field: _VAProcFilterValueRange::min_value"]
        [::std::mem::offset_of!(_VAProcFilterValueRange, min_value) - 0usize];
    ["Offset of field: _VAProcFilterValueRange::max_value"]
        [::std::mem::offset_of!(_VAProcFilterValueRange, max_value) - 4usize];
    ["Offset of field: _VAProcFilterValueRange::default_value"]
        [::std::mem::offset_of!(_VAProcFilterValueRange, default_value) - 8usize];
    ["Offset of field: _VAProcFilterValueRange::step"]
        [::std::mem::offset_of!(_VAProcFilterValueRange, step) - 12usize];
    ["Offset of field: _VAProcFilterValueRange::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterValueRange, va_reserved) - 16usize];
};
pub type VAProcFilterValueRange = _VAProcFilterValueRange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcColorProperties {
    pub chroma_sample_location: u8,
    pub color_range: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coefficients: u8,
    pub reserved: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcColorProperties"][::std::mem::size_of::<_VAProcColorProperties>() - 8usize];
    ["Alignment of _VAProcColorProperties"]
        [::std::mem::align_of::<_VAProcColorProperties>() - 1usize];
    ["Offset of field: _VAProcColorProperties::chroma_sample_location"]
        [::std::mem::offset_of!(_VAProcColorProperties, chroma_sample_location) - 0usize];
    ["Offset of field: _VAProcColorProperties::color_range"]
        [::std::mem::offset_of!(_VAProcColorProperties, color_range) - 1usize];
    ["Offset of field: _VAProcColorProperties::colour_primaries"]
        [::std::mem::offset_of!(_VAProcColorProperties, colour_primaries) - 2usize];
    ["Offset of field: _VAProcColorProperties::transfer_characteristics"]
        [::std::mem::offset_of!(_VAProcColorProperties, transfer_characteristics) - 3usize];
    ["Offset of field: _VAProcColorProperties::matrix_coefficients"]
        [::std::mem::offset_of!(_VAProcColorProperties, matrix_coefficients) - 4usize];
    ["Offset of field: _VAProcColorProperties::reserved"]
        [::std::mem::offset_of!(_VAProcColorProperties, reserved) - 5usize];
};
pub type VAProcColorProperties = _VAProcColorProperties;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAHdrMetaDataHDR10 {
    pub display_primaries_x: [u16; 3usize],
    pub display_primaries_y: [u16; 3usize],
    pub white_point_x: u16,
    pub white_point_y: u16,
    pub max_display_mastering_luminance: u32,
    pub min_display_mastering_luminance: u32,
    pub max_content_light_level: u16,
    pub max_pic_average_light_level: u16,
    pub reserved: [u16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAHdrMetaDataHDR10"][::std::mem::size_of::<_VAHdrMetaDataHDR10>() - 60usize];
    ["Alignment of _VAHdrMetaDataHDR10"][::std::mem::align_of::<_VAHdrMetaDataHDR10>() - 4usize];
    ["Offset of field: _VAHdrMetaDataHDR10::display_primaries_x"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, display_primaries_x) - 0usize];
    ["Offset of field: _VAHdrMetaDataHDR10::display_primaries_y"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, display_primaries_y) - 6usize];
    ["Offset of field: _VAHdrMetaDataHDR10::white_point_x"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, white_point_x) - 12usize];
    ["Offset of field: _VAHdrMetaDataHDR10::white_point_y"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, white_point_y) - 14usize];
    ["Offset of field: _VAHdrMetaDataHDR10::max_display_mastering_luminance"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, max_display_mastering_luminance) - 16usize];
    ["Offset of field: _VAHdrMetaDataHDR10::min_display_mastering_luminance"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, min_display_mastering_luminance) - 20usize];
    ["Offset of field: _VAHdrMetaDataHDR10::max_content_light_level"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, max_content_light_level) - 24usize];
    ["Offset of field: _VAHdrMetaDataHDR10::max_pic_average_light_level"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, max_pic_average_light_level) - 26usize];
    ["Offset of field: _VAHdrMetaDataHDR10::reserved"]
        [::std::mem::offset_of!(_VAHdrMetaDataHDR10, reserved) - 28usize];
};
pub type VAHdrMetaDataHDR10 = _VAHdrMetaDataHDR10;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterCapHighDynamicRange {
    pub metadata_type: VAProcHighDynamicRangeMetadataType,
    pub caps_flag: u16,
    pub va_reserved: [u16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterCapHighDynamicRange"]
        [::std::mem::size_of::<_VAProcFilterCapHighDynamicRange>() - 40usize];
    ["Alignment of _VAProcFilterCapHighDynamicRange"]
        [::std::mem::align_of::<_VAProcFilterCapHighDynamicRange>() - 4usize];
    ["Offset of field: _VAProcFilterCapHighDynamicRange::metadata_type"]
        [::std::mem::offset_of!(_VAProcFilterCapHighDynamicRange, metadata_type) - 0usize];
    ["Offset of field: _VAProcFilterCapHighDynamicRange::caps_flag"]
        [::std::mem::offset_of!(_VAProcFilterCapHighDynamicRange, caps_flag) - 4usize];
    ["Offset of field: _VAProcFilterCapHighDynamicRange::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterCapHighDynamicRange, va_reserved) - 6usize];
};
pub type VAProcFilterCapHighDynamicRange = _VAProcFilterCapHighDynamicRange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAHdrMetaData {
    pub metadata_type: VAProcHighDynamicRangeMetadataType,
    pub metadata: *mut ::std::os::raw::c_void,
    pub metadata_size: u32,
    pub reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAHdrMetaData"][::std::mem::size_of::<_VAHdrMetaData>() - 40usize];
    ["Alignment of _VAHdrMetaData"][::std::mem::align_of::<_VAHdrMetaData>() - 8usize];
    ["Offset of field: _VAHdrMetaData::metadata_type"]
        [::std::mem::offset_of!(_VAHdrMetaData, metadata_type) - 0usize];
    ["Offset of field: _VAHdrMetaData::metadata"]
        [::std::mem::offset_of!(_VAHdrMetaData, metadata) - 8usize];
    ["Offset of field: _VAHdrMetaData::metadata_size"]
        [::std::mem::offset_of!(_VAHdrMetaData, metadata_size) - 16usize];
    ["Offset of field: _VAHdrMetaData::reserved"]
        [::std::mem::offset_of!(_VAHdrMetaData, reserved) - 20usize];
};
pub type VAHdrMetaData = _VAHdrMetaData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcPipelineParameterBuffer {
    pub surface: VASurfaceID,
    pub surface_region: *const VARectangle,
    pub surface_color_standard: VAProcColorStandardType,
    pub output_region: *const VARectangle,
    pub output_background_color: u32,
    pub output_color_standard: VAProcColorStandardType,
    pub pipeline_flags: u32,
    pub filter_flags: u32,
    pub filters: *mut VABufferID,
    pub num_filters: u32,
    pub forward_references: *mut VASurfaceID,
    pub num_forward_references: u32,
    pub backward_references: *mut VASurfaceID,
    pub num_backward_references: u32,
    pub rotation_state: u32,
    pub blend_state: *const VABlendState,
    pub mirror_state: u32,
    pub additional_outputs: *mut VASurfaceID,
    pub num_additional_outputs: u32,
    pub input_surface_flag: u32,
    pub output_surface_flag: u32,
    pub input_color_properties: VAProcColorProperties,
    pub output_color_properties: VAProcColorProperties,
    pub processing_mode: VAProcMode,
    pub output_hdr_metadata: *mut VAHdrMetaData,
    pub va_reserved: [u32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcPipelineParameterBuffer"]
        [::std::mem::size_of::<_VAProcPipelineParameterBuffer>() - 224usize];
    ["Alignment of _VAProcPipelineParameterBuffer"]
        [::std::mem::align_of::<_VAProcPipelineParameterBuffer>() - 8usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::surface"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, surface) - 0usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::surface_region"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, surface_region) - 8usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::surface_color_standard"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, surface_color_standard) - 16usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::output_region"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, output_region) - 24usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::output_background_color"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, output_background_color) - 32usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::output_color_standard"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, output_color_standard) - 36usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::pipeline_flags"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, pipeline_flags) - 40usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::filter_flags"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, filter_flags) - 44usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::filters"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, filters) - 48usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::num_filters"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, num_filters) - 56usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::forward_references"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, forward_references) - 64usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::num_forward_references"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, num_forward_references) - 72usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::backward_references"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, backward_references) - 80usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::num_backward_references"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, num_backward_references) - 88usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::rotation_state"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, rotation_state) - 92usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::blend_state"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, blend_state) - 96usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::mirror_state"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, mirror_state) - 104usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::additional_outputs"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, additional_outputs) - 112usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::num_additional_outputs"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, num_additional_outputs) - 120usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::input_surface_flag"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, input_surface_flag) - 124usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::output_surface_flag"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, output_surface_flag) - 128usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::input_color_properties"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, input_color_properties) - 132usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::output_color_properties"][::std::mem::offset_of!(
        _VAProcPipelineParameterBuffer,
        output_color_properties
    ) - 140usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::processing_mode"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, processing_mode) - 148usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::output_hdr_metadata"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, output_hdr_metadata) - 152usize];
    ["Offset of field: _VAProcPipelineParameterBuffer::va_reserved"]
        [::std::mem::offset_of!(_VAProcPipelineParameterBuffer, va_reserved) - 160usize];
};
pub type VAProcPipelineParameterBuffer = _VAProcPipelineParameterBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBufferBase {
    pub type_: VAProcFilterType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBufferBase"]
        [::std::mem::size_of::<_VAProcFilterParameterBufferBase>() - 4usize];
    ["Alignment of _VAProcFilterParameterBufferBase"]
        [::std::mem::align_of::<_VAProcFilterParameterBufferBase>() - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferBase::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferBase, type_) - 0usize];
};
pub type VAProcFilterParameterBufferBase = _VAProcFilterParameterBufferBase;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBuffer {
    pub type_: VAProcFilterType,
    pub value: f32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBuffer"]
        [::std::mem::size_of::<_VAProcFilterParameterBuffer>() - 24usize];
    ["Alignment of _VAProcFilterParameterBuffer"]
        [::std::mem::align_of::<_VAProcFilterParameterBuffer>() - 4usize];
    ["Offset of field: _VAProcFilterParameterBuffer::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer, type_) - 0usize];
    ["Offset of field: _VAProcFilterParameterBuffer::value"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer, value) - 4usize];
    ["Offset of field: _VAProcFilterParameterBuffer::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer, va_reserved) - 8usize];
};
pub type VAProcFilterParameterBuffer = _VAProcFilterParameterBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBufferDeinterlacing {
    pub type_: VAProcFilterType,
    pub algorithm: VAProcDeinterlacingType,
    pub flags: u32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBufferDeinterlacing"]
        [::std::mem::size_of::<_VAProcFilterParameterBufferDeinterlacing>() - 28usize];
    ["Alignment of _VAProcFilterParameterBufferDeinterlacing"]
        [::std::mem::align_of::<_VAProcFilterParameterBufferDeinterlacing>() - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferDeinterlacing::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferDeinterlacing, type_) - 0usize];
    ["Offset of field: _VAProcFilterParameterBufferDeinterlacing::algorithm"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferDeinterlacing, algorithm) - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferDeinterlacing::flags"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferDeinterlacing, flags) - 8usize];
    ["Offset of field: _VAProcFilterParameterBufferDeinterlacing::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferDeinterlacing, va_reserved) - 12usize];
};
pub type VAProcFilterParameterBufferDeinterlacing = _VAProcFilterParameterBufferDeinterlacing;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBufferColorBalance {
    pub type_: VAProcFilterType,
    pub attrib: VAProcColorBalanceType,
    pub value: f32,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBufferColorBalance"]
        [::std::mem::size_of::<_VAProcFilterParameterBufferColorBalance>() - 28usize];
    ["Alignment of _VAProcFilterParameterBufferColorBalance"]
        [::std::mem::align_of::<_VAProcFilterParameterBufferColorBalance>() - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferColorBalance::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferColorBalance, type_) - 0usize];
    ["Offset of field: _VAProcFilterParameterBufferColorBalance::attrib"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferColorBalance, attrib) - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferColorBalance::value"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferColorBalance, value) - 8usize];
    ["Offset of field: _VAProcFilterParameterBufferColorBalance::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferColorBalance, va_reserved) - 12usize];
};
pub type VAProcFilterParameterBufferColorBalance = _VAProcFilterParameterBufferColorBalance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBufferTotalColorCorrection {
    pub type_: VAProcFilterType,
    pub attrib: VAProcTotalColorCorrectionType,
    pub value: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBufferTotalColorCorrection"]
        [::std::mem::size_of::<_VAProcFilterParameterBufferTotalColorCorrection>() - 12usize];
    ["Alignment of _VAProcFilterParameterBufferTotalColorCorrection"]
        [::std::mem::align_of::<_VAProcFilterParameterBufferTotalColorCorrection>() - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferTotalColorCorrection::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferTotalColorCorrection, type_) - 0usize];
    ["Offset of field: _VAProcFilterParameterBufferTotalColorCorrection::attrib"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferTotalColorCorrection, attrib) - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferTotalColorCorrection::value"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferTotalColorCorrection, value) - 8usize];
};
pub type VAProcFilterParameterBufferTotalColorCorrection =
    _VAProcFilterParameterBufferTotalColorCorrection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBufferHVSNoiseReduction {
    pub type_: VAProcFilterType,
    pub qp: u16,
    pub strength: u16,
    pub mode: u16,
    pub va_reserved: [u16; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBufferHVSNoiseReduction"]
        [::std::mem::size_of::<_VAProcFilterParameterBufferHVSNoiseReduction>() - 40usize];
    ["Alignment of _VAProcFilterParameterBufferHVSNoiseReduction"]
        [::std::mem::align_of::<_VAProcFilterParameterBufferHVSNoiseReduction>() - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferHVSNoiseReduction::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferHVSNoiseReduction, type_) - 0usize];
    ["Offset of field: _VAProcFilterParameterBufferHVSNoiseReduction::qp"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferHVSNoiseReduction, qp) - 4usize];
    ["Offset of field: _VAProcFilterParameterBufferHVSNoiseReduction::strength"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferHVSNoiseReduction, strength) - 6usize];
    ["Offset of field: _VAProcFilterParameterBufferHVSNoiseReduction::mode"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferHVSNoiseReduction, mode) - 8usize];
    ["Offset of field: _VAProcFilterParameterBufferHVSNoiseReduction::va_reserved"][::std::mem::offset_of!(
        _VAProcFilterParameterBufferHVSNoiseReduction,
        va_reserved
    ) - 10usize];
};
pub type VAProcFilterParameterBufferHVSNoiseReduction =
    _VAProcFilterParameterBufferHVSNoiseReduction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBufferHDRToneMapping {
    pub type_: VAProcFilterType,
    pub data: VAHdrMetaData,
    pub va_reserved: [u32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBufferHDRToneMapping"]
        [::std::mem::size_of::<_VAProcFilterParameterBufferHDRToneMapping>() - 112usize];
    ["Alignment of _VAProcFilterParameterBufferHDRToneMapping"]
        [::std::mem::align_of::<_VAProcFilterParameterBufferHDRToneMapping>() - 8usize];
    ["Offset of field: _VAProcFilterParameterBufferHDRToneMapping::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferHDRToneMapping, type_) - 0usize];
    ["Offset of field: _VAProcFilterParameterBufferHDRToneMapping::data"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferHDRToneMapping, data) - 8usize];
    ["Offset of field: _VAProcFilterParameterBufferHDRToneMapping::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterParameterBufferHDRToneMapping, va_reserved) - 48usize];
};
pub type VAProcFilterParameterBufferHDRToneMapping = _VAProcFilterParameterBufferHDRToneMapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterParameterBuffer3DLUT {
    pub type_: VAProcFilterType,
    pub lut_surface: VASurfaceID,
    pub lut_size: u16,
    pub lut_stride: [u16; 3usize],
    pub bit_depth: u16,
    pub num_channel: u16,
    pub channel_mapping: u32,
    pub va_reserved: [u32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterParameterBuffer3DLUT"]
        [::std::mem::size_of::<_VAProcFilterParameterBuffer3DLUT>() - 88usize];
    ["Alignment of _VAProcFilterParameterBuffer3DLUT"]
        [::std::mem::align_of::<_VAProcFilterParameterBuffer3DLUT>() - 4usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::type_"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, type_) - 0usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::lut_surface"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, lut_surface) - 4usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::lut_size"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, lut_size) - 8usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::lut_stride"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, lut_stride) - 10usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::bit_depth"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, bit_depth) - 16usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::num_channel"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, num_channel) - 18usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::channel_mapping"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, channel_mapping) - 20usize];
    ["Offset of field: _VAProcFilterParameterBuffer3DLUT::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterParameterBuffer3DLUT, va_reserved) - 24usize];
};
pub type VAProcFilterParameterBuffer3DLUT = _VAProcFilterParameterBuffer3DLUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterCap3DLUT {
    pub lut_size: u16,
    pub lut_stride: [u16; 3usize],
    pub bit_depth: u16,
    pub num_channel: u16,
    pub channel_mapping: u32,
    pub va_reserved: [u32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterCap3DLUT"][::std::mem::size_of::<_VAProcFilterCap3DLUT>() - 80usize];
    ["Alignment of _VAProcFilterCap3DLUT"]
        [::std::mem::align_of::<_VAProcFilterCap3DLUT>() - 4usize];
    ["Offset of field: _VAProcFilterCap3DLUT::lut_size"]
        [::std::mem::offset_of!(_VAProcFilterCap3DLUT, lut_size) - 0usize];
    ["Offset of field: _VAProcFilterCap3DLUT::lut_stride"]
        [::std::mem::offset_of!(_VAProcFilterCap3DLUT, lut_stride) - 2usize];
    ["Offset of field: _VAProcFilterCap3DLUT::bit_depth"]
        [::std::mem::offset_of!(_VAProcFilterCap3DLUT, bit_depth) - 8usize];
    ["Offset of field: _VAProcFilterCap3DLUT::num_channel"]
        [::std::mem::offset_of!(_VAProcFilterCap3DLUT, num_channel) - 10usize];
    ["Offset of field: _VAProcFilterCap3DLUT::channel_mapping"]
        [::std::mem::offset_of!(_VAProcFilterCap3DLUT, channel_mapping) - 12usize];
    ["Offset of field: _VAProcFilterCap3DLUT::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterCap3DLUT, va_reserved) - 16usize];
};
pub type VAProcFilterCap3DLUT = _VAProcFilterCap3DLUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterCap {
    pub range: VAProcFilterValueRange,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterCap"][::std::mem::size_of::<_VAProcFilterCap>() - 48usize];
    ["Alignment of _VAProcFilterCap"][::std::mem::align_of::<_VAProcFilterCap>() - 4usize];
    ["Offset of field: _VAProcFilterCap::range"]
        [::std::mem::offset_of!(_VAProcFilterCap, range) - 0usize];
    ["Offset of field: _VAProcFilterCap::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterCap, va_reserved) - 32usize];
};
pub type VAProcFilterCap = _VAProcFilterCap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterCapDeinterlacing {
    pub type_: VAProcDeinterlacingType,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterCapDeinterlacing"]
        [::std::mem::size_of::<_VAProcFilterCapDeinterlacing>() - 20usize];
    ["Alignment of _VAProcFilterCapDeinterlacing"]
        [::std::mem::align_of::<_VAProcFilterCapDeinterlacing>() - 4usize];
    ["Offset of field: _VAProcFilterCapDeinterlacing::type_"]
        [::std::mem::offset_of!(_VAProcFilterCapDeinterlacing, type_) - 0usize];
    ["Offset of field: _VAProcFilterCapDeinterlacing::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterCapDeinterlacing, va_reserved) - 4usize];
};
pub type VAProcFilterCapDeinterlacing = _VAProcFilterCapDeinterlacing;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterCapColorBalance {
    pub type_: VAProcColorBalanceType,
    pub range: VAProcFilterValueRange,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterCapColorBalance"]
        [::std::mem::size_of::<_VAProcFilterCapColorBalance>() - 52usize];
    ["Alignment of _VAProcFilterCapColorBalance"]
        [::std::mem::align_of::<_VAProcFilterCapColorBalance>() - 4usize];
    ["Offset of field: _VAProcFilterCapColorBalance::type_"]
        [::std::mem::offset_of!(_VAProcFilterCapColorBalance, type_) - 0usize];
    ["Offset of field: _VAProcFilterCapColorBalance::range"]
        [::std::mem::offset_of!(_VAProcFilterCapColorBalance, range) - 4usize];
    ["Offset of field: _VAProcFilterCapColorBalance::va_reserved"]
        [::std::mem::offset_of!(_VAProcFilterCapColorBalance, va_reserved) - 36usize];
};
pub type VAProcFilterCapColorBalance = _VAProcFilterCapColorBalance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProcFilterCapTotalColorCorrection {
    pub type_: VAProcTotalColorCorrectionType,
    pub range: VAProcFilterValueRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProcFilterCapTotalColorCorrection"]
        [::std::mem::size_of::<_VAProcFilterCapTotalColorCorrection>() - 36usize];
    ["Alignment of _VAProcFilterCapTotalColorCorrection"]
        [::std::mem::align_of::<_VAProcFilterCapTotalColorCorrection>() - 4usize];
    ["Offset of field: _VAProcFilterCapTotalColorCorrection::type_"]
        [::std::mem::offset_of!(_VAProcFilterCapTotalColorCorrection, type_) - 0usize];
    ["Offset of field: _VAProcFilterCapTotalColorCorrection::range"]
        [::std::mem::offset_of!(_VAProcFilterCapTotalColorCorrection, range) - 4usize];
};
pub type VAProcFilterCapTotalColorCorrection = _VAProcFilterCapTotalColorCorrection;
pub type VAProtectedSessionID = VAGenericID;
pub const VA_TEE_EXECUTE_FUNCTION_ID_PASS_THROUGH: _VA_TEE_EXEC_FUNCTION_ID = 1;
pub const VA_TEE_EXECUTE_FUNCTION_ID_GET_FIRMWARE_VERSION: _VA_TEE_EXEC_FUNCTION_ID = 2;
pub type _VA_TEE_EXEC_FUNCTION_ID = ::std::os::raw::c_uint;
pub use self::_VA_TEE_EXEC_FUNCTION_ID as VA_TEE_EXECUTE_FUNCTION_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProtectedSessionBuffer {
    pub max_data_size: u32,
    pub data_size: u32,
    pub data: *mut ::std::os::raw::c_void,
    pub va_reserved: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProtectedSessionBuffer"]
        [::std::mem::size_of::<_VAProtectedSessionBuffer>() - 32usize];
    ["Alignment of _VAProtectedSessionBuffer"]
        [::std::mem::align_of::<_VAProtectedSessionBuffer>() - 8usize];
    ["Offset of field: _VAProtectedSessionBuffer::max_data_size"]
        [::std::mem::offset_of!(_VAProtectedSessionBuffer, max_data_size) - 0usize];
    ["Offset of field: _VAProtectedSessionBuffer::data_size"]
        [::std::mem::offset_of!(_VAProtectedSessionBuffer, data_size) - 4usize];
    ["Offset of field: _VAProtectedSessionBuffer::data"]
        [::std::mem::offset_of!(_VAProtectedSessionBuffer, data) - 8usize];
    ["Offset of field: _VAProtectedSessionBuffer::va_reserved"]
        [::std::mem::offset_of!(_VAProtectedSessionBuffer, va_reserved) - 16usize];
};
pub type VAProtectedSessionBuffer = _VAProtectedSessionBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VAProtectedSessionExecuteBuffer {
    pub function_id: u32,
    pub input: VAProtectedSessionBuffer,
    pub output: VAProtectedSessionBuffer,
    pub status: u32,
    pub vtag: u64,
    pub va_reserved: [u32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VAProtectedSessionExecuteBuffer"]
        [::std::mem::size_of::<_VAProtectedSessionExecuteBuffer>() - 96usize];
    ["Alignment of _VAProtectedSessionExecuteBuffer"]
        [::std::mem::align_of::<_VAProtectedSessionExecuteBuffer>() - 8usize];
    ["Offset of field: _VAProtectedSessionExecuteBuffer::function_id"]
        [::std::mem::offset_of!(_VAProtectedSessionExecuteBuffer, function_id) - 0usize];
    ["Offset of field: _VAProtectedSessionExecuteBuffer::input"]
        [::std::mem::offset_of!(_VAProtectedSessionExecuteBuffer, input) - 8usize];
    ["Offset of field: _VAProtectedSessionExecuteBuffer::output"]
        [::std::mem::offset_of!(_VAProtectedSessionExecuteBuffer, output) - 40usize];
    ["Offset of field: _VAProtectedSessionExecuteBuffer::status"]
        [::std::mem::offset_of!(_VAProtectedSessionExecuteBuffer, status) - 72usize];
    ["Offset of field: _VAProtectedSessionExecuteBuffer::vtag"]
        [::std::mem::offset_of!(_VAProtectedSessionExecuteBuffer, vtag) - 80usize];
    ["Offset of field: _VAProtectedSessionExecuteBuffer::va_reserved"]
        [::std::mem::offset_of!(_VAProtectedSessionExecuteBuffer, va_reserved) - 88usize];
};
pub type VAProtectedSessionExecuteBuffer = _VAProtectedSessionExecuteBuffer;
pub struct va {
    __library: ::libloading::Library,
    pub vaErrorStr: Result<
        unsafe extern "C" fn(error_status: VAStatus) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub vaSetErrorCallback: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            callback: VAMessageCallback,
            user_context: *mut ::std::os::raw::c_void,
        ) -> VAMessageCallback,
        ::libloading::Error,
    >,
    pub vaSetInfoCallback: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            callback: VAMessageCallback,
            user_context: *mut ::std::os::raw::c_void,
        ) -> VAMessageCallback,
        ::libloading::Error,
    >,
    pub vaDisplayIsValid:
        Result<unsafe extern "C" fn(dpy: VADisplay) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vaSetDriverName: Result<
        unsafe extern "C" fn(dpy: VADisplay, driver_name: *mut ::std::os::raw::c_char) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaInitialize: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            major_version: *mut ::std::os::raw::c_int,
            minor_version: *mut ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaTerminate: Result<unsafe extern "C" fn(dpy: VADisplay) -> VAStatus, ::libloading::Error>,
    pub vaQueryVendorString: Result<
        unsafe extern "C" fn(dpy: VADisplay) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub vaGetLibFunc: Result<
        unsafe extern "C" fn(dpy: VADisplay, func: *const ::std::os::raw::c_char) -> VAPrivFunc,
        ::libloading::Error,
    >,
    pub vaMaxNumProfiles:
        Result<unsafe extern "C" fn(dpy: VADisplay) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vaMaxNumEntrypoints:
        Result<unsafe extern "C" fn(dpy: VADisplay) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vaMaxNumConfigAttributes:
        Result<unsafe extern "C" fn(dpy: VADisplay) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vaQueryConfigProfiles: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            profile_list: *mut VAProfile,
            num_profiles: *mut ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQueryConfigEntrypoints: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            profile: VAProfile,
            entrypoint_list: *mut VAEntrypoint,
            num_entrypoints: *mut ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaGetConfigAttributes: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            profile: VAProfile,
            entrypoint: VAEntrypoint,
            attrib_list: *mut VAConfigAttrib,
            num_attribs: ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateConfig: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            profile: VAProfile,
            entrypoint: VAEntrypoint,
            attrib_list: *mut VAConfigAttrib,
            num_attribs: ::std::os::raw::c_int,
            config_id: *mut VAConfigID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDestroyConfig: Result<
        unsafe extern "C" fn(dpy: VADisplay, config_id: VAConfigID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQueryConfigAttributes: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            config_id: VAConfigID,
            profile: *mut VAProfile,
            entrypoint: *mut VAEntrypoint,
            attrib_list: *mut VAConfigAttrib,
            num_attribs: *mut ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQuerySurfaceAttributes: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            config: VAConfigID,
            attrib_list: *mut VASurfaceAttrib,
            num_attribs: *mut ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateSurfaces: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            format: ::std::os::raw::c_uint,
            width: ::std::os::raw::c_uint,
            height: ::std::os::raw::c_uint,
            surfaces: *mut VASurfaceID,
            num_surfaces: ::std::os::raw::c_uint,
            attrib_list: *mut VASurfaceAttrib,
            num_attribs: ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDestroySurfaces: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            surfaces: *mut VASurfaceID,
            num_surfaces: ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateContext: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            config_id: VAConfigID,
            picture_width: ::std::os::raw::c_int,
            picture_height: ::std::os::raw::c_int,
            flag: ::std::os::raw::c_int,
            render_targets: *mut VASurfaceID,
            num_render_targets: ::std::os::raw::c_int,
            context: *mut VAContextID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDestroyContext: Result<
        unsafe extern "C" fn(dpy: VADisplay, context: VAContextID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateMFContext: Result<
        unsafe extern "C" fn(dpy: VADisplay, mf_context: *mut VAMFContextID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMFAddContext: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            mf_context: VAMFContextID,
            context: VAContextID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMFReleaseContext: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            mf_context: VAMFContextID,
            context: VAContextID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQueryProcessingRate: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            config: VAConfigID,
            proc_buf: *mut VAProcessingRateParameter,
            processing_rate: *mut ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateBuffer: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            context: VAContextID,
            type_: VABufferType,
            size: ::std::os::raw::c_uint,
            num_elements: ::std::os::raw::c_uint,
            data: *mut ::std::os::raw::c_void,
            buf_id: *mut VABufferID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateBuffer2: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            context: VAContextID,
            type_: VABufferType,
            width: ::std::os::raw::c_uint,
            height: ::std::os::raw::c_uint,
            unit_size: *mut ::std::os::raw::c_uint,
            pitch: *mut ::std::os::raw::c_uint,
            buf_id: *mut VABufferID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaBufferSetNumElements: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            buf_id: VABufferID,
            num_elements: ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMapBuffer: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            buf_id: VABufferID,
            pbuf: *mut *mut ::std::os::raw::c_void,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMapBuffer2: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            buf_id: VABufferID,
            pbuf: *mut *mut ::std::os::raw::c_void,
            flags: u32,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaUnmapBuffer: Result<
        unsafe extern "C" fn(dpy: VADisplay, buf_id: VABufferID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDestroyBuffer: Result<
        unsafe extern "C" fn(dpy: VADisplay, buffer_id: VABufferID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaAcquireBufferHandle: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            buf_id: VABufferID,
            buf_info: *mut VABufferInfo,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaReleaseBufferHandle: Result<
        unsafe extern "C" fn(dpy: VADisplay, buf_id: VABufferID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaExportSurfaceHandle: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            surface_id: VASurfaceID,
            mem_type: u32,
            flags: u32,
            descriptor: *mut ::std::os::raw::c_void,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaBeginPicture: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            context: VAContextID,
            render_target: VASurfaceID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaRenderPicture: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            context: VAContextID,
            buffers: *mut VABufferID,
            num_buffers: ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaEndPicture: Result<
        unsafe extern "C" fn(dpy: VADisplay, context: VAContextID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMFSubmit: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            mf_context: VAMFContextID,
            contexts: *mut VAContextID,
            num_contexts: ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSyncSurface: Result<
        unsafe extern "C" fn(dpy: VADisplay, render_target: VASurfaceID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSyncSurface2: Result<
        unsafe extern "C" fn(dpy: VADisplay, surface: VASurfaceID, timeout_ns: u64) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQuerySurfaceStatus: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            render_target: VASurfaceID,
            status: *mut VASurfaceStatus,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQuerySurfaceError: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            surface: VASurfaceID,
            error_status: VAStatus,
            error_info: *mut *mut ::std::os::raw::c_void,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSyncBuffer: Result<
        unsafe extern "C" fn(dpy: VADisplay, buf_id: VABufferID, timeout_ns: u64) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMaxNumImageFormats:
        Result<unsafe extern "C" fn(dpy: VADisplay) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vaQueryImageFormats: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            format_list: *mut VAImageFormat,
            num_formats: *mut ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateImage: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            format: *mut VAImageFormat,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            image: *mut VAImage,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDestroyImage: Result<
        unsafe extern "C" fn(dpy: VADisplay, image: VAImageID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSetImagePalette: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            image: VAImageID,
            palette: *mut ::std::os::raw::c_uchar,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaGetImage: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            surface: VASurfaceID,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_uint,
            height: ::std::os::raw::c_uint,
            image: VAImageID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaPutImage: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            surface: VASurfaceID,
            image: VAImageID,
            src_x: ::std::os::raw::c_int,
            src_y: ::std::os::raw::c_int,
            src_width: ::std::os::raw::c_uint,
            src_height: ::std::os::raw::c_uint,
            dest_x: ::std::os::raw::c_int,
            dest_y: ::std::os::raw::c_int,
            dest_width: ::std::os::raw::c_uint,
            dest_height: ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDeriveImage: Result<
        unsafe extern "C" fn(dpy: VADisplay, surface: VASurfaceID, image: *mut VAImage) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMaxNumSubpictureFormats:
        Result<unsafe extern "C" fn(dpy: VADisplay) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vaQuerySubpictureFormats: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            format_list: *mut VAImageFormat,
            flags: *mut ::std::os::raw::c_uint,
            num_formats: *mut ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateSubpicture: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            image: VAImageID,
            subpicture: *mut VASubpictureID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDestroySubpicture: Result<
        unsafe extern "C" fn(dpy: VADisplay, subpicture: VASubpictureID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSetSubpictureImage: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            subpicture: VASubpictureID,
            image: VAImageID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSetSubpictureChromakey: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            subpicture: VASubpictureID,
            chromakey_min: ::std::os::raw::c_uint,
            chromakey_max: ::std::os::raw::c_uint,
            chromakey_mask: ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSetSubpictureGlobalAlpha: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            subpicture: VASubpictureID,
            global_alpha: f32,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaAssociateSubpicture: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            subpicture: VASubpictureID,
            target_surfaces: *mut VASurfaceID,
            num_surfaces: ::std::os::raw::c_int,
            src_x: i16,
            src_y: i16,
            src_width: u16,
            src_height: u16,
            dest_x: i16,
            dest_y: i16,
            dest_width: u16,
            dest_height: u16,
            flags: u32,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDeassociateSubpicture: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            subpicture: VASubpictureID,
            target_surfaces: *mut VASurfaceID,
            num_surfaces: ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaMaxNumDisplayAttributes:
        Result<unsafe extern "C" fn(dpy: VADisplay) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vaQueryDisplayAttributes: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            attr_list: *mut VADisplayAttribute,
            num_attributes: *mut ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaGetDisplayAttributes: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            attr_list: *mut VADisplayAttribute,
            num_attributes: ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaSetDisplayAttributes: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            attr_list: *mut VADisplayAttribute,
            num_attributes: ::std::os::raw::c_int,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCopy: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            dst: *mut VACopyObject,
            src: *mut VACopyObject,
            option: VACopyOption,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQueryVideoProcFilters: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            context: VAContextID,
            filters: *mut VAProcFilterType,
            num_filters: *mut ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQueryVideoProcFilterCaps: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            context: VAContextID,
            type_: VAProcFilterType,
            filter_caps: *mut ::std::os::raw::c_void,
            num_filter_caps: *mut ::std::os::raw::c_uint,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaQueryVideoProcPipelineCaps: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            context: VAContextID,
            filters: *mut VABufferID,
            num_filters: ::std::os::raw::c_uint,
            pipeline_caps: *mut VAProcPipelineCaps,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaCreateProtectedSession: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            config_id: VAConfigID,
            protected_session: *mut VAProtectedSessionID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDestroyProtectedSession: Result<
        unsafe extern "C" fn(dpy: VADisplay, protected_session: VAProtectedSessionID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaAttachProtectedSession: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            id: VAGenericID,
            protected_session: VAProtectedSessionID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaDetachProtectedSession: Result<
        unsafe extern "C" fn(dpy: VADisplay, id: VAGenericID) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaProtectedSessionExecute: Result<
        unsafe extern "C" fn(
            dpy: VADisplay,
            protected_session: VAProtectedSessionID,
            buf_id: VABufferID,
        ) -> VAStatus,
        ::libloading::Error,
    >,
    pub vaGetDisplayDRM:
        Result<unsafe extern "C" fn(fd: ::std::os::raw::c_int) -> VADisplay, ::libloading::Error>,
}
impl va {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let vaErrorStr = __library.get(b"vaErrorStr\0").map(|sym| *sym);
        let vaSetErrorCallback = __library.get(b"vaSetErrorCallback\0").map(|sym| *sym);
        let vaSetInfoCallback = __library.get(b"vaSetInfoCallback\0").map(|sym| *sym);
        let vaDisplayIsValid = __library.get(b"vaDisplayIsValid\0").map(|sym| *sym);
        let vaSetDriverName = __library.get(b"vaSetDriverName\0").map(|sym| *sym);
        let vaInitialize = __library.get(b"vaInitialize\0").map(|sym| *sym);
        let vaTerminate = __library.get(b"vaTerminate\0").map(|sym| *sym);
        let vaQueryVendorString = __library.get(b"vaQueryVendorString\0").map(|sym| *sym);
        let vaGetLibFunc = __library.get(b"vaGetLibFunc\0").map(|sym| *sym);
        let vaMaxNumProfiles = __library.get(b"vaMaxNumProfiles\0").map(|sym| *sym);
        let vaMaxNumEntrypoints = __library.get(b"vaMaxNumEntrypoints\0").map(|sym| *sym);
        let vaMaxNumConfigAttributes = __library.get(b"vaMaxNumConfigAttributes\0").map(|sym| *sym);
        let vaQueryConfigProfiles = __library.get(b"vaQueryConfigProfiles\0").map(|sym| *sym);
        let vaQueryConfigEntrypoints = __library.get(b"vaQueryConfigEntrypoints\0").map(|sym| *sym);
        let vaGetConfigAttributes = __library.get(b"vaGetConfigAttributes\0").map(|sym| *sym);
        let vaCreateConfig = __library.get(b"vaCreateConfig\0").map(|sym| *sym);
        let vaDestroyConfig = __library.get(b"vaDestroyConfig\0").map(|sym| *sym);
        let vaQueryConfigAttributes = __library.get(b"vaQueryConfigAttributes\0").map(|sym| *sym);
        let vaQuerySurfaceAttributes = __library.get(b"vaQuerySurfaceAttributes\0").map(|sym| *sym);
        let vaCreateSurfaces = __library.get(b"vaCreateSurfaces\0").map(|sym| *sym);
        let vaDestroySurfaces = __library.get(b"vaDestroySurfaces\0").map(|sym| *sym);
        let vaCreateContext = __library.get(b"vaCreateContext\0").map(|sym| *sym);
        let vaDestroyContext = __library.get(b"vaDestroyContext\0").map(|sym| *sym);
        let vaCreateMFContext = __library.get(b"vaCreateMFContext\0").map(|sym| *sym);
        let vaMFAddContext = __library.get(b"vaMFAddContext\0").map(|sym| *sym);
        let vaMFReleaseContext = __library.get(b"vaMFReleaseContext\0").map(|sym| *sym);
        let vaQueryProcessingRate = __library.get(b"vaQueryProcessingRate\0").map(|sym| *sym);
        let vaCreateBuffer = __library.get(b"vaCreateBuffer\0").map(|sym| *sym);
        let vaCreateBuffer2 = __library.get(b"vaCreateBuffer2\0").map(|sym| *sym);
        let vaBufferSetNumElements = __library.get(b"vaBufferSetNumElements\0").map(|sym| *sym);
        let vaMapBuffer = __library.get(b"vaMapBuffer\0").map(|sym| *sym);
        let vaMapBuffer2 = __library.get(b"vaMapBuffer2\0").map(|sym| *sym);
        let vaUnmapBuffer = __library.get(b"vaUnmapBuffer\0").map(|sym| *sym);
        let vaDestroyBuffer = __library.get(b"vaDestroyBuffer\0").map(|sym| *sym);
        let vaAcquireBufferHandle = __library.get(b"vaAcquireBufferHandle\0").map(|sym| *sym);
        let vaReleaseBufferHandle = __library.get(b"vaReleaseBufferHandle\0").map(|sym| *sym);
        let vaExportSurfaceHandle = __library.get(b"vaExportSurfaceHandle\0").map(|sym| *sym);
        let vaBeginPicture = __library.get(b"vaBeginPicture\0").map(|sym| *sym);
        let vaRenderPicture = __library.get(b"vaRenderPicture\0").map(|sym| *sym);
        let vaEndPicture = __library.get(b"vaEndPicture\0").map(|sym| *sym);
        let vaMFSubmit = __library.get(b"vaMFSubmit\0").map(|sym| *sym);
        let vaSyncSurface = __library.get(b"vaSyncSurface\0").map(|sym| *sym);
        let vaSyncSurface2 = __library.get(b"vaSyncSurface2\0").map(|sym| *sym);
        let vaQuerySurfaceStatus = __library.get(b"vaQuerySurfaceStatus\0").map(|sym| *sym);
        let vaQuerySurfaceError = __library.get(b"vaQuerySurfaceError\0").map(|sym| *sym);
        let vaSyncBuffer = __library.get(b"vaSyncBuffer\0").map(|sym| *sym);
        let vaMaxNumImageFormats = __library.get(b"vaMaxNumImageFormats\0").map(|sym| *sym);
        let vaQueryImageFormats = __library.get(b"vaQueryImageFormats\0").map(|sym| *sym);
        let vaCreateImage = __library.get(b"vaCreateImage\0").map(|sym| *sym);
        let vaDestroyImage = __library.get(b"vaDestroyImage\0").map(|sym| *sym);
        let vaSetImagePalette = __library.get(b"vaSetImagePalette\0").map(|sym| *sym);
        let vaGetImage = __library.get(b"vaGetImage\0").map(|sym| *sym);
        let vaPutImage = __library.get(b"vaPutImage\0").map(|sym| *sym);
        let vaDeriveImage = __library.get(b"vaDeriveImage\0").map(|sym| *sym);
        let vaMaxNumSubpictureFormats = __library
            .get(b"vaMaxNumSubpictureFormats\0")
            .map(|sym| *sym);
        let vaQuerySubpictureFormats = __library.get(b"vaQuerySubpictureFormats\0").map(|sym| *sym);
        let vaCreateSubpicture = __library.get(b"vaCreateSubpicture\0").map(|sym| *sym);
        let vaDestroySubpicture = __library.get(b"vaDestroySubpicture\0").map(|sym| *sym);
        let vaSetSubpictureImage = __library.get(b"vaSetSubpictureImage\0").map(|sym| *sym);
        let vaSetSubpictureChromakey = __library.get(b"vaSetSubpictureChromakey\0").map(|sym| *sym);
        let vaSetSubpictureGlobalAlpha = __library
            .get(b"vaSetSubpictureGlobalAlpha\0")
            .map(|sym| *sym);
        let vaAssociateSubpicture = __library.get(b"vaAssociateSubpicture\0").map(|sym| *sym);
        let vaDeassociateSubpicture = __library.get(b"vaDeassociateSubpicture\0").map(|sym| *sym);
        let vaMaxNumDisplayAttributes = __library
            .get(b"vaMaxNumDisplayAttributes\0")
            .map(|sym| *sym);
        let vaQueryDisplayAttributes = __library.get(b"vaQueryDisplayAttributes\0").map(|sym| *sym);
        let vaGetDisplayAttributes = __library.get(b"vaGetDisplayAttributes\0").map(|sym| *sym);
        let vaSetDisplayAttributes = __library.get(b"vaSetDisplayAttributes\0").map(|sym| *sym);
        let vaCopy = __library.get(b"vaCopy\0").map(|sym| *sym);
        let vaQueryVideoProcFilters = __library.get(b"vaQueryVideoProcFilters\0").map(|sym| *sym);
        let vaQueryVideoProcFilterCaps = __library
            .get(b"vaQueryVideoProcFilterCaps\0")
            .map(|sym| *sym);
        let vaQueryVideoProcPipelineCaps = __library
            .get(b"vaQueryVideoProcPipelineCaps\0")
            .map(|sym| *sym);
        let vaCreateProtectedSession = __library.get(b"vaCreateProtectedSession\0").map(|sym| *sym);
        let vaDestroyProtectedSession = __library
            .get(b"vaDestroyProtectedSession\0")
            .map(|sym| *sym);
        let vaAttachProtectedSession = __library.get(b"vaAttachProtectedSession\0").map(|sym| *sym);
        let vaDetachProtectedSession = __library.get(b"vaDetachProtectedSession\0").map(|sym| *sym);
        let vaProtectedSessionExecute = __library
            .get(b"vaProtectedSessionExecute\0")
            .map(|sym| *sym);
        let vaGetDisplayDRM = __library.get(b"vaGetDisplayDRM\0").map(|sym| *sym);
        Ok(va {
            __library,
            vaErrorStr,
            vaSetErrorCallback,
            vaSetInfoCallback,
            vaDisplayIsValid,
            vaSetDriverName,
            vaInitialize,
            vaTerminate,
            vaQueryVendorString,
            vaGetLibFunc,
            vaMaxNumProfiles,
            vaMaxNumEntrypoints,
            vaMaxNumConfigAttributes,
            vaQueryConfigProfiles,
            vaQueryConfigEntrypoints,
            vaGetConfigAttributes,
            vaCreateConfig,
            vaDestroyConfig,
            vaQueryConfigAttributes,
            vaQuerySurfaceAttributes,
            vaCreateSurfaces,
            vaDestroySurfaces,
            vaCreateContext,
            vaDestroyContext,
            vaCreateMFContext,
            vaMFAddContext,
            vaMFReleaseContext,
            vaQueryProcessingRate,
            vaCreateBuffer,
            vaCreateBuffer2,
            vaBufferSetNumElements,
            vaMapBuffer,
            vaMapBuffer2,
            vaUnmapBuffer,
            vaDestroyBuffer,
            vaAcquireBufferHandle,
            vaReleaseBufferHandle,
            vaExportSurfaceHandle,
            vaBeginPicture,
            vaRenderPicture,
            vaEndPicture,
            vaMFSubmit,
            vaSyncSurface,
            vaSyncSurface2,
            vaQuerySurfaceStatus,
            vaQuerySurfaceError,
            vaSyncBuffer,
            vaMaxNumImageFormats,
            vaQueryImageFormats,
            vaCreateImage,
            vaDestroyImage,
            vaSetImagePalette,
            vaGetImage,
            vaPutImage,
            vaDeriveImage,
            vaMaxNumSubpictureFormats,
            vaQuerySubpictureFormats,
            vaCreateSubpicture,
            vaDestroySubpicture,
            vaSetSubpictureImage,
            vaSetSubpictureChromakey,
            vaSetSubpictureGlobalAlpha,
            vaAssociateSubpicture,
            vaDeassociateSubpicture,
            vaMaxNumDisplayAttributes,
            vaQueryDisplayAttributes,
            vaGetDisplayAttributes,
            vaSetDisplayAttributes,
            vaCopy,
            vaQueryVideoProcFilters,
            vaQueryVideoProcFilterCaps,
            vaQueryVideoProcPipelineCaps,
            vaCreateProtectedSession,
            vaDestroyProtectedSession,
            vaAttachProtectedSession,
            vaDetachProtectedSession,
            vaProtectedSessionExecute,
            vaGetDisplayDRM,
        })
    }
    pub unsafe fn vaErrorStr(&self, error_status: VAStatus) -> *const ::std::os::raw::c_char {
        (self
            .vaErrorStr
            .as_ref()
            .expect("Expected function, got error."))(error_status)
    }
    pub unsafe fn vaSetErrorCallback(
        &self,
        dpy: VADisplay,
        callback: VAMessageCallback,
        user_context: *mut ::std::os::raw::c_void,
    ) -> VAMessageCallback {
        (self
            .vaSetErrorCallback
            .as_ref()
            .expect("Expected function, got error."))(dpy, callback, user_context)
    }
    pub unsafe fn vaSetInfoCallback(
        &self,
        dpy: VADisplay,
        callback: VAMessageCallback,
        user_context: *mut ::std::os::raw::c_void,
    ) -> VAMessageCallback {
        (self
            .vaSetInfoCallback
            .as_ref()
            .expect("Expected function, got error."))(dpy, callback, user_context)
    }
    pub unsafe fn vaDisplayIsValid(&self, dpy: VADisplay) -> ::std::os::raw::c_int {
        (self
            .vaDisplayIsValid
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaSetDriverName(
        &self,
        dpy: VADisplay,
        driver_name: *mut ::std::os::raw::c_char,
    ) -> VAStatus {
        (self
            .vaSetDriverName
            .as_ref()
            .expect("Expected function, got error."))(dpy, driver_name)
    }
    pub unsafe fn vaInitialize(
        &self,
        dpy: VADisplay,
        major_version: *mut ::std::os::raw::c_int,
        minor_version: *mut ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaInitialize
            .as_ref()
            .expect("Expected function, got error."))(dpy, major_version, minor_version)
    }
    pub unsafe fn vaTerminate(&self, dpy: VADisplay) -> VAStatus {
        (self
            .vaTerminate
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaQueryVendorString(&self, dpy: VADisplay) -> *const ::std::os::raw::c_char {
        (self
            .vaQueryVendorString
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaGetLibFunc(
        &self,
        dpy: VADisplay,
        func: *const ::std::os::raw::c_char,
    ) -> VAPrivFunc {
        (self
            .vaGetLibFunc
            .as_ref()
            .expect("Expected function, got error."))(dpy, func)
    }
    pub unsafe fn vaMaxNumProfiles(&self, dpy: VADisplay) -> ::std::os::raw::c_int {
        (self
            .vaMaxNumProfiles
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaMaxNumEntrypoints(&self, dpy: VADisplay) -> ::std::os::raw::c_int {
        (self
            .vaMaxNumEntrypoints
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaMaxNumConfigAttributes(&self, dpy: VADisplay) -> ::std::os::raw::c_int {
        (self
            .vaMaxNumConfigAttributes
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaQueryConfigProfiles(
        &self,
        dpy: VADisplay,
        profile_list: *mut VAProfile,
        num_profiles: *mut ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaQueryConfigProfiles
            .as_ref()
            .expect("Expected function, got error."))(dpy, profile_list, num_profiles)
    }
    pub unsafe fn vaQueryConfigEntrypoints(
        &self,
        dpy: VADisplay,
        profile: VAProfile,
        entrypoint_list: *mut VAEntrypoint,
        num_entrypoints: *mut ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaQueryConfigEntrypoints
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            profile,
            entrypoint_list,
            num_entrypoints,
        )
    }
    pub unsafe fn vaGetConfigAttributes(
        &self,
        dpy: VADisplay,
        profile: VAProfile,
        entrypoint: VAEntrypoint,
        attrib_list: *mut VAConfigAttrib,
        num_attribs: ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaGetConfigAttributes
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            profile,
            entrypoint,
            attrib_list,
            num_attribs,
        )
    }
    pub unsafe fn vaCreateConfig(
        &self,
        dpy: VADisplay,
        profile: VAProfile,
        entrypoint: VAEntrypoint,
        attrib_list: *mut VAConfigAttrib,
        num_attribs: ::std::os::raw::c_int,
        config_id: *mut VAConfigID,
    ) -> VAStatus {
        (self
            .vaCreateConfig
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            profile,
            entrypoint,
            attrib_list,
            num_attribs,
            config_id,
        )
    }
    pub unsafe fn vaDestroyConfig(&self, dpy: VADisplay, config_id: VAConfigID) -> VAStatus {
        (self
            .vaDestroyConfig
            .as_ref()
            .expect("Expected function, got error."))(dpy, config_id)
    }
    pub unsafe fn vaQueryConfigAttributes(
        &self,
        dpy: VADisplay,
        config_id: VAConfigID,
        profile: *mut VAProfile,
        entrypoint: *mut VAEntrypoint,
        attrib_list: *mut VAConfigAttrib,
        num_attribs: *mut ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaQueryConfigAttributes
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            config_id,
            profile,
            entrypoint,
            attrib_list,
            num_attribs,
        )
    }
    pub unsafe fn vaQuerySurfaceAttributes(
        &self,
        dpy: VADisplay,
        config: VAConfigID,
        attrib_list: *mut VASurfaceAttrib,
        num_attribs: *mut ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaQuerySurfaceAttributes
            .as_ref()
            .expect("Expected function, got error."))(dpy, config, attrib_list, num_attribs)
    }
    pub unsafe fn vaCreateSurfaces(
        &self,
        dpy: VADisplay,
        format: ::std::os::raw::c_uint,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        surfaces: *mut VASurfaceID,
        num_surfaces: ::std::os::raw::c_uint,
        attrib_list: *mut VASurfaceAttrib,
        num_attribs: ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaCreateSurfaces
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            format,
            width,
            height,
            surfaces,
            num_surfaces,
            attrib_list,
            num_attribs,
        )
    }
    pub unsafe fn vaDestroySurfaces(
        &self,
        dpy: VADisplay,
        surfaces: *mut VASurfaceID,
        num_surfaces: ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaDestroySurfaces
            .as_ref()
            .expect("Expected function, got error."))(dpy, surfaces, num_surfaces)
    }
    pub unsafe fn vaCreateContext(
        &self,
        dpy: VADisplay,
        config_id: VAConfigID,
        picture_width: ::std::os::raw::c_int,
        picture_height: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_int,
        render_targets: *mut VASurfaceID,
        num_render_targets: ::std::os::raw::c_int,
        context: *mut VAContextID,
    ) -> VAStatus {
        (self
            .vaCreateContext
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            config_id,
            picture_width,
            picture_height,
            flag,
            render_targets,
            num_render_targets,
            context,
        )
    }
    pub unsafe fn vaDestroyContext(&self, dpy: VADisplay, context: VAContextID) -> VAStatus {
        (self
            .vaDestroyContext
            .as_ref()
            .expect("Expected function, got error."))(dpy, context)
    }
    pub unsafe fn vaCreateMFContext(
        &self,
        dpy: VADisplay,
        mf_context: *mut VAMFContextID,
    ) -> VAStatus {
        (self
            .vaCreateMFContext
            .as_ref()
            .expect("Expected function, got error."))(dpy, mf_context)
    }
    pub unsafe fn vaMFAddContext(
        &self,
        dpy: VADisplay,
        mf_context: VAMFContextID,
        context: VAContextID,
    ) -> VAStatus {
        (self
            .vaMFAddContext
            .as_ref()
            .expect("Expected function, got error."))(dpy, mf_context, context)
    }
    pub unsafe fn vaMFReleaseContext(
        &self,
        dpy: VADisplay,
        mf_context: VAMFContextID,
        context: VAContextID,
    ) -> VAStatus {
        (self
            .vaMFReleaseContext
            .as_ref()
            .expect("Expected function, got error."))(dpy, mf_context, context)
    }
    pub unsafe fn vaQueryProcessingRate(
        &self,
        dpy: VADisplay,
        config: VAConfigID,
        proc_buf: *mut VAProcessingRateParameter,
        processing_rate: *mut ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaQueryProcessingRate
            .as_ref()
            .expect("Expected function, got error."))(dpy, config, proc_buf, processing_rate)
    }
    pub unsafe fn vaCreateBuffer(
        &self,
        dpy: VADisplay,
        context: VAContextID,
        type_: VABufferType,
        size: ::std::os::raw::c_uint,
        num_elements: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
        buf_id: *mut VABufferID,
    ) -> VAStatus {
        (self
            .vaCreateBuffer
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            context,
            type_,
            size,
            num_elements,
            data,
            buf_id,
        )
    }
    pub unsafe fn vaCreateBuffer2(
        &self,
        dpy: VADisplay,
        context: VAContextID,
        type_: VABufferType,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        unit_size: *mut ::std::os::raw::c_uint,
        pitch: *mut ::std::os::raw::c_uint,
        buf_id: *mut VABufferID,
    ) -> VAStatus {
        (self
            .vaCreateBuffer2
            .as_ref()
            .expect("Expected function, got error."))(
            dpy, context, type_, width, height, unit_size, pitch, buf_id,
        )
    }
    pub unsafe fn vaBufferSetNumElements(
        &self,
        dpy: VADisplay,
        buf_id: VABufferID,
        num_elements: ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaBufferSetNumElements
            .as_ref()
            .expect("Expected function, got error."))(dpy, buf_id, num_elements)
    }
    pub unsafe fn vaMapBuffer(
        &self,
        dpy: VADisplay,
        buf_id: VABufferID,
        pbuf: *mut *mut ::std::os::raw::c_void,
    ) -> VAStatus {
        (self
            .vaMapBuffer
            .as_ref()
            .expect("Expected function, got error."))(dpy, buf_id, pbuf)
    }
    pub unsafe fn vaMapBuffer2(
        &self,
        dpy: VADisplay,
        buf_id: VABufferID,
        pbuf: *mut *mut ::std::os::raw::c_void,
        flags: u32,
    ) -> VAStatus {
        (self
            .vaMapBuffer2
            .as_ref()
            .expect("Expected function, got error."))(dpy, buf_id, pbuf, flags)
    }
    pub unsafe fn vaUnmapBuffer(&self, dpy: VADisplay, buf_id: VABufferID) -> VAStatus {
        (self
            .vaUnmapBuffer
            .as_ref()
            .expect("Expected function, got error."))(dpy, buf_id)
    }
    pub unsafe fn vaDestroyBuffer(&self, dpy: VADisplay, buffer_id: VABufferID) -> VAStatus {
        (self
            .vaDestroyBuffer
            .as_ref()
            .expect("Expected function, got error."))(dpy, buffer_id)
    }
    pub unsafe fn vaAcquireBufferHandle(
        &self,
        dpy: VADisplay,
        buf_id: VABufferID,
        buf_info: *mut VABufferInfo,
    ) -> VAStatus {
        (self
            .vaAcquireBufferHandle
            .as_ref()
            .expect("Expected function, got error."))(dpy, buf_id, buf_info)
    }
    pub unsafe fn vaReleaseBufferHandle(&self, dpy: VADisplay, buf_id: VABufferID) -> VAStatus {
        (self
            .vaReleaseBufferHandle
            .as_ref()
            .expect("Expected function, got error."))(dpy, buf_id)
    }
    pub unsafe fn vaExportSurfaceHandle(
        &self,
        dpy: VADisplay,
        surface_id: VASurfaceID,
        mem_type: u32,
        flags: u32,
        descriptor: *mut ::std::os::raw::c_void,
    ) -> VAStatus {
        (self
            .vaExportSurfaceHandle
            .as_ref()
            .expect("Expected function, got error."))(
            dpy, surface_id, mem_type, flags, descriptor
        )
    }
    pub unsafe fn vaBeginPicture(
        &self,
        dpy: VADisplay,
        context: VAContextID,
        render_target: VASurfaceID,
    ) -> VAStatus {
        (self
            .vaBeginPicture
            .as_ref()
            .expect("Expected function, got error."))(dpy, context, render_target)
    }
    pub unsafe fn vaRenderPicture(
        &self,
        dpy: VADisplay,
        context: VAContextID,
        buffers: *mut VABufferID,
        num_buffers: ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaRenderPicture
            .as_ref()
            .expect("Expected function, got error."))(dpy, context, buffers, num_buffers)
    }
    pub unsafe fn vaEndPicture(&self, dpy: VADisplay, context: VAContextID) -> VAStatus {
        (self
            .vaEndPicture
            .as_ref()
            .expect("Expected function, got error."))(dpy, context)
    }
    pub unsafe fn vaMFSubmit(
        &self,
        dpy: VADisplay,
        mf_context: VAMFContextID,
        contexts: *mut VAContextID,
        num_contexts: ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaMFSubmit
            .as_ref()
            .expect("Expected function, got error."))(
            dpy, mf_context, contexts, num_contexts
        )
    }
    pub unsafe fn vaSyncSurface(&self, dpy: VADisplay, render_target: VASurfaceID) -> VAStatus {
        (self
            .vaSyncSurface
            .as_ref()
            .expect("Expected function, got error."))(dpy, render_target)
    }
    pub unsafe fn vaSyncSurface2(
        &self,
        dpy: VADisplay,
        surface: VASurfaceID,
        timeout_ns: u64,
    ) -> VAStatus {
        (self
            .vaSyncSurface2
            .as_ref()
            .expect("Expected function, got error."))(dpy, surface, timeout_ns)
    }
    pub unsafe fn vaQuerySurfaceStatus(
        &self,
        dpy: VADisplay,
        render_target: VASurfaceID,
        status: *mut VASurfaceStatus,
    ) -> VAStatus {
        (self
            .vaQuerySurfaceStatus
            .as_ref()
            .expect("Expected function, got error."))(dpy, render_target, status)
    }
    pub unsafe fn vaQuerySurfaceError(
        &self,
        dpy: VADisplay,
        surface: VASurfaceID,
        error_status: VAStatus,
        error_info: *mut *mut ::std::os::raw::c_void,
    ) -> VAStatus {
        (self
            .vaQuerySurfaceError
            .as_ref()
            .expect("Expected function, got error."))(dpy, surface, error_status, error_info)
    }
    pub unsafe fn vaSyncBuffer(
        &self,
        dpy: VADisplay,
        buf_id: VABufferID,
        timeout_ns: u64,
    ) -> VAStatus {
        (self
            .vaSyncBuffer
            .as_ref()
            .expect("Expected function, got error."))(dpy, buf_id, timeout_ns)
    }
    pub unsafe fn vaMaxNumImageFormats(&self, dpy: VADisplay) -> ::std::os::raw::c_int {
        (self
            .vaMaxNumImageFormats
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaQueryImageFormats(
        &self,
        dpy: VADisplay,
        format_list: *mut VAImageFormat,
        num_formats: *mut ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaQueryImageFormats
            .as_ref()
            .expect("Expected function, got error."))(dpy, format_list, num_formats)
    }
    pub unsafe fn vaCreateImage(
        &self,
        dpy: VADisplay,
        format: *mut VAImageFormat,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        image: *mut VAImage,
    ) -> VAStatus {
        (self
            .vaCreateImage
            .as_ref()
            .expect("Expected function, got error."))(dpy, format, width, height, image)
    }
    pub unsafe fn vaDestroyImage(&self, dpy: VADisplay, image: VAImageID) -> VAStatus {
        (self
            .vaDestroyImage
            .as_ref()
            .expect("Expected function, got error."))(dpy, image)
    }
    pub unsafe fn vaSetImagePalette(
        &self,
        dpy: VADisplay,
        image: VAImageID,
        palette: *mut ::std::os::raw::c_uchar,
    ) -> VAStatus {
        (self
            .vaSetImagePalette
            .as_ref()
            .expect("Expected function, got error."))(dpy, image, palette)
    }
    pub unsafe fn vaGetImage(
        &self,
        dpy: VADisplay,
        surface: VASurfaceID,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        image: VAImageID,
    ) -> VAStatus {
        (self
            .vaGetImage
            .as_ref()
            .expect("Expected function, got error."))(
            dpy, surface, x, y, width, height, image
        )
    }
    pub unsafe fn vaPutImage(
        &self,
        dpy: VADisplay,
        surface: VASurfaceID,
        image: VAImageID,
        src_x: ::std::os::raw::c_int,
        src_y: ::std::os::raw::c_int,
        src_width: ::std::os::raw::c_uint,
        src_height: ::std::os::raw::c_uint,
        dest_x: ::std::os::raw::c_int,
        dest_y: ::std::os::raw::c_int,
        dest_width: ::std::os::raw::c_uint,
        dest_height: ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaPutImage
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            surface,
            image,
            src_x,
            src_y,
            src_width,
            src_height,
            dest_x,
            dest_y,
            dest_width,
            dest_height,
        )
    }
    pub unsafe fn vaDeriveImage(
        &self,
        dpy: VADisplay,
        surface: VASurfaceID,
        image: *mut VAImage,
    ) -> VAStatus {
        (self
            .vaDeriveImage
            .as_ref()
            .expect("Expected function, got error."))(dpy, surface, image)
    }
    pub unsafe fn vaMaxNumSubpictureFormats(&self, dpy: VADisplay) -> ::std::os::raw::c_int {
        (self
            .vaMaxNumSubpictureFormats
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaQuerySubpictureFormats(
        &self,
        dpy: VADisplay,
        format_list: *mut VAImageFormat,
        flags: *mut ::std::os::raw::c_uint,
        num_formats: *mut ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaQuerySubpictureFormats
            .as_ref()
            .expect("Expected function, got error."))(dpy, format_list, flags, num_formats)
    }
    pub unsafe fn vaCreateSubpicture(
        &self,
        dpy: VADisplay,
        image: VAImageID,
        subpicture: *mut VASubpictureID,
    ) -> VAStatus {
        (self
            .vaCreateSubpicture
            .as_ref()
            .expect("Expected function, got error."))(dpy, image, subpicture)
    }
    pub unsafe fn vaDestroySubpicture(
        &self,
        dpy: VADisplay,
        subpicture: VASubpictureID,
    ) -> VAStatus {
        (self
            .vaDestroySubpicture
            .as_ref()
            .expect("Expected function, got error."))(dpy, subpicture)
    }
    pub unsafe fn vaSetSubpictureImage(
        &self,
        dpy: VADisplay,
        subpicture: VASubpictureID,
        image: VAImageID,
    ) -> VAStatus {
        (self
            .vaSetSubpictureImage
            .as_ref()
            .expect("Expected function, got error."))(dpy, subpicture, image)
    }
    pub unsafe fn vaSetSubpictureChromakey(
        &self,
        dpy: VADisplay,
        subpicture: VASubpictureID,
        chromakey_min: ::std::os::raw::c_uint,
        chromakey_max: ::std::os::raw::c_uint,
        chromakey_mask: ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaSetSubpictureChromakey
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            subpicture,
            chromakey_min,
            chromakey_max,
            chromakey_mask,
        )
    }
    pub unsafe fn vaSetSubpictureGlobalAlpha(
        &self,
        dpy: VADisplay,
        subpicture: VASubpictureID,
        global_alpha: f32,
    ) -> VAStatus {
        (self
            .vaSetSubpictureGlobalAlpha
            .as_ref()
            .expect("Expected function, got error."))(dpy, subpicture, global_alpha)
    }
    pub unsafe fn vaAssociateSubpicture(
        &self,
        dpy: VADisplay,
        subpicture: VASubpictureID,
        target_surfaces: *mut VASurfaceID,
        num_surfaces: ::std::os::raw::c_int,
        src_x: i16,
        src_y: i16,
        src_width: u16,
        src_height: u16,
        dest_x: i16,
        dest_y: i16,
        dest_width: u16,
        dest_height: u16,
        flags: u32,
    ) -> VAStatus {
        (self
            .vaAssociateSubpicture
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            subpicture,
            target_surfaces,
            num_surfaces,
            src_x,
            src_y,
            src_width,
            src_height,
            dest_x,
            dest_y,
            dest_width,
            dest_height,
            flags,
        )
    }
    pub unsafe fn vaDeassociateSubpicture(
        &self,
        dpy: VADisplay,
        subpicture: VASubpictureID,
        target_surfaces: *mut VASurfaceID,
        num_surfaces: ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaDeassociateSubpicture
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            subpicture,
            target_surfaces,
            num_surfaces,
        )
    }
    pub unsafe fn vaMaxNumDisplayAttributes(&self, dpy: VADisplay) -> ::std::os::raw::c_int {
        (self
            .vaMaxNumDisplayAttributes
            .as_ref()
            .expect("Expected function, got error."))(dpy)
    }
    pub unsafe fn vaQueryDisplayAttributes(
        &self,
        dpy: VADisplay,
        attr_list: *mut VADisplayAttribute,
        num_attributes: *mut ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaQueryDisplayAttributes
            .as_ref()
            .expect("Expected function, got error."))(dpy, attr_list, num_attributes)
    }
    pub unsafe fn vaGetDisplayAttributes(
        &self,
        dpy: VADisplay,
        attr_list: *mut VADisplayAttribute,
        num_attributes: ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaGetDisplayAttributes
            .as_ref()
            .expect("Expected function, got error."))(dpy, attr_list, num_attributes)
    }
    pub unsafe fn vaSetDisplayAttributes(
        &self,
        dpy: VADisplay,
        attr_list: *mut VADisplayAttribute,
        num_attributes: ::std::os::raw::c_int,
    ) -> VAStatus {
        (self
            .vaSetDisplayAttributes
            .as_ref()
            .expect("Expected function, got error."))(dpy, attr_list, num_attributes)
    }
    pub unsafe fn vaCopy(
        &self,
        dpy: VADisplay,
        dst: *mut VACopyObject,
        src: *mut VACopyObject,
        option: VACopyOption,
    ) -> VAStatus {
        (self.vaCopy.as_ref().expect("Expected function, got error."))(dpy, dst, src, option)
    }
    pub unsafe fn vaQueryVideoProcFilters(
        &self,
        dpy: VADisplay,
        context: VAContextID,
        filters: *mut VAProcFilterType,
        num_filters: *mut ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaQueryVideoProcFilters
            .as_ref()
            .expect("Expected function, got error."))(dpy, context, filters, num_filters)
    }
    pub unsafe fn vaQueryVideoProcFilterCaps(
        &self,
        dpy: VADisplay,
        context: VAContextID,
        type_: VAProcFilterType,
        filter_caps: *mut ::std::os::raw::c_void,
        num_filter_caps: *mut ::std::os::raw::c_uint,
    ) -> VAStatus {
        (self
            .vaQueryVideoProcFilterCaps
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            context,
            type_,
            filter_caps,
            num_filter_caps,
        )
    }
    pub unsafe fn vaQueryVideoProcPipelineCaps(
        &self,
        dpy: VADisplay,
        context: VAContextID,
        filters: *mut VABufferID,
        num_filters: ::std::os::raw::c_uint,
        pipeline_caps: *mut VAProcPipelineCaps,
    ) -> VAStatus {
        (self
            .vaQueryVideoProcPipelineCaps
            .as_ref()
            .expect("Expected function, got error."))(
            dpy,
            context,
            filters,
            num_filters,
            pipeline_caps,
        )
    }
    pub unsafe fn vaCreateProtectedSession(
        &self,
        dpy: VADisplay,
        config_id: VAConfigID,
        protected_session: *mut VAProtectedSessionID,
    ) -> VAStatus {
        (self
            .vaCreateProtectedSession
            .as_ref()
            .expect("Expected function, got error."))(dpy, config_id, protected_session)
    }
    pub unsafe fn vaDestroyProtectedSession(
        &self,
        dpy: VADisplay,
        protected_session: VAProtectedSessionID,
    ) -> VAStatus {
        (self
            .vaDestroyProtectedSession
            .as_ref()
            .expect("Expected function, got error."))(dpy, protected_session)
    }
    pub unsafe fn vaAttachProtectedSession(
        &self,
        dpy: VADisplay,
        id: VAGenericID,
        protected_session: VAProtectedSessionID,
    ) -> VAStatus {
        (self
            .vaAttachProtectedSession
            .as_ref()
            .expect("Expected function, got error."))(dpy, id, protected_session)
    }
    pub unsafe fn vaDetachProtectedSession(&self, dpy: VADisplay, id: VAGenericID) -> VAStatus {
        (self
            .vaDetachProtectedSession
            .as_ref()
            .expect("Expected function, got error."))(dpy, id)
    }
    pub unsafe fn vaProtectedSessionExecute(
        &self,
        dpy: VADisplay,
        protected_session: VAProtectedSessionID,
        buf_id: VABufferID,
    ) -> VAStatus {
        (self
            .vaProtectedSessionExecute
            .as_ref()
            .expect("Expected function, got error."))(dpy, protected_session, buf_id)
    }
    pub unsafe fn vaGetDisplayDRM(&self, fd: ::std::os::raw::c_int) -> VADisplay {
        (self
            .vaGetDisplayDRM
            .as_ref()
            .expect("Expected function, got error."))(fd)
    }
}
